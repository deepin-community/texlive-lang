\input texinfo
@c $Id: latex2e-fr.texi 1132 2022-08-29 15:31:29Z vincentb1 $
@comment % ** début de tête (c'est pour courir Texinfo sur une région.)
@setfilename latex2e-fr.info
@documentlanguage fr
@documentencoding UTF-8
@set UPDATED Août 2022
@include common.texi
@settitle Manuel de référence officieux de @LaTeX{}2e (@value{UPDATED})
@comment % ** fin de tête (c'est pour courir Texinfo sur une région.)

@c latex 2.09 commandes devraient tous être présents maintenant,
@c xx À faire:
@c    - --shell-escape & --file-line-no pris en charge par MiKTeX
@c    - exemple pdflatex --interaction=nonstopmode --file-line-error '\documentclass{minimal}\begin{document}\errmessage{Foirage}Salut\end{document}'
@c      => le jobname est minimal, créer un nœud sur jobname
@c      => style de message d'erreur traditionnel, car on n'est pas dans un fichier
@c      => ajouter un nœud sur \errmessage
@c
@c    - définir « mode mzth rn lignr»
@c
@c xx mais LaTeX2e substance est manquant.
@c xx une liste aléatoire de quelques items manquant est à la fin de ce fichier
@c xx Lire le fichier NEWS pour les choses à mettre à jour.
@c
@c xx ending a run with errors
@c xx ctan, distributions, composant de TeX
@c xx mention \nocorr, \textit et ic
@c xx donner réelle smallskip / etc. par défaut
@c
@c xx fusionner http://ctan.org/pkg/latex-info (paquetage CTAN latex-info)
@c xx voir aussi http://ctan.org/tex-archive/info/latexcheat
@c xx fusionner permutée-index
@c xx fusionner latex manuel de la savane
@c xx fusionner style mathématique hors texte
@c xx mode veritical, mode horizontal
@c xx check recent ltnews for (lots of) changes
@c xx \write of non-ASCII chars (vincent mail of 14 Mar 2020 21:39:41)
@c xx \nonstopmode etc., if they are officially supported by LaTeX?
@c xx JH explain nfss somewhere
@c xx JH expand BiBTeX
@c xx JH expand theorem, AMS math
@c xx JH something on code listings
@c xx JH ligatures
@c xx JH \stretch
@c xx JH \mathstrut
@c xx JH \phantom https://tex.stackexchange.com/questions/4519/how-do-i-create-an-invisible-character
@c xx JH \baselineskip https://texfaq.org/FAQ-baselinepar
@c xx JH \contentsline, \@@dottedtocline?
@c xx JH \numexpr, \dimexpr, \glueexpr, \muexpr
@c
@c xx The typeset source2e has an index with all kernel
@c xx commands, though some are internal and shouldn't be included.
@c xx classes.dtx et al. define additional commands.
@c xx See also http://ctan.org/pkg/macros2e.
@c
@c xx All the special characters should be definitively described.
@c
@c xx Notes de P. Bideault
@c
@c xx Le sommaire précède immédiatement la table des matières. C'est curieux,
@c xx C'est curieux, et perturbant.
@c xx Cette table des matières ne serait-elle mieux située en fin de document ?
@c
@c
@c
@c xx Le source2e typographie a un index avec tous noyau
@c commandes xx, même si certains sont internes et ne devraient pas être inclus.
@c
@c xx much more from ltoutenc, depends on font?
@c xx packages -- required, additional, useful; oberdiek ...
@c xx fonts -- latexsys
@c
@c xx classes.dtx et al. définir des commandes supplémentaires.
@c xx Voir aussi http://ctan.org/pkg/macros2e.
@c xx Tous les caractères spéciaux devraient une fois pour toute être dérits
@c
@c xx packages & classes -- requis, plus, utiles; Oberdiek; polices
@c xx TODO: bogue texinfo, \AtBeginDocument ne va pas dans le .aux

@c ressources pour les termes typographiques en français:
@c    http://david.carella.free.fr/fr/typographie/glossaire-typographique.html
@c    http://tex.loria.fr/typographie/normes.pdf
@c    http://cahiers.gutenberg.eu.org/cg-bin/article/CG_2007___49_19_0.pdf
@c Ainsi que http://gdt.oqlf.gouv.qc.ca/
@c
@c Autres ressources:
@c http://mirror.ctan.org/info/lshort/french/lshort-fr.pdf
@c http://www.babafou.eu.org/Apprends_LaTeX/
@c http://lozzone.free.fr/latex/guide-local.pdf (Tout ce que vous avez toujours voulu savoir sur LaTeX)
@c http://mirror.ctan.org/info/impatient/fr/fbook.pdf (TeX pour l'impatient)
@c http://mirrors.ctan.org/info/bibtex/tamethebeast/ttb_en.pdf -Tame The Beast)
@c https://faq.gutenberg.eu.org

@set ITEM_BULLET1 --
@set ITEM_BULLET2 --
@copying
Ce document est un manuel de référence officieux pour @LaTeX{}, un
système de préparation de documents, version « @value{UPDATED} ».

Ce manuel a été traduit du fichier @file{LATEX.HLP} v1.0a de la
bibliothèque d'aide @identity{VMS}. La version prétraduction a été rédigée par
George D. @identity{Greenwade} de l'université d'état @identity{Sam Houston}, au Texas (USA). La version
@LaTeX{} 2.09 a été rédigée par @identity{Stephen Gilmore}. La version @LaTeX{}2e a
été adaptée à partir de celle-ci par @identity{Torsten Martinsen}. Karl Berry a
fait d'autres mises à jour et ajouts, et reconnaît avec gratitude avoir
utilisé comme matière de référence @cite{@identity{Hypertext Help with @LaTeX{}}},
de @identity{Sheldon Green}, et @cite{@identity{@LaTeX{} Command Summary}} (pour @LaTeX{}2.09)
de L. @identity{Botway} et C. @identity{Biemesderfer} (publié par le @TeX{}
@identity{Users Group} en
tant que @cite{@TeX{}niques} numéro 10). Nous savons également gré à
Martin Herbert Dietze d'avoir de plus utilisé de la matière apparaissant
dans son @identity{latex2e-reference}. (À partir de ces références aucun
texte n'a été copié directement).

Tous droits réservés @copyright{} 2015-2022 Vincent Belaïche --- traduction.@*
Tous droits réservés @copyright{} 2007-2022 Karl Berry. @*
Tous droits réservés @copyright{} 1988, 1994, 2007 @identity{Stephen Gilmore}. @*
Tous droits réservés @copyright{} 1994, 1995, 1996 @identity{Torsten Martinsen}.

Ci-après se trouve la licence sous laquelle est distribuée ce manuel ;
une traduction en est donnée en annexe, voir @ref{License translation}.

@comment start of License
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).
@end ignore

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@comment end of License
@end copying

@dircategory TeX
@direntry
* LaTeX2e-fr: (latex2e-fr). Manuel de référence officieux de LaTeX.
@end direntry

@tex
\global\hbadness = 4444% ne te plains pas trop
@end tex

@html
<div class="intro"> <p>Ceci est un manuel de référence
pour LaTeX.  Voir ci-dessous pour la <a href="#SEC_Overview">Table des
matières</a>.  Si vous désirer un didacticiel visitez
plutôt <a
href="https://www.learnlatex.org/fr/"><code>learnlatex.org</code></a> ou <a
href="https://ctan.org/topic/tut-latex">cette liste</a>.</p>
<p>Ce manuel a deux versions.  L'un a <a
href="https://latexref.xyz/fr/index.html">des pages web
séparées pour chaque rubrique</a>. Il est aussi disponible
comme <a href="https://latexref.xyz/dev/latex2e-fr.html">une seule page
web</a> et comme un <a
href="https://latexref.xyz/dev/latex2e-fr.pdf">pdf</a>. Notez qu'une <a
href="https://latexref.xyz/">version en anglais</a> maintenue séparément
existe.</p>

<p> Ce document est officieux.  Il n'a pas été revu par
les mainteneurs de LaTeX.  Notre but est de couvrir toutes les commandes
(non-privées) LaTeX.  Vos commentaires et contributions, y
compris rapports d'anomalie, sont les bien venues. Voir <a
href="https://latexref.xyz/dev/">la page du notre projet</a> pour plus
ample information, y compris <a
href="https://latexref.xyz/dev/#license">l'information licence</a> et
l'information comment <a
href="https://latexref.xyz/dev/mirroring.html">fournir un miroir
à ce manuel</a>, ainsi que comment <a
href="https://latexref.xyz/dev/writing.html">y contribuer</a>.</p>
<!-- Fin de l'en-tête d'accueil -->
@end html

@titlepage
@title @LaTeX{}2e: Un manuel de référence officieux
@subtitle @value{UPDATED}
@author @url{@value{LTXREFMAN_HOME_PAGE}/fr}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@shortcontents
@contents

@c Best Effort Symbol
@iftex
@macro visiblespace
@tex%
{@tt@char`@ }%
@end tex@c
@end macro
@macro BES {utf8,math}
@math{\math\}
@end macro
@macro BESU {utf8,math}
@math{@code{@backslashchar{}\math\}}
@end macro
@end iftex
@ifnottex
@macro visiblespace
␣
@end macro
@macro BES {utf8,math}
\utf8\
@end macro
@macro BESU {utf8,math}
\utf8\
@end macro
@end ifnottex
@macro EnvIndex {env}
@findex @r{environnement} @code{\env\}
@findex @code{\env\}, @r{environnement}

@end macro
@macro PkgIndex {pkg}
@findex @r{paquetage} @code{\pkg\}
@findex @code{\pkg\}, @r{paquetage}

@end macro
@iftex
@macro Num {x}
N@kern -.2em °\x\
@end macro
@end iftex
@ifnottex
@macro Num {x}
№ \x\
@end macro
@end ifnottex
@set PlainTeX @TeX{} de base
@set TeXLive  @TeX{} Live
@set MiKTeX MiK@TeX{}
@set MSWindows Windows
@set AppleMacintosh Macintosh
@set GNULinux  GNU/Linux
@set NotInPlainTeX Ceci n'est pas disponible en @value{PlainTeX}.
@set NeedsAMSSymb @value{NotInPlainTeX} En @LaTeX{} vous devez charger le paquetage @file{amssymb}.
@set NeedsSTIX @value{NotInPlainTeX} En @LaTeX{} vous devez charger le paquetage @file{stix}.

@node Top
@top @LaTeX{}2e : un manuel de référence officieux

Ce document est un manuel de référence officieux pour @LaTeX{}2e, un
système de préparation de document, dans sa version « @value{UPDATED} ».

@menu
* À propos de ce document: About this document. reporter les bogues, etc.
* Aperçu: Overview. Qu'est-ce que @LaTeX{}?.
* Classe de documents: Document classes. Certaines des différentes classes disponibles.
* Polices: Fonts. italique, gras, tapuscrit, etc
* Mise en page: Layout. Contrôle de la mise en page.
* Rubricage: Sectioning. Comment bien faire des rubriques.
* Les renvois: Cross references. Renvoi automatique.
* Environnements: Environments. tels que @code{enumerate} et @code{itemize}.
* Sauts de ligne: Line breaking. Influencer les sauts de ligne.
* Sauts de page: Page breaking. Influencer les sauts de page.
* Notes en bas de page: Footnotes. Comment produire des notes en bas de page.
* Définitions: Definitions. Définir vos propres commandes, etc
* Compteurs: Counters. Compteurs internes utilisés par @LaTeX{}.
* Longueurs: Lengths. Les commandes pour manipuler des longueurs.
* Faire des paragraphes: Making paragraphs. Commandes pour contrôler les paragraphes.
* Formules de maths: Math formulas. Comment créer des formules mathématiques.
* Modes: Modes. Modes paragraphe, mathématiques ou LR.
* Les styles de page: Page styles. Différents styles de mise en page.
* Les espaces: Spaces. Espace horizontal et vertical.
* Boîtes: Boxes. Faire des boîtes.
* Couleur: Color. Définir et utiliser des couleurs.
* Graphiques: Graphics. Importer des graphiques de l'extérieur de @LaTeX{}.
* Insertions spéciales: Special insertions. Insertion de caractères réservés et spéciaux.
* Diviser l'entrée: Splitting the input. Traiter de gros fichiers en les partitionnant.
* Parties pré/postliminaires: Front/back matter. Table des matières, glossaires, index.
* Lettres: Letters. La classe @code{letter}.
* Entrée / sortie du terminal: Terminal input/output. Interaction avec l'utilisateur.
* La ligne de commande: Command line interface. Comportement indépendant du système de la ligne de commande.
* Patrons de document: Document templates. Patron pour commencer diverses classes de documents.
* Traduction de la licence: License translation. Une traduction à titre informatif de la licence.
* Index des Concepts: Concept Index. Index général.
* Index des commandes: Command Index. Liste alphabétique des  commandes @LaTeX{}.
@end menu


@node About this document
@chapter À propos de ce document

@findex @url{@value{LTXREFMAN_HOME_PAGE}} @r{page d'accueil}
Ceci est un manuel de référence officieux pour le système @LaTeX{}2e de
préparation de document. Ce système est mis en œuvre sous forme d'un
paquet de macros pour le programme de composition @TeX{}
(@pxref{Overview}). La page d'accueil de ce document est
@url{@value{LTXREFMAN_HOME_PAGE}}. Cette page contient des liens vers
différentes versions de ce document, dans différents
formats et langues, mais aussi vers ses sources, vers les archives des listes de diffusion qui lui sont consacrées ainsi que vers d'autres
infrastructures.

@cindex @LaTeX{} ou @LaTeX{}2e, que choisir ?
Dans ce document, on utilise principalement juste le terme « @LaTeX{} »
plutôt que « @LaTeX{}2e », étant donné que la version précédente de
@LaTeX{} (2.09) est gelée depuis des dizaines d'années.

@cindex officieuse, nature de ce document
@cindex L'équipe de projet @LaTeX{}
@findex @email{@value{LTXREFMAN_BUGS}} @r{adresse mél.}
@LaTeX{} est désormais maintenu par un groupe de bénévoles
(@url{http://latex-project.org}).  La documentation officielle écrite
par le projet @LaTeX{} est disponible à partir de leur site web.
Le présent document est complètement officieux et n'a pas été examiné
par les mainteneurs de @LaTeX{}.
@cindex rapports d'anomalies
@cindex rapports de bogues
@cindex bogues, rapports
@cindex anomalies, rapports
Ne leur envoyez donc pas de rapports d'anomalie ou quoi que ce soit
d'autre.

En revanche, n'hésitez pas à adresser vos commentaires à
@email{@value{LTXREFMAN_BUGS}}.

Ce document est un manuel de référence. Il y a d'autres sources d'information sur
@LaTeX{} : elles sont très nombreuses, et s'adressent à des utilisateurs de tous niveaux.
Voici quelques introductions :

@c voir http://mirror.ctan.org/help/ctan/CTAN-upload-addendum.html#urls
@table @url
@item http://ctan.org/pkg/latex-doc-ptr
@findex latex-doc-ptr @r{document}
Deux pages de références recommandées à @LaTeX{} documentation.

@item http://ctan.org/pkg/first-latex-doc
@findex first-latex-doc @r{document}
Rédaction de votre premier document, avec un peu de texte et de mathématiques.

@item http://ctan.org/pkg/usrguide
@findex usrguide @r{documentation officielle}
Le guide pour les auteurs de documents maintenu par le projet
@LaTeX{}. Bien d'autres guides écrits par bien d'autres gens sont aussi
disponibles, indépendamment du projet @LaTeX{} ; l'article suivant en
est un.

@item http://ctan.org/pkg/lshort
@findex lshort @r{document}
Une courte (?) introduction à @LaTeX{}, traduite en de nombreuses langues
(traduction française : @url{http://ctan.org/pkg/lshort-french}).


@item http://tug.org/begin.html
Introduction au  système @TeX{}, y compris @LaTeX{}, et plus amples références.
@end table


@node Overview
@chapter Vue d'ensemble de @LaTeX{}

Qu'est-ce que @LaTeX{}?

@cindex aperçu de @LaTeX{}
@cindex bases de @LaTeX{}
@cindex Knuth, Donald E.
@cindex Lamport, Leslie
@cindex @LaTeX{} aperçu
@LaTeX{} est un système de composition de documents. Il fut à l'origine
créé par Leslie Lamport ; il est désormais maintenu par un groupe de
volontaires (@url{http://latex-project.org}).  Il est largement utilisé,
en particulier pour les documents complexes et techniques, tels que ceux
impliquant des mathématiques.

@c - Au début, ajout de « à l'aide d'un simple éditeur de texte ».
@c - Emploi d'italiques pour les notions principales.
@c - À la fin, ajout de « qui contient son texte mis en page ».
@cindex paquet de macro, @LaTeX{} en tant que
À l'aide d'un simple éditeur de texte,
un utilisateur @LaTeX{} écrit un fichier, dit @emph{fichier d'entrée},
qui contient son texte ; des @emph{commandes} y sont intercalées :
ce sont des instructions servant à décrire la manière dont le texte
doit être formaté.  En effet, @LaTeX{} est mis en œuvre comme un
ensemble de commandes liées s'interfaçant avec le programme de
composition @TeX{} de Donald E. Knuth (le terme technique est que
@LaTeX{} est un @dfn{paquet de macros} pour le moteur @TeX{}).
En donnant le fichier d'entrée au moteur @TeX{},
l'utilisateur produit le @emph{document de sortie}
qui contient son texte mis en page.

@c - Les fichiers @LaTeX{} sont des fichiers texte ordinaires qui
@c - peuvent être écrits avec n'importe quel éditeur de texte aux
@c - performances raisonnables.

Le terme @LaTeX{} est aussi parfois utilisé pour signifier le langage à
balises dans lequel le code source du document est écrit, c'est-à-dire  pour
signifier l'ensemble des commandes à la disposition d'un utilisateur de
@LaTeX{}.

@cindex Lamport @TeX{}
@cindex prononciation
Le nom @LaTeX{} est l'abréviation de ``Lamport @TeX{}''.  On le prononce
@identity{LA-TÈQUE}.  Au sein du document, on produit le logo avec
@code{\LaTeX}.  Là où l'utilisation du logo n'est pas raisonnable, comme
dans du texte brut, écrivez le @samp{LaTeX}.


@menu
* Début et fin: Starting and ending. Le début et la fin standards d'un document.
* Fichiers de sortie: Output files.         Fichiers produits.
* Moteurs @TeX{}: @TeX{} engines.          Programmes qui peuvent compiler du code source @TeX{} et @LaTeX{}.
* Syntaxe des commandes @LaTeX{}: @LaTeX{} command syntax. Syntaxe générale des commandes @LaTeX{}.
* Environnement: Environment.        Zone du code source avec un comportement distinct.
* CTAN::                             Notre dépôt.
@end menu

@node Starting and ending
@section Début et fin

@anchor{Starting & ending}@c ancien nom du noeud
@cindex début et fin
@cindex fin et début
@cindex Bonjour le monde

Les fichiers @LaTeX{} ont une structure globale simple, avec un début et
une fin standards. Voici un petit exemple :

@example
\documentclass@{article@}
\begin@{document@}
Bonjour le monde \LaTeX.
\end@{document@}
@end example

@noindent
Tout document @LaTeX{} a une ligne @code{\begin@{document@}} et une
ligne @code{\end@{document@}}.

@cindex classe de document, définition
@noindent
Ici @samp{article} est ce que l'on appelle la @dfn{classe de document}.
Elle est implémentée dans un fichier @file{article.cls}. N'importe
quelle classe de document de votre système peut être utilisée. Quelques
classes de document sont définies par @LaTeX{} lui-même, et un grand
nombre d'autres sont largement disponibles. @xref{Document classes}.

@cindex préambule, définition
Vous pouvez inclure d'autres commandes @LaTeX{} entre les commandes
@code{\documentclass} et @code{\begin@{document@}}. Cette zone est
appelée le @dfn{préambule}.

La paire @code{\begin@{document@}}, @code{\end@{document@}} définit un
@cindex environnement
@dfn{environnement} ; l'environnement @samp{document} (et aucun autre)
est obligatoire dans tous les documents @LaTeX{} (@pxref{document}).
@LaTeX{} vous fournit beaucoup d'environnements documenté ici
(@pxref{Environments}). Vous pouvez en trouver bien plus encore à partir
de paquetages externes, notamment ceux disponibles sur le CTAN
(@pxref{CTAN}).

Les rubriques suivantes sont consacrées aux façons de produire,
à partir d'un fichier d'entrée @LaTeX{}, des documents PDF ou
d'autres formats de sortie.


@node Output files
@section Fichiers de sortie

@LaTeX{} produit un fichier de sortie principal et au moins deux
fichiers auxiliaires.  Le nom du fichier de sortie principal se termine
soit en @file{.dvi} soit en @file{.pdf}.

@table @code
@item .dvi
@findex @r{fichier} .dvi
@findex @r{commande} latex
@findex @r{commande} xdvi
@findex @r{commande} dvips
@findex @r{commande} dvipdfmx
@findex @r{commande} dvitype
@anchor{output files dvi}
S'il est invoqué avec la commande système @command{latex}, alors il
produit un fichier « @identity{DeVice Independent}@footnote{Indépendant du
périphérique de sortie, ce n'est toutefois pas un format portable de
document} » (@file{.dvi}). Vous pouvez visualiser ce fichier avec une
commande comme @command{xdvi}, ou le convertir en fichier PostScript
@code{.ps} avec @command{dvips} ou en fichier « Portable Document
Format@footnote{Format portable de document} » @code{.pdf} avec
@command{dvipdfmx}. Un grand nombre d'autres programmes utilitaires
pour fichiers DVI sont disponibles (@url{http://mirror.ctan.org/dviware}).

@item .pdf
@findex .pdf @r{fichier}
@cindex pdf@TeX{}
@findex @r{commande} pdflatex
@anchor{output files pdf}
Si @LaTeX{} est invoqué avec la commande système @command{pdflatex},
alors la sortie principale est un fichier ``Portable Document Format''
(@file{.pdf}). Typiquement, il s'agit d'un fichier autonome, avec toutes
les polices et images incorporées.
D'autres commandes (@pxref{@TeX{} engines}) produisent des fichiers PDF.

@c - Cela peut être très utile, mais cela rend le fichier de sortie beaucoup
@c - plus grand que le fichier @file{.dvi} produit à partir du même document.

@c - @findex @r{commande} lualatex
@c - @cindex Lua@TeX{}
@c - Si il est invoqué comme @command{lualatex}, un fichier @file{.pdf} est
@c - créé à l'aide du moteur Lua@TeX{} (@url{http://luatex.org}).
@c -
@c - @findex @r{commande} xelatex
@c - @cindex Xe@TeX{}
@c - Si elle est invoquée comme @command{xelatex}, un fichier @file{.pdf} est
@c - créé à l'aide du moteur Xe@TeX{} (@url{http://tug.org/xetex}).
@c -
@end table

@c - Beaucoup d'autres variantes moins courantes de @LaTeX{} (et @TeX{}) existent, qui
@c - peuvent produire du HTML, XML, et d'autres choses.

@LaTeX{} produit toujours au moins deux fichier supplémentaires.

@table @code
@item .log
@cindex fichier de transcription
@cindex fichier journal
@findex @r{fichier} .log
@anchor{output files log}
Ce fichier de transcription, ou @dfn{fichier journal}, contient des
informations sommaires telles que la liste des paquetages chargés. Il
contient aussi des messages de diagnostic
@c - pour toutes les erreurs découvertes dans le fichier d'entrée.
et, possiblement, des informations supplémentaires concernant toutes
erreurs.

@item .aux
@cindex fichier auxiliaire
@findex .aux @r{fichier}
@cindex double renvoi, résolution
@cindex renvoi en aval, résolution
@cindex renvoi, résolution
@anchor{output files aux}
De l'information auxiliaire est utilisée par @LaTeX{} pour des choses
telles que les doubles renvois.  Par exemple, la première fois que
@LaTeX{} trouve un renvoi en aval --- une double référence à
quelque chose qui n'est pas encore apparu dans le code source --- il
apparaîtra dans la sortie comme un double point d'interrogation
@code{??}.  Quand l'endroit auquel le renvoi fait référence finit par
apparaître dans le code source, alors @LaTeX{} écrit son information de
localisation dans ce fichier @code{.aux}.  À l'invocation suivante,
@LaTeX{} lit l'information de localisation à partir de ce fichier et
l'utilise pour résoudre le renvoi, en remplaçant le double point
d'interrogation avec la localisation mémorisée.

@end table

@c - Une liste ouverte d'autres fichiers peut être créé. Nous n'allons pas essayer de
@c - les énumérer tous. Composants Xxx?

@findex .lof @r{fichier}
@cindex liste des figures, fichier
@findex .lot @r{fichier}
@cindex liste des tableaux, fichier
@findex .toc @r{fichier}
@cindex table des matières, fichier
@cindex matières, fichier
@LaTeX{} peut produire encore d'autres fichiers, caractérisés par la
terminaison du nom de fichier. Ceux-ci incluent un fichier @code{.lof}
qui est utilisé pour fabriquer la liste des figures, un fichier
@code{.lot} utilisé pour fabriquer une liste des tableaux, et un fichier
@code{.toc} utilisé pour fabriquer une table des matières (@pxref{Table
of contents etc.}).  Une classe de document particulière peut en créer
d'autres ; cette liste n'a pas de fin définie.


@node @TeX{} engines
@section Les moteurs @TeX{}

@cindex moteurs, @TeX{}
@cindex implémentations de @TeX{}
@cindex UTF-8
@cindex entrée Unicode, native
@cindex polices TrueType
@cindex polices OpenType
@cindex @TeX{}, format
@cindex format @TeX{}, fichier (@code{.fmt})
@cindex format @LaTeX{}, fichier (@code{.fmt})
@cindex @LaTeX{}, format, fichier (@code{.fmt})
@cindex fichier format @TeX{}
@findex .fmt, @r{fichier}
@LaTeX{} est un vaste ensemble de commandes qui sont exécuté par un
programme @TeX{} (@pxref{Overview}). Un tel ensemble de commande est
appelé un @dfn{format}, et peut être matérialisé dans un fichier binaire
@code{.fmt}, ce qui permet qu'il soit lu bien plus rapidement que le
source @TeX{} correspondant.

Cette rubrique donne une brève vue d'ensemble des programmes @TeX{}
les plus répandus (voir aussi @ref{Command line interface}).

@ftable @code
@item latex
@itemx pdflatex
@findex etex, @r{commande}
@cindex pdf@TeX{}, moteur
@cindex moteur pdf@TeX{}
@cindex e-@TeX{}
@anchor{tex engines latex}
Dans @value{TeXLive} (@url{http://tug.org/texlive}, si @LaTeX{} est invoqué
avec les commandes système @command{latex} ou @command{pdflatex}, alors
le moteur pdf@TeX{} est exécuté (@url{http://ctan.org/pkg/pdftex}).
Selon qu'on invoque @command{latex} ou @command{pdflatex}, la sortie
principale est respectivement un fichier @file{.dvi} ou un fichier
@file{.pdf}.

pdf@TeX{} incorpore les extensions qu'e-@TeX{} apporte au programme
original de Knuth (@url{http://ctan.org/pkg/etex}), ce qui inclut des
caractéristiques supplémentaires de programmation et la composition
bidirectionnelle, et a lui-même de nombreuses extensions.  e-@TeX{} est
lui-même disponible par la commande système @command{etex}, mais le
langage du fichier d'entrée est du @value{PlainTeX} (et le fichier produit
est un @file{.dvi}).

Dans d'autres distributions @TeX{}, @command{latex} peut invoquer
e-@TeX{} plutôt que pdf@TeX{}.  Dans tous les cas, on peut faire
l'hypothèse que les extensions e-@TeX{} sont disponibles en @LaTeX{}.

@item lualatex
@findex lualatex @r{commande}
@cindex Lua@TeX{}
@anchor{tex engines lualatex}
Si @LaTeX{} est invoqué avec la commandes systèmes @command{lualatex},
alors le moteur Lua@TeX{} est exécuté
(@url{http://ctan.org/pkg/luatex}).  Ce programme permet que du code
écrit dans le langage script Lua (@url{http://luatex.org}) interagisse
avec la composition faite par @TeX{}.  Lua@TeX{} traite nativement
l'entrée en codage Unicode UTF-8, peut traiter les polices OpenType et
TrueType, et produit un fichier @file{.pdf} par défaut.  Il y a aussi
@command{dvilualatex} pour produire un fichier @file{.dvi}.

@item xelatex
@findex xelatex @r{commande}
@cindex Xe@TeX{}
@findex .xdv @r{fichier}
@findex xdvipdfmx
@anchor{tex engines xelatex}
Si @LaTeX{} est invoqué avec la commandes système @command{xelatex}, le
moteur Xe@TeX{} est exécuté (@url{http://tug.org/xetex}).  Comme
Lua@TeX{}, Xe@TeX{} prend en charge nativement le codage Unicode UTF-8 et les
polices TrueType et OpenType, bien que leur implémentation soit
complètement différente, en utilisant principalement des bibliothèques
externes plutôt que du code interne.  Xe@TeX{} produit un fichier @file{.pdf}
en sortie ; il ne prend pas en charge la sortie DVI.

En interne, Xe@TeX{} crée un fichier @code{.xdv} file, une variante de
DVI, et traduit cela en PDF en utilisant le
programme (@code{x})@code{dvipdfmx}, mais ce processus est automatique.
Le fichier @code{.xdv} n'est utile que pour le débogage.

@item platex
@itemx uplatex
Ces commandes fournissent une prise en charge significativement plus
riche du japonais et d'autres langues ; la variante en @file{u} prend en
charge l'Unicode.  Voir @url{https://ctan.org/pkg/ptex} et
@url{https://ctan.org/pkg/uptex}.
@end ftable

Depuis 2019, il y a une commande compagne en @code{-dev} et un format
pour tous les moteurs cités plus hauts :

@ftable @code
@item dvilualatex-dev
@itemx latex-dev
@itemx lualatex-dev
@itemx pdflatex-dev
@itemx platex-dev
@itemx uplatex-dev
@itemx xelatex-dev
@cindex parution, candidats
@cindex avant parution, essais
Ce sont les candidats pour une parution de @LaTeX{} à venir. L'usage
principal est de découvrir et traiter les problèmes de compatibilité
avant la parution officielle.

Ces formats en @code{-dev} rendent facile pour quiconque d'aider à
l'essai des documents et du code : vous pouvez exécuter, disons,
@code{pdflatex-dev} au lieu de @code{pdflatex}, sans changer quoi que ce
soit d'autre dans votre environnement.  En réalité, le plus facile et
utile est de toujours d'exécuter les versions en @code{-dev} au lieu de
s'embêter à basculer entre les deux. Pendant les périodes calmes après une
parution, ces commandes seront équivalentes.

Ce ne sont pas des échantillons quotidiens de code de développement non
testé. L'équipe @LaTeX{} fait subir à ces commandes les mêmes essais
étendus de non régression avant leur parution.

Pour plus ample  information, voir @i{@identity{The @LaTeX{} release workflow and the
@LaTeX{} @code{dev} formats}} par Frank Mittelbach, @cite{TUGboat} 40:2,
@url{https://tug.org/TUGboat/tb40-2/tb125mitt-dev.pdf}.

@end ftable

@node @LaTeX{} command syntax
@section Syntaxe des commandes @LaTeX{}

@cindex commandes, syntaxe des
@findex \ @r{caractère de début des commandes}
@findex [...] @r{(pour les arguments optionnels)}
@findex @{...@} @r{(pour les arguments obligatoires)}
Dans le fichier d'entrée @LaTeX{}, un nom de commande commence avec une
controblique, @code{\}.  Le nom lui-même consiste soit en (a) une
chaîne de lettres ou (b) un unique caractère, qui dans ce cas n'est pas une lettre.

Les noms de commandes @LaTeX{} sont sensibles à la casse de sorte que
@code{\pagebreak} diffère de @code{\Pagebreak} (ce dernier n'est pas une
commande standarde). La plupart des noms de commandes sont en bas de
casse, mais quoi qu'il en soit vous devez saisir toute commande en
respectant la casse dans laquelle elle est définie.

Une commande peut être suivie de zéro, un ou plus d'arguments. Ces
arguments peuvent être soit obligatoires, soit optionnels.  Les
arguments obligatoires sont entre accolades, @code{@{...@}}.  Les
arguments optionnels sont entre crochets, @code{[...]}.  En général,
mais ce n'est pas universel, si la commande prend un argument optionnel,
il vient en premier, avant tout argument obligatoire.

Au sein d'un argument optionnel, pour utiliser le crochet
fermant (@code{]}) cachez le au sein d'accolades, comme
dans @code{\item[crochet fermant @{]@}]}.  De même, si un argument
optionnel vient en dernier, sans argument obligatoire à sa suite, alors
pour que le premier caractère dans le texte suivant soit un crochet
ouvrant, cachez le entre accolades.

@LaTeX{} obéit à la convention selon laquelle certaines commandes ont une forme étoilée
(@code{*}) qui est en relation avec la forme sans le @code{*}, telles que
@code{\chapter} et @code{\chapter*}.  La différence exacte de
comportement dépend de la commande.

Ce manuel décrit toutes les options acceptées et les formes en @code{*}
pour les commandes dont il traite (à l'exception des omissions
involontaires ou bogues de ce manuel).

@node Environment
@section Les environnements

Synopsis :

@example
\begin@{@var{nom-environnement}@}
  ...
\end@{@var{nom-environnement}@}
@end example

Un @dfn{environnement} est une zone du code source @LaTeX{}, au sein de
laquelle il y a un comportement différent.  Par exemple, pour la poésie
en @LaTeX{} mettez les lignes entre @code{\begin@{verse@}} et
@code{\end@{verse@}}.

@example
\begin@{verse@}
    Plus ne suis ce que j'ai été \\
     ...
\end@{verse@}
@end example

@xref{Environments}, pour une liste d'environnements.  En
particulier, il est à noter que tout document @LaTeX{} doit avoir un
environnement @code{document} : une paire @code{\begin@{document@}
... \end@{document@}}.

Le @var{nom-environnement} du début doit s'accorder exactement avec
celui de la fin. Cela vaut aussi dans le cas où @var{nom-environnement} se
termine par une étoile (@code{*}) ; l'argument à la fois de
@code{\begin} et @code{\end} doit comprendre l'étoile.

Les environnements peuvent avoir des arguments, y compris des arguments
optionnels.  L'exemple ci-dessous produit un tableau. Le premier
argument est optionnel (il aligne verticalement le tableau
sur sa première ligne) alors que le second argument est
obligatoire (il spécifie le format des colonnes du tableau).

@example
\begin@{tabular@}[t]@{r|l@}
  ... lignes du tableau ...
\end@{tabular@}
@end example

@node CTAN
@section CTAN : @identity{The Comprehensive @TeX{} Archive Network}

@cindex CTAN

Le @guillemetleft{}@identity{Comprehensive @TeX{} Archive
Network}@guillemetright{}, ou CTAN, est le dépôt de matière libre de la
communauté @TeX{} et @LaTeX{}.  C'est un ensemble de sites Internet
répartis dans le monde qui offre de télécharger de la matière en relation
avec @LaTeX{}.  Visitez le CTAN sur la Toile à l'adresse
@url{https://ctan.org}.

Cette matière est organisée en paquetages, des paquets discrets qui offrent
typiquement une fonctionnalité cohérente et sont maintenus par une
personne ou un petit nombre de personnes.  Par exemple, beaucoup
d'organismes d'édition on un paquetage qui permet aux auteurs de
formater leurs articles conformément aux spécification de cet organisme.

En plus des ressources massives, le site @code{ctan.org} offre des fonctions telles que
la recherche par nom ou par fonctionnalité.

@cindex @identity{DANTE e.V.}
CTAN n'est pas un site unique, mais au lieu de cela un ensemble de
sites. L'un des ces sites est le cœur. Ce site gère activement la
matière, par exemple en acceptant les téléversements de matière
nouvelle ou mise à jour. Il est hébergé par le groupe @TeX{} allemand
@identity{DANTE e.V.}

@cindex miroirs du CTAN
D'autres sites autour du monde apportent leur aide en miroitant, c'est à
dire en synchronisant automatiquement leurs collections sur le site
maître et en rendant à leur tour leurs copies publiquement
disponibles. Ceci donne aux utilisateurs géographiquement proches un
meilleur accès et allège la charge sur le site maître. La liste des
miroirs se trouve à @url{https://ctan.org/mirrors}.

@node Document classes
@chapter Classes de documents

@cindex classes de documents
@findex \documentclass

La classe globale d'un document est définie avec cette commande, c'est
normalement la première commande dans une fichier source @LaTeX{}.

@example
\documentclass[@var{options}]@{@var{classe}@}
@end example

@noindent
La commande @code{\documentclass} doit être la première commande dans un
fichier source @LaTeX{}.

@findex @r{classe} article
@findex @r{classe} report
@findex @r{classe} book
@findex @r{classe} letter
@findex @r{classe} slides
Les noms de @var{classe} de document incorporés à @LaTeX{}.  (Beaucoup
de classes de document sont disponibles dans des paquetages séparés ;
@pxref{Overview}.)

@table @code
@item article
@anchor{document classes article}
Pour un article de journal, une présentation, et diverses utilisations
générales.

@item @identity{book}
@anchor{document classes book}

Des livres complets, y compris des chapitres et possiblement incluant
des pièces préliminaires telles qu'une préface, et postliminaires telles
qu'un appendice (@pxref{Front/back matter}).

@item @identity{letter}
@anchor{document classes letter}
Courrier, incluant optionnellement des étiquettes pour enveloppes
(@pxref{Letters}).

@item report
@anchor{document classes report}
Pour des documents de longueur entre celle d'un @code{article} et celle
d'un @code{book}, tels que des rapports techniques ou des thèses, et qui
peuvent contenir plusieurs chapitres.

@item slides
@anchor{document classes slides}
Pour des présentations de diapositive --- rarement utilisé de nos jours.
À sa place la classe @package{beamer} est sans doute celle dont l'usage est
le plus répandu (@url{https://ctan.org/pkg/beamer}). @xref{beamer
template}, pour un petit patron de document @code{beamer}.

@end table

Les @var{options} standardes sont décrites dans les rubriques suivantes.

@menu
* Options de classe de document: Document class options. Options globales
* Ajout de paquetage: Additional packages. Ajouter des paquetages.
* Construction d'extension (classe ou paquetage): Class and package construction.   Créer des
 nouvelles extensions (classe ou paquetage).
@end menu

@node Document class options
@section Options de classe de document

@cindex options de classe de document
@cindex options, classe de document
@cindex options de classe
@cindex options globales

Vous pouvez spécifier ce qu'on appelle des @dfn{options globales} ou des
@dfn{options de classe} en les passant entre crochet à la commande
@code{\documentclass}, comme d'habitude. Pour spécifier plus d'une
@var{option}, séparez les par une virgule :

@example
\documentclass [@var{option1}, @var{option2}, ...]@{@var{classe}@}
@end example

Voici la liste des options standardes de classe.

@findex @r{option} 10pt
@findex @r{option} 11pt
@findex @r{option} 12pt
Toutes les classes standardes, sauf @code{slides} acceptent les options
suivantes pour sélectionner la taille de police de caractères (l'option
par défaut est @code{10pt}):

@example
12pt 11pt 10pt
@end example

@findex @r{option} a4paper
@findex @r{option} a5paper
@findex @r{option} b5paper
@findex @r{option} executivepaper
@findex @r{option} legalpaper
@findex @r{option} letterpaper
Toutes les classes standardes acceptent ces options de sélection de la
taille du papier (ci-après hauteur sur largeur) :

@table @code
@item a4paper
210 sur 297@dmn{mm} (environ 8,25 sur 11,75 pouces)

@item a5paper
148 sur 210@dmn{mm} (environ 5,8 sur 8,3 pouces)

@item b5paper
176 sur 250@dmn{mm} (environ 6,9 sur 9,8 pouces)

@item executivepaper
7,25 sur 10,5 pouces

@item legalpaper
8,5 sur 14 pouces

@item letterpaper
8,5 sur 11 pouces (l'option par défaut)
@end table

@findex \pdfpagewidth
@findex \pdfpageheight
@PkgIndex{geometry} Lorsque on utilise l'un des moteurs pdf@LaTeX{},
Lua@LaTeX{}, ou Xe@LaTeX{} (@pxref{@TeX{} engines}), les options autres
que @code{letterpaper} règlent la zone d'impression mais vous devez
également régler la taille du papier physique. Un méthode pour faire
cela est de placer @code{\pdfpagewidth=\paperwidth} et
@code{\pdfpageheight=\paperheight} dans le préambule de votre document.
@PkgIndex{geometry}
Le paquetage @package{geometry} fournit des méthodes flexibles pour régler
la zone d'impression et la taille du papier physique.

@findex @r{option} draft
@findex @r{option} final
@findex @r{option} fleqn
@findex @r{option} landscape
@findex @r{option} leqno
@findex @r{option} openbib
@findex @r{option} titlepage
@findex @r{option} notitlepage
Diverses autres options:

@table @code
@item @identity{draft, final}
@cindex boîtes noires, en omettant
Pour marquer/ne marquer pas les boîtes trop pleines avec une grande
boîte noire ; l'option par défaut est @code{final}.
@item @identity{fleqn}
Pour aligner à gauches les formules hors texte ; par défaut elles sont centrées.
@item @identity{landscape}
Pour sélectionner le format de page à l'italienne ; l'option par défaut
est à la française.
@item @identity{leqno}
Pour Mettre les numéros d'équation sur le côté gauche des
équations ; par défaut ils sont sur le côté droit.
@item @identity{openbib}
Pour utiliser le  format bibliographie @code{openbib}.
@item @identity{titlepage, notitlepage}
Indique si la page de titre est séparée ; l'option par défaut
dépend de la classe.
@end table

Ces options ne sont pas disponibles avec la classe @code{slides} :

@findex @r{option} onecolumn
@findex @r{option} twocolumn
@findex @r{option} oneside
@findex @r{option} twoside
@findex @r{option} openright
@findex @r{option} openany
@table @code
@item onecolumn
@itemx twocolumn
Composer en une ou deux colonnes ; le défaut est @code{onecolumn}.

@item oneside
@itemx twoside
@findex \evensidemargin
@findex \oddsidemargin
Sélectionne la disposition en recto simple ou recto-verso ; le défaut
est @code{oneside} pour recto simple, sauf pour la classe @code{book}.

Le paramètre @code{\evensidemargin} (@code{\oddsidemargin}) détermine la
distance sur les pages de numéro pair (impair) entre le côté gauche
de la page et la marge gauche du texte.  Voir @ref{page layout
parameters oddsidemargin}.

@item openright
@itemx openany
Détermine si un chapitre doit commencer sur une page de droite ; défaut
est @code{openright} pour la classe @code{book}.
@end table

La classe @code{slide} offre l'option @code{clock} pour l'impression du
temps au bas de chaque note.


@node Additional packages
@section Ajout de paquetages

@cindex paquetages, le chargement
@cindex chargement des paquetages supplémentaires
@findex \usepackage
Les paquetages ajoutés @var{paquo} sont chargés comme ceci :

@example
\usepackage[@var{options}]@{@var{paquo}@}
@end example

Pour spécifier plus d'un paquetage, vous pouvez les séparer par une
virgule comme dans @code{\usepackage@{@var{paquo1},@var{paquo2},...@}},
ou utiliser plusieurs commandes @code{\usepackage}.

@cindex options globales
@cindex globales, options
Toutes les options indiquées dans la commande @code{\documentclass} qui
sont inconnues de la classe de document sélectionnée sont transmises aux
paquetages chargés par @code{\usepackage}.


@node Class and package construction
@section Construction des extensions (classes et paquetages)

@cindex commandes des classes de document
@cindex classe de document, commandes
@cindex nouvelles classes, commandes

Vous pouvez créer de nouvelles classes de document, et de nouveaux
paquetages. Par exemple, si vos notes doivent répondre à des exigences
locales, telles qu'un en-tête standard pour chaque page, alors vous
pourriez créer une nouvelle classe @code{cmsnote.cls} et commencer vos
documents par @code{\documentclass@{cmsnote@}}.

Ce qui distingue un paquetage d'une classe de document c'est que les
commandes d'une paquetage sont utilisables pour différentes classes
alors que celles dans une classes de document sont spécifiques à cette
classes. Ainsi, une commande qui permet de régler les en-têtes de pages
irait dans un paquetage alors qu'une commande intitulant en-têtes de
pages par @code{Note du service de mathématique de la CMS} irait dans
une classe.
@cindex classe et paquetage, différence
@cindex différence entre classe et paquetage

Au sein d'un fichier classe ou paquetage on peut utiliser l'arobe
@code{@@} comme un caractère dans les noms de commande sans avoir à
entourer le code contenant la commande en question par
@code{\makeatletter} et @code{\makeatother}.  @xref{\makeatletter &
\makeatother}. Ceci permet de créer des commandes que les utilisateurs
ne risquent pas de redéfinir accidentellement. Une autre technique est
de préfixer les commandes spécifiques à une classe ou paquetage avec une
chaîne particulière, de sorte à empêcher votre classe ou paquetage
d'interférer avec d'autres. Par exemple, la classe @code{notecms}
pourrait avoir des commandes @code{\cms@@tolist}, @code{\cms@@fromlist},
etc.


@menu
* Structure d'une extension: Class and package structure. Disposition du fichier.
* Commande pour extensions: Class and package commands. Liste des commandes.
@end menu


@node Class and package structure
@subsection  Structure d'une extension (classe ou paquetage)

@cindex classe et paquetage, structure
@cindex extension, structure
@cindex classe, disposition du fichier
@cindex paquetage, disposition du fichier
@cindex options pour classe de document
@cindex options pour paquetage
@cindex classe, options
@cindex paquetage, options

Un fichier de classe pour paquetage comprend typiquement quatre parties.
@enumerate
@item
Dans la @dfn{partie d'identification} le fichier dit s'il s'agit d'un
paquetage ou d'une classe @LaTeX{} et s'auto-décrit, en utilisant les
commandes @code{\NeedsTeXFormat} et @code{\ProvidesClass} ou
@code{\ProvidesPackage}.
@item
La partie des @dfn{déclarations préliminaires} déclare des commandes et
peut aussi charger d'autres fichiers. D'ordinaire ces commandes sont
celles nécessaires au code utilisé dans la partie suivante. Par exemple,
une classe @code{notecms} pourrait être appelée avec une option pour lire
un fichier où est défini une liste de personnes désignées comme
destinataires de la note, comme
@code{\documentclass[destinataires-math]@{notecms@}}, et donc on a
besoin de définir une commande
@code{\newcommand@{\defdestinataires@}[1]@{\def\@@liste@@destinataires@{#1@}@}}
à utiliser dans ce fichier.
@item
Dans la partie de @dfn{gestion des options} la classes ou le
paquetage déclare et traite ses options.  Les options de classes
permette à l'utilisateur de commencer leur document comme dans
@code{\documentclass[@var{liste d'options}]@{@var{nom de la classe}@}},
pour modifier le comportement de la classe. Un exemple est lorsque on
déclare @code{\documentclass[11pt]@{article@}} pour régler la taille par
défaut de la police du document.
@item
Finalement, dans la partie des @dfn{déclarations supplémentaires} la
classe ou le paquetage effectue la plus grosse partie de son travail :
déclarant de nouvelles variables, commandes ou polices, et chargeant
d'autres fichiers.
@end enumerate

Voici le commencement d'un fichier de classe, ce qui doit être
sauvegardé comme @file{souche.cls} à un emplacement où @LaTeX{} peut le
trouver, par exemple dans le même répertoire que le fichier @file{.tex}.

@example
\NeedsTeXFormat@{LaTeX2e@}
\ProvidesClass@{souche@}[2017/07/06 souche à partir de laquelle contruire des classes]
\DeclareOption*@{\PassOptionsToClass@{\CurrentOption@}@{article@}@}
\ProcessOptions\relax
\LoadClass@{article@}
@end example
@cindex classe, fichier d'exemple

Elle s'auto-identifie, traite les options de classe par défaut en les
passant toutes à la classe @code{article}, et puis charge la classe
@code{article} de sorte à fournir la base du code de cette classe.

Pour plus d'information, voir le guide officiel pour les auteurs de
classes et de paquetage, le « Class Guide »,
@url{http://www.latex-project.org/help/documentation/clsguide.pdf} (la
plupart des descriptions faites ici s'inspirent de ce document), ou
l'article suivant @url{https://www.tug.org/TUGboat/tb26-3/tb84heff.pdf}
illustrant la construction d'une nouvelle classe.

@node Class and package commands
@subsection Commande pour extension (classe ou paquetage)
@cindex classe et paquetage, commandes
@cindex commandes pour classe ou paquetage

Voici les commandes conçues pour aider les auteurs d'extension (classes
ou paquetages).

@table @code
@item \AtBeginDvi@{specials@}
@findex \AtBeginDvi
Sauvegarde dans une registre de boîte des choses qui sont à écrire dans
le fichier @file{.dvi} au début de l'achèvement de la première page du

document.

@item \AtEndOfClass@{@var{code}@}
@item \AtEndOfPackage@{@var{code}@}
@findex \AtEndOfClass
@findex \AtEndOfPackage
Crochet pour insérer le @var{code} à exécuter lorsque @LaTeX{} termine le
traitement de la classe ou du paquetage courants.  On peut utiliser ces
crochet plusieurs fois ; le @code{code} sera exécuté dans l'ordre
d'appel.  Voir aussi @ref{\AtBeginDocument}.

@item \CheckCommand@{@var{cmd}@}[@var{num}][@var{défaut}]@{@var{définition}@}
@item \CheckCommand*@{@var{cmd}@}[@var{num}][@var{défaut}]@{@var{définition}@}
@findex \CheckCommand
@findex \CheckCommand*
@cindex nouvelle commande, vérification
Similaire à @code{\newcommand} (@pxref{\newcommand & \renewcommand})
mais ne définit pas @var{cmd} ; à la place vérifie que la définition
actuelle de @var{cmd} est exactement celle donnée par @var{définition}
et est ou n'est pas @dfn{longue} selon ce que l'on attend.
@cindex commande longue
Une commande est dite longue lorsque elle accepte @code{\par} au sein
d'un argument. On attend que la commande @var{cmd} soit longue avec la
version non-étoilée de @code{\CheckCommand}. Lève une erreur en cas
d'échec de la vérification. Ceci vous permet de vérifier avant de
redéfinir vous-même @var{cmd} qu'aucun paquetage ne l'a pas déjà fait.

@item \ClassError@{@var{nom de la classe}@}@{@var{texte de l'erreur}@}@{@var{texte d'aide}@}
@item \PackageError@{@var{nom du paquetage}@}@{@var{texte de l'erreur}@}@{@var{texte d'aide}@}
@item \ClassWarning@{@var{nom de la classe}@}@{@var{texte avertissement}@}
@item \PackageWarning@{@var{nom du paquetage}@}@{@var{texte avertissement}@}
@item \ClassWarningNoLine@{@var{nom de la classe}@}@{@var{texte avertissement}@}
@item \PackageWarningNoLine@{@var{nom du paquetage}@}@{@var{texte avertissement}@}
@item \ClassInfo@{@var{nom de la classe}@}@{@var{texte info}@}
@item \PackageInfo@{@var{nom du paquetage}@}@{@var{texte info}@}
@item \ClassInfoNoLine@{@var{nom de la classe}@}@{@var{texte info}@}
@item \PackageInfoNoLine@{@var{nom du paquetage}@}@{@var{texte info}@}
@findex \ClassError
@findex \PackageError
@findex \ClassWarning
@findex \PackageWarning
@findex \ClassWarningNoLine
@findex \PackageWarningNoLine
@findex \ClassInfo
@findex \PackageInfo
@findex \ClassInfoNoLine
@findex \PackageInfoNoLine
Produit un message d'erreur, ou des messages d'avertissement ou
d'information.

Pour @code{\ClassError} et @code{\PackageError} le message est
@var{texte de l'erreur}, suivi de l'invite d'erreur @code{?} de
@TeX{}. Si l'utilisateur demande de l'aide en tapant
@code{h}, il voit le @var{texte d'aide}.

Les quatre commandes d'avertissement (@identity{warning}) sont
similaires à ceci près qu'elles écrivent @var{texte avertissement} à
l'écran sans invite d'erreur. Les quatre commandes d'information écrivent
@var{texte info} seulement dans le fichier journal.  Les versions en
@code{NoLine} n'affichent pas le numéro de la ligne générant le message,
alors que les autres versions le font.

Pour formater les messages, y compris le @var{texte d'aide} : utilisez
@code{\protect} pour empêcher une commande de se développer, obtenez un
saut de ligne avec @code{\MessageBreak}, et obtenez une espace avec
@code{\space} lorsque l'utilisation d'un caractère espace ne le permet
pas, comme après une commande.  Notez que @LaTeX{} ajoute un point final
à chaque message.

@item \CurrentOption
@findex \CurrentOption
Se développe au contenu de l'option en cours de traitement. Peut
uniquement être utilisé au sein de l'argument @var{code} soit de
@code{\DeclareOption}, soit de @code{\DeclareOption*}.

@item \DeclareOption@{@var{option}@}@{@var{code}@}
@item \DeclareOption*@{@var{option}@}@{@var{code}@}
@findex \DeclareOption
@findex \DeclareOption*
@cindex classe, options
@cindex paquetage, options
@cindex options de classe
@cindex options de paquetage
Rend un option @var{option} disponible pour l'utilisateur, de sorte à ce
qu'il puisse la passer à leur commande @code{\documentclass}.  Par
exemple, la classe @code{notecms} pourrait avoir une option @code{logo}
pour mettre le logo de leur organisation sur la première page avec
@code{\documentclass[logo]@{notcms@}}.  Le fichier de classe doit
contenir @code{\DeclareOption@{logo@}@{@var{code}@}} (et plus loin,
@code{\ProcessOptions}).

Si vous invoquez une option qui n'a pas été déclarée, par défaut cela
produit une avertissement semblable à @code{Unused global option(s):
[badoption].}  Vous pouvez changer ce comportement avec la version
étoilée @code{\DeclareOption*@{@var{code}@}}.  Par exemple, beaucoup de
classes étendent une classe existante en utilisant une commande du
genre @code{\LoadClass@{article@}}, et pour passer les options
supplémentaires à la classe sous-jacente utilisent un code tel que
celui-ci :

@example
\DeclareOption*@{%
\PassOptionsToClass@{\CurrentOption@}@{article@}%
@}
@end example

Un autre exemple est que la classes @code{notecms} permette aux
utilisateur de tenir des listes de destinataire des notes dans des
fichiers externes. Par exemple l'utilisateur invoque
@code{\documentclass[math]@{notecms@}} et la classe lit le fichier
@code{math.memo}.  Ce code gère le fichier s'il existe et sinon passe
l'option à la classe @code{article}.

@example
\DeclareOption*@{\InputIfFileExists@{\CurrentOption.memo@}@{@}@{%
    \PassOptionsToClass@{\CurrentOption@}@{article@}@}@}
@end example

@item \DeclareRobustCommand@{@var{cmd}@}[@var{num}][@var{défaut}]@{@var{définition}@}
@item \DeclareRobustCommand*@{@var{cmd}@}[@var{num}][@var{défaut}]@{@var{définition}@}
@findex \DeclareRobustCommand
@findex \DeclareRobustCommand*
@cindex nouvelle commande, définition
Similaire à @code{\newcommand} et @code{\newcommand*}
(@pxref{\newcommand & \renewcommand}) mais déclare une commande robuste,
même si @var{définition} comprend du code fragile. (Pour une discussion
sur les commandes robustes et fragiles @pxref{\protect}). Utilisez ces
commande pour définir de nouvelles commandes robustes, ou redéfinir des
commandes existantes en les rendant robustes. Contrairement à
@code{\newcommand} elle ne produisent pas d'erreur si la macro @var{cmd}
existe déjà ; au lieu de cela un message est écrit dans le fichier
journal pour indiquer la redéfinition de la commande.

Les commandes définies de cette manière sont légèrement moins efficace
que celle définies avec @code{\newcommand}, c'est pourquoi, à moins que
le contenu de la commande soit fragile et que la commande soit utilisée
au sein d'un argument mouvant, utilisez @code{\newcommand}.

@PkgIndex{etoolbox} Le paquetage @package{etoolbox} offre les commandes
@code{\newrobustcmd}, @code{\newrobustcmd*}, @code{\renewrobustcmd},
@code{\renewrobustcmd*}, @code{\providerobustcmd}, et
@code{\providrobustcmd*} qui sont similaire aux commandes standardes
@code{\newcommand}, @code{\newcommand*}, @code{\renewcommand},
@code{\renewcommand*}, @code{\providecommand}, et
@code{\providecommand*}, mais définissent une commande @var{cmd} robuste
avec deux avantages par rapport à @code{\DeclareRobustCommand} :
@enumerate
@item
Elle utilisent un mécanisme de protection de bas niveau d'e-@TeX{} au
lieu du mécanisme de plus au niveau de @LaTeX{} utilisant
@code{\protect}, ainsi elles ne subissent pas la légère perte de
performance mentionnée plus haut, et
@item
Elles font la même distinction entre @code{\new@dots{}},
@code{\renew@dots{}}, et @code{\provide@dots{}} que les commandes
standardes, ainsi elle ne font pas qu'envoyer un message dans le journal
lorsque vous redéfinissez @var{cmd} déjà existantes, dans ce cas vous
devez utiliser soit @code{\renew@dots{}} soit @code{\provide@dots{}} ou il
y a une erreur.
@end enumerate

@item \IfFileExists@{@var{nom fichier}@}@{@var{si vrai}@}@{@var{si faux}@}
@item \InputIfFileExists@{@var{nom fichier}@}@{@var{si vrai}@}@{@var{si faux}@}
@findex \IfFileExists
@findex \InputIfFileExists
Exécute @var{si vrai} si @LaTeX{} peut trouver le fichier @file{@var{nom
fichier}} et @var{si faux} sinon.  Dans le second cas, le fichier est lu
immédiatement après exécuter @var{si vrai}.  Ainsi
@code{\IfFileExists@{img.pdf@}@{\includegraphics@{img.pdf@}@}@{\typeout@{AVERTISSEMENT
: img.pdf introuvable@}@}} n'inclut le graphique @file{img.pdf} que s'il
est trouvé, mais autrement produit seulement un avertissement.

Cette commande cherche le fichier dans tous les chemins de recherche que
that @LaTeX{} utilise, et non pas seulement dans le répertoire courant.
Pour chercher uniquement dans le répertoire courant faites quelque chose
du genre de @code{\IfFileExists@{./@var{nom fichier}@}@{@var{si
vrai}@}@{@var{si faux}@}}.  Si vous demandez un fichier dont le nom n'a
pas d'extension @code{.tex} alors @LaTeX{} commencera par chercher le
fichier en apposant @code{.tex} à son nom ; pour plus ample information
sur la façon dont @LaTeX{} gère les extensions de nom de fichier voir
@ref{\input}.

@item \LoadClass[@var{liste d'options}]@{@var{nom de la classe}@}[@var{date de parution}]
@item \LoadClassWithOptions@{@var{nom de la classe}@}[@var{date de parution}]
@findex \LoadClass
@findex \LoadClassWithOptions
Charge une classe, comme avec @code{\documentclass[@var{options
list}]@{@var{nom de la classe}@}[@var{release info}]}.  Voici un exemple :
@code{\LoadClass[twoside]@{article@}}.

La @var{liste d'options}, si présente, est une liste ponctuée par des
virgules.  La @var{date de parution} est optionnelle.  Si elle est
présente, elle doit avoir le format @var{AAAA/MM/JJ}.  Si vous demandez
une @var{date de parution} et que la date du paquetage installé sur
votre système est antérieure, alors vous obtiendrez un avertissement à
l'écran et dans le journal de compilation du genre de @code{You have
requested, on input line 4, version `2038/01/19' of document class
article, but only version `2014/09/29 v1.4h Standard LaTeX document
class' is available.}

La variante de la commande @code{\LoadClassWithOptions} utilise la liste
des options de la classe courante.  Cela veut dire qu'elle ignore toute
options passée via @code{\PassOptionsToClass}.  Ceci est une commande de
commodité qui vous permet de construire une nouvelle classe en
l'héritant d'une classe existante, telle que la classe standarde
@code{article}, sans avoir à gérer les options qui furent passée.

@item \ExecuteOptions@{@var{liste d'options}@}
@findex \ExecuteOptions
Pour chaque option @var{option} de la @var{liste d'options}, dans
l'ordre d'apparition, cette commande exécute la commande
@code{\ds@@@var{option}}.  Si cette commande n'est pas définie, alors
l'option @var{option} est ignorée.

Ceci peut être utilisé pour fournir d'un liste d'option par défaut avant
le @code{\ProcessOptions}.  Par exemple, si dans un fichier de classe
vous désirez utiliser par défaut la taille de police 11pt alors vous
devriez spécifier @code{\ExecuteOptions@{11pt@}\ProcessOptions\relax}.

@item \NeedsTeXFormat@{@var{format}@}[@var{date du format}]
@findex \NeedsTeXFormat
Spécifie le format sous lequel cette classe doit être utilisée.  Cette
directive est souvent donnée à la première ligne du fichier de classe,
et le plus souvent elle est utilisée de cette façon :
@code{\NeedsTeXFormat@{LaTeX2e@}}.  Lorsque un document utilisant cette
classe est traité, le nom du format donné ici doit s'accorder avec le
format qui est en cours d'exécution (y compris le fait que la chaîne
@var{format} est sensible à la casse).  Si il ne s'y accorde pas alors
l'exécution est interrompue par une erreur du genre de @samp{This file
needs format `LaTeX2e' but this is `xxx'.}

Pour spécifier une version du format dont vous savez qu'elle prend en
charge certaines fonctions, incluez l'argument optionnel @var{date du
format} correspondant au format où ces fonction furent implémentés.  Si
cette argument est présent il doit être de la forme @code{AAAA/MM/JJ}.
Si la version de format installée sur votre système est antérieure à la
@var{date du format} alors vous obtiendrez un avertissement du genre de
@samp{You have requested release `2038/01/20' of LaTeX, but only release
`2016/02/01' is available.}

@item \OptionNotUsed
@findex \OptionNotUsed
Ajoute l'option courante à la liste des options non utilisées.  Ne peut
être utilisé qu'au sein de l'argument @var{code} de
@code{\DeclareOption} ou @code{\DeclareOption*}.

@c I cannot reproduce this behavior as it is documented in clsguide.
@c In the absence of a @code{\DeclareOption*} declaration, @LaTeX{} issues
@c on the console a warning like @code{LaTeX Warning: Unused global
@c option(s): [unusedoption].} with the list of not-used options when it
@c reaches @code{\begin@{document@}}.

@item \PassOptionsToClass@{@var{liste d'options}@}@{@var{nom de la classe}@}
@item \PassOptionsToPackage@{@var{liste d'options}@}@{@var{nom du paquetage}@}
@findex \PassOptionsToClass
@findex \PassOptionsToPackage
Ajoute les options de la liste ponctuée par des virgules @var{option
list} aux options utilisée par toute commande ultérieure
@code{\RequirePackage} ou @code{\usepackage} pour le paquetage
@var{nom du paquetage} ou la classe @var{nom de la classe}.

La raison d'être de ces commande est que vous pouvez charger un
paquetage autant de fois que vous le voulez sans options, mais que si
voulez passer des options alors vous ne pouvez les fournir qu'au premier
chargement. Charger un paquetage avec des options plus d'une fois
produit une erreur du genre de @code{Option clash for package toto.}
(@LaTeX{} lance l'erreur même s'il n'y a pas de conflit entre les
options.)

Si votre propre code introduit un paquetage deux fois alors vous pouvez
réduire cela en une fois, par exemple en remplaçant les deux
@code{\RequirePackage[landscape]@{geometry@}\RequirePackage[margins=1in]@{geometry@}}
par un seul @code{\RequirePackage[landscape,margins=1in]@{geometry@}}.
Mais si vous chargez un paquetage qui à son tour en charge un autre
alors vous devez mettre en queue les options que vous désirez pour cet
autre paquetage.  Par exemple, supposons que le paquetage @code{toto}
charge le paquetage @package{geometry}.  Au lieu de
@code{\RequirePackage@{toto@}\RequirePackage[draft]@{graphics@}} vous
devez écrire @code{\PassOptionsToPackage@{draft@}@{graphics@}
\RequirePackage@{toto@}}.  (Si @code{toto.sty} charge une option en
conflit avec ce que vous désirez alors vous devrez considérer une
modification de son code source.)

Ces commandes sont également utiles aux utilisateurs de base et pas
seulement aux auteurs de classes et paquetage.  Par exemple, supposons
qu'un utilisateur veuille charger le paquetage @code{graphicx} avec
l'option @code{draft} et veuille également utiliser une classe
@code{toto} qui charge le paquetage @code{graphicx}, mais sans cette
option. L'utilisateur peut commencer son fichier @LaTeX{} avec
@code{\PassOptionsToPackage@{draft@}@{graphicx@}\documentclass@{toto@}}.

@item \ProcessOptions
@item \ProcessOptions*@var{\@@options}
@findex \ProcessOptions
@findex \ProcessOptions*
Exécute le code pour chaque option que l'utilisateur a invoquée.  À
inclure dans le fichier classe sous la forme
@code{\ProcessOptions\relax} (à cause de l’existence de la variante
étoilée de la commande).

Les options tombent dans deux catégories.  Les @dfn{options locales}
sont spécifiées pour un paquetage particulier au sein de l'argument
@var{options} dans @code{\PassOptionsToPackage@{@var{options}@}},
@code{\usepackage[@var{options}]}, ou
@code{\RequirePackage[@var{options}]}.  Les @dfn{options globales} sont
celles données par l'utilisateur de la classe dans
@code{\documentclass[@var{options}]}. (Si une option est spécifiée à la
fois localement et globalement, alors elle est locale).

Lorsque @code{\ProcessOptions} est appelé pour un paquetage
@file{pkg.sty}, il se produit ce qui suit :
@enumerate
@item
Pour chaque option @var{option} déclarée jusqu'à ce point avec
@code{\DeclareOption}, @LaTeX{} examine si cette option est soit globale
soit locale pour @code{pkg}. Si c'est le cas, il exécute le code
déclaré. Ceci est fait dans l'ordre de passage de ces options à
@file{pkg.sty}.
@item
Pour chaque option locale restante, il exécute la commande
@code{\ds@@@var{option}} si elle a été définie quelque part (autrement
que par un @code{\DeclareOption}) ; sinon, il exécute le code de
traitement par défaut des options donné dans @code{\DeclareOption*}. Si
aucun code de traitement par défaut n'a été déclaré, il produit un
message d'erreur. Ceci est fait dans l'ordre dans lequel ces options ont
été spécifiées.
@end enumerate

Lorsque @code{\ProcessOptions} est appelé pour une classe il fonctionne
de la même manière à ceci près que toutes les options sont locales, et
que le code par défaut pour @code{\DeclareOption*} et
@code{\OptionNotUsed} plutôt qu'une erreur.

La version étoilée @code{\ProcessOptions*} exécute le traitement des
options dans l'ordre spécifié par les commandes appelante, plutôt que
dans l'ordre de déclaration de la classe ou du paquetage. Pour un
paquetage, ceci signifie que les options globales sont traitées en
premier.


@item \ProvidesClass@{@var{nom de la classe}@}[@var{date de parution} @var{brève information supplémentaire}]
@item \ProvidesClass@{@var{nom de la classe}@}[@var{date de parution}]
@item \ProvidesPackage@{@var{nom du paquetage}@}[@var{date de parution} @var{brève information supplémentaire}]
@item \ProvidesPackage@{@var{nom du paquetage}@}[@var{date de parution}]
@findex \ProvidesClass
@findex \ProvidesPackage
Identifie la classe ou le paquetage, en tapant un message sur la
console et dans le fichier journal.

Lorsqu'un utilisateur écrit @code{\documentclass@{notecms@}} alors
@LaTeX{} charge le fichier @file{notecms.cls}.  De même, un utilisateur
écrivant @code{\usepackage@{essai@}} invite @LaTeX{} à charger le
fichier @file{essai.sty}.  Si le nom du fichier ne s'accorde pas à
l'argument @var{nom de la classe} ou @var{nom du paquetage} alors un
avertissement est produit. Ainsi, si vous invoquez
@code{\documentclass@{notecms@}}, et que le fichier the file
@file{notecms.cls} comprend la déclaration statement
@code{\ProvidesClass@{xxx@}} alors vous obtiendrez un avertissement du
genre de like @code{You have requested document class `notecms', but the
document class provides 'xxx'.}  Cet avertissement n'empêche pas
@LaTeX{} de traiter le reste du fichier de la classe normalement.

Si vous incluez l'argument optionnel, alors vous devez inclure la date,
avant le premier espace s'il y en a, et elle doit avoir le format
@code{AAAA/MM/JJ}.  Le reste de l'argument est en format libre,
toutefois il identifie traditionnellement la classe, et est écrit
pendant la compilation à l'écran et dans le journal.  Ainsi, si votre
fichier @file{notecms.cls} contient la ligne
@code{\ProvidesClass@{smcmem@}[2008/06/01 v1.0 Classe note CMS]} la
première ligne de votre document est @code{\documentclass@{notecms@}}
alors vous pourrez voir @code{Document Class: notecms 2008/06/01 v1.0
Classe note CMS}.

La date dans l'argument optionnel permet aux utilisateurs de classe et
de paquetage de demander à être avertis si la version de la classe ou du
paquetage installé sur leur système est antérieure à @var{date de
parution}, en utilisant les arguments optionnels comme dans
@code{\documentclass@{smcmem@}[2018/10/12]} ou
@code{\usepackage@{toto@}[[2017/07/07]]}.  (Notez que les utilisateurs
de paquetages incluent seulement rarement une date, et les utilisateurs
de classe presque jamais).

@item \ProvidesFile@{@var{nom fichier}@}[@var{information supplémentaire}]
@findex \ProvidesFile
Déclare un fichier autre que les fichiers principaux de classe ou de
paquetage, tel qu'un fichier de configuration ou un fichier de
définition de police. Mettez la commande dans ce fichier et vous
obtiendrez dans le journal une information du genre de @code{File:
essai.config 2017/10/12 fichier de configuration pour essai.cls} lorsque
@var{nom fichier} vaut @samp{essai.config} et que @var{information
supplémentaire} vaut @samp{2017/10/12 fichier de configuration pour
essai.cls}.

@item \RequirePackage[@var{liste d'options}]@{@var{nom du paquetage}@}[@var{date de parution}]
@item \RequirePackageWithOptions@{@var{nom du paquetage}@}[@var{date de parution}]
@findex \RequirePackage
@findex \RequirePackageWithOptions
Charge un paquetage, comme la commande @code{\usepackage} pour les
auteurs de documents.  @xref{Additional packages}. Voici un exemple :
@code{\RequirePackage[landscape,margin=1in]@{geometry@}}.  Notez que
l'équipe de développement de @LaTeX{} recommande fortement l'utilisation
de ces commandes de préférence à l'@code{\input} de @value{PlainTeX} ;
voir le « Class Guide ».

La @var{liste d'options}, si présente, est une liste ponctuée de
virgules.  La @var{date de parution}, si présente, doit avoir le format
@var{AAAA/MM/JJ}.  Si la date de parution du paquetage tel qu'il est
installé sur votre système est antérieure à @var{date de parution} alors
vous obtiendrez un avertissement du genre de @code{You have requested,
on input line 9, version `2017/07/03' of package jhtest, but only
version `2000/01/01' is available}.

La variante @code{\RequirePackageWithOptions} utilise la liste d'options
de la classe courante. Ceci implique qu'elle ignore toute option passée
à la classe via @code{\PassOptionsToClass}.  C'est une commande de
commodité pour permettre facilement de construire des classes sur des
classes existantes sans avoir à gérer les options qui sont passées.

La différence entre @code{\usepackage} et @code{\RequirePackage} est
mince. La commande @code{\usepackage} est à l'intention du fichier
document alors que @code{\RequirePackage} l'est à celle des fichiers
paquetage ou classe.  Ainsi, utiliser @code{\usepackage} avant la
commande @code{\documentclass} amène @LaTeX{} à produire une erreur du
genre de @code{\usepackage before \documentclass}, là où vous pouvez
utiliser @code{\RequirePackage}.
@end table


@node Fonts
@chapter Polices de caractères
@anchor{Typefaces}@c old name

@cindex polices de caractères
@cindex fontes

@LaTeX{} gère les polices de caractères en vous offrant de puissantes
capacités. Notamment, son schéma @dfn{NFSS} vous permet de travailler
aisément avec les polices, ou @dfn{familles de fontes} dans votre
document (par exemple, voir @ref{Font styles}).  De plus, les documents
@LaTeX{} peuvent utiliser la plupart des polices disponibles de nos
jours, y compris des versions de Times Roman, Helvetica, Courier, etc.
(Notez cependant que beaucoup de polices ne prennent pas en charge les
mathématiques).

La première police dans le monde @TeX{} était Computer Modern,
développée par Donald Knuth.  Elle est la police par défaut pour les
documents @LaTeX{} et est encore la plus largement utilisée.  Mais
passer à une autre police n'implique la plupart du temps que peu de
commandes.  Par exemple, mettre ce qui suit dans votre préambule vous
donne une police simili-Palatino, ce qui est élégant et plus lisible sur
écran que bien d'autres polices, tout en continuant à vous permettre de
composer des mathématiques.  (Exemple fourni par @identity{Michael Sharpe},
@url{https://math.ucsd.edu/~msharpe/RcntFnts.pdf}).

@example
\usepackage[osf]@{newpxtext@} % osf pour le texte, non les math
\usepackage@{cabin@} % sans serif
\usepackage[varqu,varl]@{inconsolata@} % sans serif tapuscrit
\usepackage[bigdelims,vvarbb]@{newpxmath@} % bb de STIX
\usepackage[cal=boondoxo]@{mathalfa@} % mathcal
@end example

@noindent
De plus, les moteurs @command{xelatex} ou @command{lualatex} vous
permettent d'utiliser toute police sur votre système en format OpenType
ou TrueType (@pxref{@TeX{} engines}).

Le catalogue de polices de @LaTeX{}
(@url{https://tug.org/FontCatalogue}) donne des échantillons graphiques
de polices et du source à copier/coller pour utiliser un grand nombre de
polices, dont beaucoup prennent en charges les mathématiques.  Son but
est de couvrir toutes les polices libres pour l'alphabet latin
utilisables facilement avec @LaTeX{}.

Plus ample information peut également être trouvée sur le @TeX{} Users
Group, à @url{https://www.tug.org/fonts/}.

@menu
* Paquetage fontenc: fontenc package. Codage des polices.
* Styles de polices: Font styles. Sélectionnez romain, italique, etc.
* Formats de polices: Font sizes. Choisir la taille du point.
* Commandes police de bas niveau: Low-level font commands. Sélectionnez le codage, famille, série, allure.
@end menu

@node fontenc package
@section Le paquetage @package{fontenc}

@cindex fonte, codage
@cindex UTF-8, prise en charge des fontes
@cindex T1
@cindex OT1
@findex fontenc

Synopsis :

@example
\usepackage[@var{codage_fonte}]@{fontenc@}
@end example

@noindent ou

@example
\usepackage[@var{codage_fonte1}, @var{codage_fonte2}, ...]@{fontenc@}
@end example

Spécifie les codages de fonte.  Un codage de fonte est une application
des codes de caractères vers les glyphes de fonte utilisés pour composer
votre texte en sortie.

@PkgIndex{fontspec}
Ce paquetage ne fonctionne que si vous utilisez le moteur
@code{pdflatex} (@pxref{@TeX{} engines}).  Si vous utilisez les moteurs
@command{xelatex} ou @command{lualatex} alors utilisez à la place le
paquetage @package{fontspec}.

La police originale de @TeX{}, @identity{Computer Modern}, comprend un nombre
limité de caractères. Par exemple, pour faire des caractères accentués
ordinaires vous devez utiliser @code{\accent} (@pxref{\accent}) mais
cela désactive la césure.  Les utilisateurs de @TeX{} ont spécifié
plusieurs normes concernant l'accès aux ensembles élargis de caractères
fournis par les fontes modernes.  Si vous utilisez @command{pdflatex}
alors placez ceci dans le préambule :

@example
\usepackage[T1]@{fontenc@}
@end example

@noindent
cela active la prise en charge pour les langages européens les plus
répandus, notamment le français, l'italien, le polonais.  En
particulier, si vous avez des mots avec des lettres accentuées alors
@LaTeX{} gérera leur césure et le document en sortie peut faire l'objet
de copier/coller.  (La seconde ligne optionnelle vous permet de taper
directement les caractères accentués dans votre fichier source).

@PkgIndex{lmodern} @PkgIndex{cm-super}
Si vous utilisez un codage tel que @code{T1} et que les caractères ne
sont pas nets ou passent mal au zoom alors vos fontes sont probablement
définies par des cartes binaires (@identity{bitmap}), on parle de fontes
matricielles ou Type@tie{}3.  Si vous désirez des fontes vectorielles,
utilisez un paquetage tel que @package{lmodern} ou @package{cm-super}
pour obtenir des fontes vectorielles qui étendent celles utilisées par
défaut par @LaTeX{}.

Pour chaque @var{codage_fonte} passé en option mais encore non déclaré,
ce paquetage charge les fichiers de définitions du codage, nommé
@file{@var{codage_fonte}enc.def}.  Il règle aussi
@code{\encodingdefault} comme le dernier codage dans la liste d'option.

Voici les valeurs usuelles pour @var{codage_fonte}.

@table @code
@item OT1
Le codage original pour @TeX{}.  Limité quasiment aux lettres latines non accentués.

@item OMS, OML
Codage des symboles et des lettres mathématiques.

@item T1
Texte étendu de @TeX{}.  Appelé parfois le codage Cork du nom de la
conférence du groupe d'utilisateurs @TeX{} durant laquelle il fut
élaboré.  Donne accès à la plupart des caractères accentués
européens. C'est l'option la plus fréquente pour ce paquetage.

@item TS1
Codage Texte @identity{Companion}.
@end table

@noindent
Par défaut @LaTeX{} charge @code{OML}, @code{T1}, @code{OT1}, et ensuite
@code{OMS}, et règle le codage par défaut à @code{OT1}.

Même si vous n'utilisez pas de lettres accentuées, vous pourriez avoir
besoin d'un codage de font si la fonte que vous utilisez l'exige.

Si vous utilisez des fontes codée en @code{T1} autre que celles de la
police par défaut @identity{Computer Modern}, alors vous pourriez avoir besoin de
charger le paquetage qui sélectionne vos fontes avant de charger
@file{fontenc}, de sorte à empêcher le système de charger l'une des
fontes codées en @code{T1} de la police par défaut.

L'équipe du projet @LaTeX{} a réservé les noms de codage commençant
par : @samp{T} pour les codages standards de texte à 256 caractères,
@samp{TS} pour les symboles qui étendent les codages T correspondants,
@samp{X} pour les codages de test, @samp{M} pour les codages standards
de math à 256 caractères, @samp{A} pour les applications spéciales,
@samp{OT} pour les codages standards de texte à 128 caractères, et
@samp{OM} pour les codages standards de math à 128 caractères (@samp{O}
est l'initiale d'@samp{obsolete}).

Ce paquetage fournit un certain nombre de commandes, détaillées
ci-dessous. Beaucoup d'entre elles sont spécifiques à un codage, aussi
si vous avez défini une commande qui fonctionne pour un codage mais que
le codage courant en est différent alors la commande n'est pas active.

@menu
* \DeclareFontEncoding::           Définit un codage.
* \DeclareTextAccent::             Définit un accent dans le codage.
* \DeclareTextAccentDefault::      Repli pour utiliser un accent dans le codage.
* \DeclareTextCommand & \ProvideTextCommand::  Nouvelle commande spécifique à un codage.
* \DeclareTextCommandDefault & \ProvideTextCommandDefault::  Repli pour commandes spécifiques à un codage.
* \DeclareTextComposite::   Accès direct à un glyphe accentué, dans le codage.
* \DeclareTextCompositeCommand::    Code à exécuter pour une numéro de glyphe, dans le codage.
* \DeclareTextSymbol::              Définit un symbole dans le codage.
* \DeclareTextSymbolDefault::       Repli d'un symbole dans le codage.
* \LastDeclaredEncoding::           Sauvegarde le dernier codage déclaré.
* \UseTextSymbol & \UseTextAccent:: Passe temporairement à un autre codage.
@end menu


@node \DeclareFontEncoding
@subsection @code{\DeclareFontEncoding}

@cindex fonte, déclarer le codage
@cindex codage de fonte
@cindex accents, définir
@findex \DeclareFontEncoding

Synopsis :

@example
\DeclareFontEncoding@{@var{codage}@}@{@var{réglages-texte}@}@{@var{réglages-math}@}
@end example

Déclare le codage de fonte @var{codage}.  Sauvegarde également la valeur
de @var{codage} dans @code{\LastDeclaredEncoding}
(@pxref{\LastDeclaredEncoding}).

Le fichier @file{t1enc.def} contient cette ligne (suivie de bien
d'autres) :

@example
\DeclareFontEncoding@{T1@}@{@}@{@}
@end example

Les @var{réglages-texte} sont les commandes que @LaTeX{} exécutera
chaque fois qu'il commute d'un codage à une autre avec les commandes
@code{\selectfont} et @code{\fontencoding}.  Les @var{réglages-math}
sont les commandes que @LaTeX{} utilise lorsque la fonte est accédée en
tant qu'alphabet mathématique.

@LaTeX{} ignore tout espace au sein de @var{réglages-texte} et
@var{réglages-math}, de sorte à prévenir toute insertion non voulue
d'espace en sortie.

Si vous inventez un codage vous devriez choisir un nom de deux ou trois
lettres commençant par @samp{L} pour @samp{local}, ou @samp{E} pour
@samp{experimental}.

Notez que les fichiers de définition de codage de sortie sont
potentiellement lus plusieurs fois par @LaTeX{}, ainsi utiliser, par
ex.@: @code{\newcommand} peut causer une erreur.  De plus, il est
préférable que de tels fichiers contiennent une ligne
@code{\ProvidesFile} (@pxref{Class and package commands}).

Notez aussi qu'il est préférable de n'utiliser les commandes en
@code{\...Default} que dans un paquetage, et non dans les fichiers de
définition de codage, puisque ces fichiers ne devraient contenir que des
déclarations spécifiques à ce codage-là.


@node \DeclareTextAccent
@subsection @code{\DeclareTextAccent}

@cindex fonte, codage
@cindex accents, définir
@findex \DeclareTextAccent

Synopsis :

@example
\DeclareTextAccent@{@var{cmd}@}@{@var{codage}@}@{@var{cassetin}@}
@end example

Définit un accent, à mettre au dessus d'autres glyphe, au sein du codage
@var{codage} à la position @var{cassetin}.

@cindex cassetin, fonte
Un @dfn{cassetin} est le numéro identifiant un glyphe au sein d'une
fonte.
@ignore
Au temps de la typographie à l'ancienne, une @dfn{casse} était d'un
caisse en bois contenant tous les caractères en plomb d'une même fonte,
c.-à-d.@: partageant la même taille, allure, graisse, etc. Cette caisse
était subdivisée en compartiments appelés @dfn{cassetins} dans lesquels
on rangeait les caractères correspondant au même glyphe. C'est pourquoi,
en ce qui concerne la typographie numérique, nous recyclons le terme
cassetin pour désigner le numéro d'un glyphe au sein d'une fonte.
@end ignore

La ligne suivante de @file{t1enc.def} déclare que pour fabriquer un
accent circonflexe comme dans @code{\^A}, le système va mettre l'accent
dans du cassetin 2 sur le caractère @samp{A}, qui est représenté en
ASCII comme 65.  (Ceci vaut à moins qu'il y ait une déclaration
@code{DeclareTextComposite} ou @code{\DeclareTextCompositeCommand}
pertinente ; @pxref{\DeclareTextComposite}) :

@example
\DeclareTextAccent@{\^@}@{T1@}@{2@}
@end example

Si @var{cmd} a déjà été défini, alors @code{\DeclareTextAccent} ne
produit pas d'erreur mais il enregistre la redéfinition dans le fichier
de transcription.


@node \DeclareTextAccentDefault
@subsection @code{\DeclareTextAccentDefault}

@cindex accents, définir
@findex \DeclareTextAccent
@findex \DeclareTextAccentDefault

Synopsis :

@example
\DeclareTextAccentDefault@{\@var{cmd}@}@{@var{codage}@}
@end example

S'il y a une commande d'accent @code{\@var{cmd}} spécifique à un codage
mais qu'il n'y a aucun @code{\DeclareTextAccent} associé pour ce codage,
alors cette commande va prendre le relais en disant de l'utiliser comme
décrit pour @var{codage}.

Par exemple, pour faire que le codage @code{OT1} soit le codage par
défaut pour l'accent @code{\"}, déclarez ceci :

@example
\DeclareTextAccentDefault@{\"@}@{OT1@}
@end example

@noindent
Si vous tapez un @code{\"} alors que le codage courant n'a pas de
définition pour cet accent, alors @LaTeX{} utilisera la définition issue
de @code{OT1}.

c.-à-d.@: que cette commande est équivalente l'appel suivant
(@pxref{\UseTextSymbol & \UseTextAccent}) :

@example
\DeclareTextCommandDefault[1]@{\@var{cmd}@}
   @{\UseTextAccent@{@var{codage}@}@{\@var{cmd}@}@{#1@}@}
@end example

Notez que @code{\DeclareTextAccentDefault} fonctionne pour l'une
quelconque des commandes @file{fontenc} à un argument, et pas seulement
les commandes d'accent.


@node \DeclareTextCommand & \ProvideTextCommand
@subsection @code{\DeclareTextCommand} & @code{\ProvideTextCommand}

@anchor{\DeclareTextCommand}
@anchor{\ProvideTextCommand}
@findex \DeclareTextCommand
@findex \ProvideTextCommand

Synopsis, l'un parmi :

@example
\DeclareTextCommand@{\@var{cmd}@}@{@var{codage}@}@{@var{défn}@}
\DeclareTextCommand@{\@var{cmd}@}@{@var{codage}@}[@var{nargs}]@{@var{defn@}}
\DeclareTextCommand@{\@var{cmd}@}@{@var{codage}@}[@var{nargs}][@var{défautargopt}]@{@var{défn}@}
@end example

ou l'un parmi :

@example
\ProvideTextCommand@{\@var{cmd}@}@{@var{codage}@}@{@var{défn}@}
\ProvideTextCommand@{\@var{cmd}@}@{@var{codage}@}[@var{nargs}]@{@var{défn}@}
\ProvideTextCommand@{\@var{cmd}@}@{@var{codage}@}[@var{nargs}][@var{défautargopt}]@{@var{défn}@}
@end example

Définit la commande @code{\@var{cmd}}, laquelle sera spécifique à un
codage.  Le nom @var{cmd} de la commande doit être précédé d'une
controblique, @code{\}.  Ces commandes ne peuvent apparaître que dans
le préambule.  Redéfinir @code{\@var{cmd}} ne cause pas d'erreur. La
commande définie sera robuste même si le code dans @var{défn} est
fragile (@pxref{\protect}).

Par exemple, le fichier @file{t1enc.def} contient la ligne suivante :

@example
\DeclareTextCommand@{\textperthousand@}@{T1@}@{\%\char 24 @}
@end example

Avec cela, vous pouvez exprimer des pour-milles comme ceci :

@example
\usepackage[T1]@{fontenc@}  % dans le préambule
  ...
La limite légale est de \( 0,8 \)\textperthousand.
@end example

@noindent
Si vous changez le codage de fonte en @code{OT1} alors vous obtenez une
erreur du genre de @samp{LaTeX Error: Command \textperthousand
unavailable in encoding OT1}.

@findex \DeclareTextSymbol
La variante @code{\ProvideTextCommand} agit de même, à ceci près qu'elle
ne fait rien si @code{\@var{cmd}} est déjà définie.  La commande
@code{\DeclareTextSymbol} est plus rapide pour une simple association
d'un cassetin à un glyphe (@pxref{\DeclareTextSymbol})

Les arguments optionnels @var{nargs} et @var{défautargopt} jouent le même
rôle que dans @code{\newcommand} (@pxref{\newcommand & \renewcommand}).
En un mot, @var{nargs} est un entier de 0 à 9 spécifiant le nombre
d'arguments que la commande @code{\@var{cmd}} qu'on définit prend.  Ce
nombre inclut tout argument optionnel.  Omettre cet argument revient
au même que spécifier 0 pour dire que @code{\@var{cmd}} n'a aucun
argument.  Et, si @var{défautargopt} est présent, alors le premier
argument de @code{\@var{cmd}} est optionnel, et sa valeur par défaut est
@var{défautargopt} (ce qui peut être la chaîne vide).  Si
@var{défautargopt} n'est pas présent alors @code{\@var{cmd}} ne prend
pas d'argument optionnel.


@node \DeclareTextCommandDefault & \ProvideTextCommandDefault
@subsection @code{\DeclareTextCommandDefault} & @code{\ProvideTextCommandDefault }

@anchor{\DeclareTextCommandDefault}
@anchor{\ProvideTextCommandDefault}
@findex \DeclareTextCommandDefault
@findex \ProvideTextCommandDefault

Synopsis :

@example
\DeclareTextCommandDefault@{\@var{cmd}@}@{@var{défn}@}
@end example

ou :

@example
\ProvideTextCommandDefault@{\@var{cmd}@}@{@var{défn}@}
@end example

Donne une définition par défaut à @code{\@var{cmd}}, pour la situation
où cette commande n'est pas définie dans le codage actuellement en
vigueur. La valeur par défaut doit utiliser uniquement les codages
connus comme disponibles.

La déclaration ci-dessous rend @code{\copyright} disponible.

@example
\DeclareTextCommandDefault@{\copyright@}@{\textcircled@{c@}@}
@end example

@noindent
Elle utilise uniquement un codage (OMS) qui est toujours disponible.

La déclaration @code{\DeclareTextCommandDefault} n'est pas destinée à
survenir dans un fichier de définition de codage puisque ces fichiers ne
doivent déclarer que des commandes à utiliser quand vous sélectionnez ce
codage. Au lieu de cela, elle devrait être dans un paquetage.

Comme pour les commandes correspondantes qui ne sont pas en
@code{...Default}, la déclaration @code{\ProvideTextCommandDefault} a
exactement le même comportement que @code{\DeclareTextCommandDefault} à
ceci près qu'elle ne fait rien si @code{\@var{cmd}} est déjà définie
(@pxref{\DeclareTextCommand & \ProvideTextCommand}).  De sorte qu'un
paquetage peut l'utiliser pour fournir une définition de repli que
d'autres paquetages peuvent améliorer.


@node \DeclareTextComposite
@subsection @code{\DeclareTextComposite}

@cindex accents, définir
@findex \DeclareTextComposite

Synopsis :

@example
\DeclareTextComposite@{\@var{cmd}@}@{@var{codage}@}@{@var{objet_simple}@}@{@var{cassetin}@}
@end example

Accède à un glyphe accentué directement, c.-à-d.@: sans avoir à placer
une accent au dessus d'un caractère séparé.

La ligne suivante extraite de @file{t1enc.def} signifie que @code{\^o}
aura pour effet que @LaTeX{} compose le @samp{o} bas-de-casse en prenant
le caractère directement du cassetin 224 de la fonte.

@example
\DeclareTextComposite@{\^@}@{T1@}@{o@}@{244@}
@end example

@xref{fontenc package}, pour une liste des codages
usuels. L'@var{objet_simple} devrait être un seul caractère ou une seule
commande.  L'argument @var{cassetin} est d'ordinaire un entier positif
représenté en décimal (bien que les notations octale ou hexadécimale
soient possibles).  Normalement \@var{cmd} a déjà été déclarée pour ce
codage, soit avec @code{\DeclareTextAccent} soit avec un
@code{\DeclareTextCommand} à un argument.  Dans @file{t1enc.def}, la
ligne ci-dessus suit la commande
@code{\DeclareTextAccent@{\^@}@{T1@}@{2@}}.


@node \DeclareTextCompositeCommand
@subsection @code{\DeclareTextCompositeCommand}

@cindex accents, définir
@findex \DeclareTextCompositeCommand

Synopsis :

@example
\DeclareTextCompositeCommand@{\@var{cmd}@}@{@var{codage}@}@{@var{arg}@}@{@var{code}@}
@end example

Une version plus générale de @code{\DeclareTextComposite} qui exécute un
code arbitraire avec @code{\@var{cmd}}.

Ceci permet que des accents sur @samp{i} se comportent de la même façon
que des accents sur le i-sans-point, @code{\i}.

@example
\DeclareTextCompositeCommand@{\'@}@{OT1@}@{i@}@{\'\i@}
@end example

@xref{fontenc package}, pour une liste des codages usuels.  Normalement
@code{\@var{cmd}} doit avoir été déjà déclarée avec
@code{\DeclareTextAccent} ou avec un @code{\DeclareTextCommand} à un
argument.


@node \DeclareTextSymbol
@subsection @code{\DeclareTextSymbol}

@cindex symbole, définition
@findex \DeclareTextSymbol

Synopsis :

@example
\DeclareTextSymbol@{\@var{cmd}@}@{@var{codage}@}@{@var{cassetin}@}
@end example

Définit un symbole dans le codage @var{codage} à la position
@var{cassetin}.  Les symboles définis de cette manière sont destinés à
être utilisés dans du texte, et non dans des mathématiques.

Par exemple, cette ligne extraite de @file{t1enc.def} déclare le numéro
du glyphe à utiliser pour @BES{«,\hbox{\guillemotleft}}, le guillemet
gauche :

@example
\DeclareTextSymbol@{\guillemotleft@}@{T1@}@{19@}
@end example

@noindent
La commande @code{\DeclareTextCommand@{\guillemotleft@}@{T1@}@{\char
19@}} a le même effet mais est plus lente (@pxref{\DeclareTextCommand &
\ProvideTextCommand}).

@xref{fontenc package}, pour une liste des codages usuels.  Le
@var{cassetin} peut être spécifié en notation décimale, ou octale (comme
dans @code{'023}), ou hexadécimale (comme dans @code{"13}), bien que la
notation décimale ait l'avantage d'être insensible à la redéfinition du
guillemet anglais simple ou double par un autre paquetage.

Si @code{\@var{cmd}} est déjà définie, alors @code{\DeclareTextSymbol}
ne produit pas une erreur, mais il inscrit que la redéfinition a eu lieu
dans le fichier
@c xx TODO = .log ?
transcript.


@node \DeclareTextSymbolDefault
@subsection @code{\DeclareTextSymbolDefault}

@cindex accents, définir
@findex \DeclareTextSymbol
@findex \DeclareTextSymbolDefault

Synopsis :

@example
\DeclareTextSymbolDefault@{\@var{cmd}@}@{@var{codage}@}
@end example

S'il y a une @code{\@var{cmd}} de symbole spécifique à un codage mais
qu'il n'y a pas de @code{\DeclareTextSymbol} associé pour ce codage,
alors cette commande peut prendre le relais, en disant d'obtenir le
symbole selon la description faite pour @var{codage}.

Par exemple, pour déclarer que si le codage courant ne donne pas de
signification à @code{\textdollar} alors on utilise celle issue
d'@code{OT1}, déclarer ceci :

@example
\DeclareTextSymbolDefault@{\textdollar@}@{OT1@}
@end example

c.-à-d.@: que cette commande est équivalente à cet appel
(@pxref{\UseTextSymbol & \UseTextAccent}) :

@example
\DeclareTextCommandDefault@{\@var{cmd}@}
   @{\UseTextSymbol@{@var{codage}@}@{\@var{cmd}@}@}
@end example

@c xx TODO éclaircir ce qu'on entend par commande à zéro argument de
@c @file{fontenc}
Notez que @code{\DeclareTextSymbolDefault} peut être
utilisé pour définir une signification par défaut pour toute commande à
zéro argument de @file{fontenc}.


@node \LastDeclaredEncoding
@subsection @code{\LastDeclaredEncoding}

@findex \LastDeclaredEncoding

Synopsis :

@example
\LastDeclaredEncoding
@end example

Obtient le nom du dernier codage déclaré. La commande
@code{\DeclareFontEncoding} stocke le nom de sorte qu'on puisse le
retrouver avec cette commande (@pxref{\DeclareFontEncoding}).

Dans l'exemple suivant, on compte sur @code{\LastDeclaredEncoding}
plutôt que de donner le nom du codage explicitement :

@example
\DeclareFontEncoding@{JH1@}@{@}@{@}
\DeclareTextAccent@{\'@}@{\LastDeclaredEncoding@}@{0@}
@end example


@node \UseTextSymbol & \UseTextAccent
@subsection @code{\UseTextSymbol} & @code{\UseTextAccent}

@anchor{\UseTextSymbol}
@anchor{\UseTextAccent}
@findex \UseTextSymbol
@findex \UseTextAccent

Synopsis :

@example
\UseTextSymbol@{@var{codage}@}@{\@var{cmd}@}
@end example

ou :

@example
\UseTextAccent@{@var{codage}@}@{\@var{cmd}@}@{@var{texte}@}
@end example

Utilise un symbole ou un accent qui n'est pas défini dans le codage
courant.

En général, pour utiliser une commande @file{fontenc} dans un codage où
elle n'est pas définie, et si la commande n'a pas d'arguments, alors
vous pouvez utiliser quelque chose de ce genre :

@example
\UseTextSymbol@{OT1@}@{\ss@}
@end example

@noindent
ce qui est équivalent à ceci (notez que les accolades externes forment
un groupe, de sorte que @LaTeX{} revient au codage précédent après le
@code{\ss}) :

@example
@{\fontencoding@{OT1@}\selectfont\ss@}
@end example

De même, pour utiliser une commande @file{fontenc} dans un codage où
elle n'est pas définie, et si la commande a un argument, vous pouvez
l'utiliser ainsi :

@example
\UseTextAccent@{OT1@}@{\'@}@{a@}
@end example

@noindent
ce qui est équivalent à cela (encore une fois, notez les accolades
externes formant un groupe) :

@example
@{fontencoding@{OT1@}\selectfont
   \'@{\fontencoding@{@var{cdg_en_vigueur}@}\selectfont a@}@}
@end example

@noindent
Ci-dessus, @var{cdg_en_vigueur} est le codage en vigueur avant cette
séquence de commandes, de sorte que @samp{a} est composé en utilisant le
codage courant, et seulement l'accent est pris de @code{OT1}.

@node Font styles
@section styles des polices

@cindex styles de police
@cindex styles typographiques
@cindex styles de texte

Les commandes de styles suivantes sont prises en charge par @LaTeX{}.

@cindex forme déclarative des commandes de style de police
@cindex déclarative, forme des commandes de style de police
Dans le tableau ci-dessous listant des commandes, les commandes en
@code{\text…} sont utilisées avec un argument, comme dans
@code{\textit@{texte@}}. C'est la forme préférée. Mais affichée à sa
suite, entre parenthèses, est la @dfn{forme déclarative} correspondante,
qui est souvent utile. Cette forme ne prend pas arguments comme dans
@code{@{\itshape @var{texte}@}}. La portée la forme déclarative s'étend
jusqu'à la prochaine commande de type style ou jusqu'à la fin du groupe
actuel. De plus, chacune a une forme par environnement comme
@code{\begin@{itshape@}…\end@{itshape@}}, que l'on décrit plus
amplement à la fin de cette rubrique.

Ces commandes, dans n'importe laquelle des trois formes, sont
cumulatives ; par exemple, vous pouvez dire aussi bien
@code{\sffamily\bfseries} que @code{\bfseries\sffamily} pour obtenir du
gras sans empattement.

@anchor{\nocorrlist}
@anchor{\nocorr}
@findex \nocorrlist
@findex \nocorr
Un avantage de ces commandes est qu'elles fournissent automatiquement
une correction d'italique si nécessaire (@pxref{\/}). Plus précisément,
elles insèrent la correction italique à moins que le caractère suivant
dans la liste @code{\nocorrlist}, cette liste consistant par défaut en
le point et la virgule.  Pour supprimer l'insertion automatique de la
correction italique, utilisez @code{\nocorr} au début ou à la fin de
l'argument de la commande, comme dans @code{\textit@{\nocorr text@}} ou
@code{\textsc@{text \nocorr@}}.


@table @code
@item \textrm (\rmfamily)
@findex \textrm
@findex \rmfamily
Romain.

@item \textit (\itshape)
@findex \textit
@findex \itshape
Italique.

@item \textmd (\mdseries)
@findex \textmd
@findex \mdseries
Poids moyen (par défaut).

@item \textbf (\bfseries)
@findex \textbf
@findex \bfseries
Gras.

@item \textup (\upshape)
@findex \textup
@findex \upshape
Droit (par défaut). Le contraire d'incliné.

@item \textsl (\slshape)
@findex \textsl
@findex \slshape
Inclinée.

@item \textsf (\sffamily)
@findex \textsf
@findex \sffamily
Sans empattement.

@item \textsc (\scshape)
@findex \textsc
@findex \scshape
Petites capitales.

@item \texttt (\ttfamily)
@findex \texttt
@findex \ttfamily
Tapuscrit, encore appelé « machine à écrire ».

@item \textnormal (\normalfont)
@findex \textnormal
@findex \normalfont
Police principale du document.

@end table

@cindex emphasis
@findex \emph
Bien qu'elle change également la fonte, la commande
@code{\emph@{@var{texte}@}} est sémantique, pour que @var{texte} soit
mis en valeur, et ne devrait pas être utilisé en remplacement de
@code{\textit}.  Par exemple, le résultat de @code{\emph@{@var{texte
début} \emph@{@var{texte milieu}@} @var{texte fin}@}} est que @var{texte
début} et @var{texte fin} sont en italique, mais @var{texte milieu} est
en romain.

@LaTeX{} fournit également les commandes suivantes, qui font passer
inconditionnellement à un style donné, c.-à-d.@: @emph{ne} sont
@emph{pas} cumulatives. Elles sont utilisées déclarativement :
@code{@{\@var{cmd} ... @}} au lieu de @code{\@var{cmd}@{...@}}.

(Les commandes inconditionnelle ci-dessous sont une version plus ancienne
de la commutation de fonte. Les commandes qui précèdent sont une
amélioration dans les plupart des circonstances ; toutefois il arrive
qu'une commutation inconditionnelle soit ce dont on a besoin).

@ftable @code
@item \bf
@cindex gras
Passage en @b{gras}.

@item \cal
@cindex lettres de script pour les mathématiques
@cindex lettres calligraphiques pour les mathématiques
Passage en lettres calligraphiques pour les mathématiques.

@item \em
@cindex accent
Accent (italique dans romain, romain dans italiques).

@item \il
@cindex italique
Italique.

@item \rm
@cindex police romaine
Romain.

@item \sc
@cindex police petites capitales
Les petites capitales.

@item \sf
@cindex sans empattement
Sans empattement.

@item \sl
@cindex police inclinée
@cindex police oblique
Incliné (oblique).

@item \tt
@cindex police machine à écrire
@cindex police tapuscrit
@cindex police de largeur fixe
Tapuscrit, encore appelé « Machine à écrire » (largeur fixe).

@end ftable


La commande @code{\em} est la version inconditionnelle de @code{\emph}.

Les commandes suivantes sont à utiliser en mode math.  Elle ne sont pas
cumulatives, ainsi @code{\mathbf@{\mathit@{@var{symbole}@}@}} ne crée
pas un @var{symbole} en gras italiques ; au lieu de cela, il sera juste
en italique. C'est ainsi car typiquement les symboles mathématiques ont
besoin d'être toujours traités typographiquement de la même manière,
indépendamment de ce qui les entoure.

@table @code
@item \mathrm
@findex \mathrm
Romain, pour une utilisation en mode mathématique.

@item \mathbf
@findex \mathbf
Gras, pour une utilisation en mode mathématique.

@item \mathsf
@findex \mathsf
Sans empattement, pour une utilisation en mode mathématique.

@item \mathtt
@findex \mathtt
Tapuscrit, pour une utilisation en mode mathématique.

@item \mathit
@itemx (\mit)
Italique, pour une utilisation en mode mathématique.

@item \mathnormal
@findex \mathnormal
Pour une utilisation en mode mathématique, par exemple dans un autre déclaration de type style.

@item \mathcal
@findex \mathcal
Lettres calligraphiques, pour une utilisation en mode mathématique.

@end table

@anchor{\mathversion}
@findex \mathversion
@cindex mathématiques, gras
@cindex gras, mathématiques
En outre, la commande @code{\mathversion@{bold@}} peut être utilisée
pour commuter en caractères gras les lettres et les symboles dans les
formules. @code{\mathversion@{normal@}} restaure la valeur par défaut.

@anchor{\oldstylenums}
@findex \oldstylenums
@cindex chiffres elzéviriens
@cindex elzéviriens, chiffres
@cindex chiffres minuscules
@cindex chiffres bas-de-casse
@cindex chiffres français
@cindex chiffres non alignés
@cindex chiffres suspendus
@cindex chiffres Didot
@cindex chiffres alignés
@PkgIndex{textcomp}
Enfin, la commande @code{\oldstylenums@{@var{chiffres}@}} sert à
composer des chiffres dits @dfn{elzéviriens}, ou @dfn{non alignés}, qui
ont des hauteurs et profondeurs (et parfois largeurs) distincts de
l'alignement standard des chiffres dits @dfn{Didot}, ou @dfn{alignés},
qui ont tous la même hauteur que les lettres capitales.  Les polices
@LaTeX{} par défaut prennent en charge cela, et respecteront
@code{\textbf} (mais pas les autres styles, il n'y a pas de elzévirien
italique pour les chiffres en Computer Modern). Beaucoup d'autres
polices ont des chiffres elzévirien aussi ; parfois des options de
paquetage sont mises à disposition pour en faire le style par défaut.
Article de FAQ : @url{https://www.texfaq.org/FAQ-osf}.

@node Font sizes
@section tailles des polices
@cindex tailles de police
@cindex tailles des polices de caractères
@cindex tailles de texte

Les commandes de type de taille standardes suivantes sont pris en charge
par @LaTeX{}.  Le tableau indique le nom de la commande et taille
utilisée (en points) correspondant réellement pour la police avec les
options @samp{10pt}, @samp{11pt}, et @samp{12pt} de classe de document,
respectivement (@pxref{Document class options}).

@findex \tiny
@findex \scriptsize
@findex \footnotesize
@findex \small
@findex \normalsize
@findex \large
@findex \Large
@findex \LARGE
@findex \huge
@findex \Huge


@multitable{@code{\normalsize} (par défaut)@ @ } {24.88@ @ } {24.88@ @ } {24.88}
@headitem commande @tab @code{10pt} @tab @code{11pt} @tab @code{12pt}
@item @code{\tiny}
@tab 5 @tab 6 @tab 6
@item @code{\scriptsize}
@tab 7 @tab 8 @tab 8
@item @code{\footnotesize}
@tab 8 @tab 9 @tab  10
@item @code{\small}
@tab 9 @tab 10 @tab 10,95
@item @code{\normalsize} (par défaut)
@tab 10 @tab 10.95 @tab 12
@item @code{\large}
@tab 12 @tab 12 @tab  14,4
@item @code{\Large}
@tab 14.4 @tab 14.4 @tab 17,28
@item @code{\LARGE}
@tab 17.28 @tab 17.28 @tab 20,74
@item @code{\huge}
@tab 20,74 @tab  20,74 @tab 24,88
@item @code{\Huge}
@tab 24.88 @tab 24.88 @tab 24.88
@end multitable

@cindex déclarative, forme des commandes de contrôle de la taille de police
@cindex forme déclarative des commandes de contrôle de la taille de police
Les commandes énumérées ici sont des formes déclaratives (non des formes
par environnement), vu que c'est ainsi qu'on les utilise
typiquement. Comme dans l'exemple qui suit :

@example
\begin@{quotation@} \small
  Le Tao que l'on peut nommer n'est pas le Tao éternel.
\end@{quotation@}
@end example

@noindent
Dans ce qui précède, la portée de @code{\small} s'étend jusqu'à la fin
de l'environnement @code{quotation}.  Elle s'arrêterait également à la
prochaine commande de style ou à la fin du groupe courant, de sorte
qu'on aurait pu la mettre entre accolades @code{@{\small Ce texte est en
petits caractères.@}}.

Essayer d'utiliser ces commandes en math, comme dans @code{$\small
mv^2/2$}, donne l'avertissement @samp{LaTeX Font Warning: Command \small
invalid in math mode}, et la taille de fonte n'est pas changée. Pour
travailler avec un formule trop grande, le plus souvent la meilleure
option est d'utiliser l'environnement @code{displaymath} (@pxref{Math
formulas}), ou l'un des environnements fournis par le paquetage
@package{amsmath}.  Pour des mathématiques dans le texte, comme dans un
tableau de formules, une alternative est quelque chose du genre de
@code{@{\small $mv^2/2$@}}.  (Il arrive que @code{\scriptsize} et
@code{\scriptstyle} soient pris l'un pour l'autre. Les deux changent la
taille mais le dernier change nombre d'autres aspects conditionnant la
composition des mathématiques. @xref{Math styles}).

@cindex forme par environnement des commandes de contrôle de la taille de police
Une @dfn{forme par environnement} de chacune de ces commandes est également
définie ; par exemple, @code{\begin@{tiny@}...\end@{tiny@}}. Toutefois,
en pratique cette forme peut aisément mener à des espaces indésirables au
début et/ou à la fin de d'environnement si on n'y prête pas attention,
ainsi on risque en général moins de faire d'erreur si on s'en tient à la
forme déclarative.

(Digression : techniquement, vu la façon dont @LaTeX{} définit
@code{\begin} et @code{\end}, presque toutes les commandes qui ne
prennent pas d'argument on une forme par environnement. Mais dans
presque tous les cas ce serait juste une source de confusion de
l'utiliser. La raison pour mentionner spécifiquement la forme par
environnement des déclarations de taille de police est que cet usage
particulier n'est pas rare).

@node Low-level font commands
@section commandes de fontes de bas niveau
@cindex commandes de fontes de bas niveau
@cindex commandes de fontes, de bas niveau

Ces commandes sont principalement destinés aux auteurs de macros et
paquetages. Les commandes indiquées ici sont seulement un sous-ensemble
de celles disponibles.
@c xx but it should be complete
@c xx something about ultimately reading ENCFAM.fd?

@table @code
@anchor{low level font commands fontencoding}
@item \fontencoding@{codage@}
@findex \fontencoding
Sélectionne le codage de police, le codage de la police utilisée en
sortie. Il y a un grand nombre de codages valides. Les plus usuels sont
@code{OT1}, le codage original de D.@: Knuth pour la police Computer
Modern (la police par défaut), et @code{T1}, également désigné par
codage Cork, qui prend en charge les caractères accentués utilisés par
les langues européennes les plus parlées (allemand, français, italien,
polonais et d'autres encore), ce qui permet à @TeX{} de faire la césure
des mots contenant des lettres accentuées. Pour plus d'information, voir
@url{https://ctan.org/pkg/encguide}.

@anchor{low level font commands fontfamily}
@item \fontfamily@{@var{famille}@}
@findex \fontfamily
@cindex famille de polices
@cindex polices, catalogue
Sélectionne la famille de polices.  La page web
@url{https://www.tug.dk/FontCatalogue/} donne un moyen de naviguer
facilement à travers un grand nombre des polices utilisées avec
@LaTeX{}.  Voici des exemples de quelques-unes des familles les plus
usuelles :

@multitable {font} {Computer Modern Typewriter @identity{XXXX}}
@item @code{pag}
@tab @identity{Avant Garde}
@item @code{fvs}
@tab @identity{Bitstream Vera Sans}
@item @code{pbk}
@tab @identity{Bookman}
@item @code{bch}
@tab @identity{Charter}
@item @code{ccr}
@tab @identity{Computer Concrete}
@item @code{cmr}
@tab @identity{Computer Modern}
@item @code{cmss}
@tab @identity{Computer Modern Sans Serif}
@item @code{cmtt}
@tab @identity{Computer Modern Typewriter}
@item @code{pcr}
@tab @identity{Courier}
@item @code{phv}
@tab @identity{Helvetica}
@item @code{fi4}
@tab @identity{Inconsolata}
@item @code{lmr}
@tab @identity{Latin Modern}
@item @code{lmss}
@tab @identity{Latin Modern Sans}
@item @code{lmtt}
@tab @identity{Latin Modern Typewriter}
@item @code{pnc}
@tab @identity{New Century Schoolbook}
@item @code{ppl}
@tab @identity{Palatino}
@item @code{ptm}
@tab @identity{Times}
@item @code{uncl}
@tab @identity{Uncial}
@item @code{put}
@tab @identity{Utopia}
@item @code{pzc}
@tab @identity{Zapf Chancery}
@end multitable

@anchor{low level font commands fontseries}
@item \fontseries@{@var{série}@}
@findex \fontseries
@cindex séries de polices
Sélectionne une série de police. Une @dfn{série} combine une
@dfn{graisse} et une @dfn{largeur}. Typiquement, une police prend en
charge seulement quelques-unes des combinaisons possibles. Les
combinaisons de valeurs de séries comprennent notamment :

@multitable {@ @ } {Moyen (normal)@ @ }
@item @code{m}
@tab Moyen (normal)
@item @code{b}
@tab Gras
@item @code{c}
@tab Condensé
@item @code{bc}
@tab Condensé Gras
@item @code{bx}
@tab Gras étendu
@end multitable


@cindex graisses de police
Les valeurs possibles de graisses, considérées individuellement, sont :

@multitable {@ @ } {Demi-gras --- m pour medium en anglais}
@item @code{ul}
@tab Ultra maigre
@item @code{el}
@tab Extra maigre
@item @code{l}
@tab Maigre --- @samp{l} pour @i{light} en anglais
@item @code{sl}
@tab Semi maigre
@item @code{m}
@tab Demi-gras --- @samp{m} pour @i{medium} en anglais
@item @code{sb}
@tab Semi gras
@item @code{b}
@tab Gras --- @samp{b} pour @i{bold} en anglais
@item @code{eb}
@tab Extra gras
@item @code{ub}
@tab Ultra gras
@end multitable


@cindex Largeurs de police
La valeurs possibles de largeur, considérées individuellement sont :

@multitable {@ @ } {Extra condensé--}
@item @code{uc}
@tab Ultra condensé
@item @code{ec}
@tab Extra condensé
@item @code{c}
@tab Condensé
@item @code{sc}
@tab Semi condensé
@item @code{m}
@tab Moyen
@item @code{sx}
@tab Semi étendu
@item @code{x}
@tab étendu
@item @code{ex}
@tab Extra étendu
@item @code{ux}
@tab Ultra étendu
@end multitable

Lorsqu'on forme la chaîne de caractères @var{série} à partir de la
graisse et de la largeur, on laisse tomber le @code{m} qui signifie
médium concernant la graisse ou la largeur, auquel cas on en utilise
juste un (@samp{@code{m}}).

@anchor{low level font commands fontshape}
@item \fontshape@{@var{allure}@}
@findex \fontshape
@cindex allure de police
Sélectionne l'allure de police. Les allures valides sont :

@multitable {@ @ } {Italique droit --- ui pour @identity{upright italic} en anglais}
@item @code{n}
@tab  Droit (normal)
@item @code{it}
@tab Italique
@item @code{sl}
@tab Incliné (oblique) --- @samp{sl} pour @i{@identity{slanted}} en anglais.
@item @code{sc}
@tab Petites capitales
@item @code{ui}
@tab Italique droit --- @samp{ui} pour @i{@identity{upright italic}} en anglais
@item @code{ol}
@c crédit : Jean-Côme Charpentier, cf. https://groups.google.com/g/fr.comp.text.tex/c/EV0nUu6DwoY
@tab Détouré --- @samp{ol} pour @i{@identity{outline}} en anglais.
@end multitable

Les deux dernières allures ne sont pas disponibles pour la plupart des
familles de polices, et les petites capitales sont aussi souvent
absentes.


@anchor{low level font commands fontsize}
@item \fontsize@{@var{taille}@}@{@var{interligne}@}
@findex \fontsize
@findex \baselineskip
Réglage de la taille de police et de l'espacement d'interligne. L'unité
des deux paramètres est par défaut le point (@code{pt}). L'espacement
d'interligne est l'espace vertical nominal entre ligne, de ligne de base
à ligne de base. Il est stocké dans le paramètre
@code{\baselineskip}. La valeur par défaut de @code{\baselineskip} pour
la police Computer Modern est 1,2 fois le @code{\fontsize}.  Changer
directement @code{\baselineskip} est déconseillé dans la mesure où sa
valeur est réinitialisée à chaque fois qu'un changement de taille se
produit ; au lieu de cela utilisez @code{\baselinestretch}
(@pxref{\baselineskip & \baselinestretch}).

@anchor{low level font commands linespread}
@item \linespread@{@var{facteur}@}
@findex \linespread
Équivalent à @code{\renewcommand@{\baselinestretch@}@{@var{facteur}@}},
et donc doit être suivi de @code{\selectfont} pour prendre
effet. @xref{\baselineskip & \baselinestretch}, pour plus ample
information.

@item \selectfont
@anchor{low level font commands selectfont}
@findex \selectfont
Les modifications apportées en appelant les commandes de fonte
décrites ci-dessus n'entrent en vigueur qu'après que @code{\selectfont}
est appelé, comme dans
@code{\fontfamily@{@var{nomfamille}@}\selectfont}. La plupart du temps
il est plus pratique de mettre cela dans une macro :
@code{\newcommand*@{\mapolice@}@{\fontfamily@{@var{nomfamille}@}\selectfont@}}@*
(@pxref{\newcommand & \renewcommand}).


@item \usefont@{@var{codage}@}@{@var{famille}@}@{@var{série}@}@{@var{allure}@}
@anchor{low level font commands usefont}
@findex \usefont
Revient à la même chose que d'invoquer @code{\fontencoding},
@code{\fontfamily}, @code{\fontseries} et @code{\fontshape} avec les
paramètres donnés, suivi par @code{\selectfont}. Par exemple :

@example
\usefont@{ot1@}@{cmr@}@{m@}@{n@}
@end example

@end table


@node Layout
@chapter Mise en page
@cindex commandes de mise en page

Commandes pour contrôler la disposition générale de la page.

@menu
* \onecolumn :: Utiliser la disposition à une colonne.
* \twocolumn :: Utiliser la disposition à deux colonnes.
* \flushbottom :: Faire toutes les pages de texte de la même hauteur.
* \raggedbottom :: Autoriser les pages de texte à être de hauteurs différentes.
* Paramètres de mise en page: Page layout parameters. @code{\headheight} @code{\footskip}.
* \baselineskip & \baselinestretch::           Interlignes.
* Flottants: Floats.                  Figures, tableaux, etc.
@end menu


@node \onecolumn
@section @code{\onecolumn}
@findex \onecolumn
@cindex sortie à une colonne

La déclaration @code{\onecolumn} commence une nouvelle page et produit
une sortie à colonne unique. C'est la valeur par défaut.

@node \twocolumn
@section @code{\twocolumn}
@findex \twocolumn
@cindex texte sur plusieurs colonnes
@cindex sortie à deux colonnes

Synopsis :

@example
\twocolumn [@var{texte1col préliminaire}]
@end example

Commence une nouvelle page et produit une sortie en deux colonnes. Si on
a passé l'option de classe @code{twocolumn} au document alors c'est le
comportement par défaut (@pxref{Document class options}). Cette commande
est fragile (@pxref{\protect}).

Si l'argument optionnel @var{texte1col préliminaire} est présent, il est
composé dans le mode à une colonne avant que la composition à deux
colonnes ne commence.

Les paramètres ci-après contrôlent la composition de la sortie en deux
colonnes :

@ftable @code
@item \columnsep
@anchor{twocolumn columnsep}
La distance entre les colonnes. Vaut 35pt par défaut. Changer la valeur
avec une commande telle que
@code{\setlength@{\columnsep@}@{40pt@}}. Vous devez faire le changement
avant que le mode en deux colonnes ne commence ; le préambule est
une bonne place pour le faire.

@item \columnseprule
@anchor{twocolumn columnseprule}
La largeur du filet entre les colonnes. La valeur par défaut est 0pt, de
sorte qu'il n'y a pas de filet. Autrement, le filet apparaît à mi-chemin
entre les deux colonnes. Changez la valeur avec une commande telle que
@code{\setlength@{\columnseprule@}@{0.4pt@}}, avant que le mode en deux
colonnes ne commence.

@item \columnwidth
@anchor{twocolumn columnwidth}
La largeur d'une colonne. En mode à une colonne ceci vaut
@code{\textwidth}. En mode à deux colonnes par défaut @LaTeX{} règle la
largeur de chacune des deux colonnes, @code{\columnwidth}, à la moitié
de @code{\textwidth} moins @code{\columnsep}.

@end ftable

Dans un document en deux colonnes, les environnements étoilés
@code{table*} et @code{figure*} s'étendent en largeur sur deux colonnes,
alors que les environnements non étoilés @code{table} et @code{figure}
n'occupe qu'une colonne (@pxref{figure} et @pxref{table}). @LaTeX{}
place les flottants étoilés au sommet d'une page.
Les paramètres ci-après contrôlent le comportement des flottants en cas
de sortie à deux colonnes :

@ftable @code
@item \dbltopfraction
@anchor{twocolumn dbltopfraction}
Fraction maximale au sommet d'une page sur deux colonnes qui peut être
occupée par des flottants s'étendant sur deux colonnes en largeur. Par
défaut vaut 0,7, ce qui signifie que la hauteur d'un environnement
@code{table*} ou @code{figure*} ne doit pas excéder
@code{0.7\textheight}. Si la hauteur de vos environnement flottant
excède cela alors vous pouvez prendre l'une des actions suivante pour
l'empêcher de flotter jusqu'à la fin du document :

@itemize @value{ITEM_BULLET2}
@item
Utiliser le spécificateur de localisation @code{[tp]} pour dire à
@LaTeX{} d'essayer de placer le flottant volumineux sur une page dédiée,
ou de même au sommet d'une page.

@item
Utiliser le spécificateur de localisation @code{[t!]} pour l'emporter
sur l'effet de @code{\dbltopfraction} pour ce flottant en particulier.

@item
Augmenter la valeur de @code{\dbltopfraction} à un nombre de grandeur
adéquate, pour éviter de faire flotter les pages si tôt.
@end itemize


Vous pouvez le redéfinir, comme dans
@code{\renewcommand@{\dbltopfraction@}@{0.9@}}.

@item \dblfloatpagefraction
@anchor{twocolumn dblfloatpagefraction}
Pour une page de flottants s'étendant sur deux colonnes en largeur,
c'est la fraction minimum de la page qui doit être occupée par les
flottants. La valeur par défaut de @LaTeX{} est @samp{0.5}. Se change
avec @code{\renewcommand}.

@item \dblfloatsep
@anchor{twocolumn dblfloatsep}
Sur une page de flottants s'étendant sur deux colonnes en largeur, cette
longueur est la distance entre les flottants à la fois en haut et en bas
de la page. Par défaut vaut @samp{12pt plus2pt minus2pt} pour des
documents en @samp{10pt} ou @samp{11pt}, et @samp{14pt plus2pt minus4pt}
pour @samp{12pt}.


@item \dbltextfloatsep
@anchor{twocolumn dbltextfloatsep}
Cette longueur est la distance entre un flottant multi-colonnes en haut
ou en bas d'une page et le texte principal. Par défaut vaut @samp{20pt
plus2pt minus4pt}.

@item \dbltopnumber
@anchor{twocolumn dbltopnumber}
Sur une page de flottant avec des flottants large de deux colonnes, ce
compteur donne le nombre maximal de flottants autorisé au sommet de la
page.  La valeur par défaut de @LaTeX{} est @code{2}.
@end ftable

@c From egreg at http://tex.stackexchange.com/a/142232/339
L'exemple suivant utilise l'argument optionnel de @code{\twocolumn} pour
crée un titre s'étendant sur les deux colonnes du document article :

@example
\documentclass[twocolumn]@{article@}
\newcommand@{\authormark@}[1]@{\textsuperscript@{#1@}@}
\begin@{document@}
\twocolumn[@{% au sein de cet argument optionnel, du texte en une colonne
  \centering
  \LARGE Le titre \\[1.5em]
  \large Auteur Un\authormark@{1@},
         Auteur Deux\authormark@{2@},
         Auteur Trois\authormark@{1@} \\[1em]
  \normalsize
  \begin@{tabular@}@{p@{.2\textwidth@}@@@{\hspace@{2em@}@}p@{.2\textwidth@}@}
    \authormark@{1@}Departement Un  &\authormark@{2@}Department Deux \\
     École Un                   &École Deux
  \end@{tabular@}\\[3em] % espace sous la partie titre
  @}]

Le texte en deux colonnes est ici.
@end example


@node \flushbottom
@section @code{\flushbottom}

@findex \flushbottom

Rend toutes les pages du document qui suivent cette déclaration de la
même hauteur, en dilatant l'espace vertical là où c'est nécessaire pour
remplir le page. On fait cela le plus souvent pour des documents en
recto-verso car les différences entre pages vis-à-vis peuvent être
flagrantes.

Si @TeX{} ne parvient pas à dilater de manière satisfaisante l'espace
vertical dans une page alors on obtient un message du genre de
@samp{Underfull \vbox (badness 10000) has occurred while \output is
active}.  Lorsque on obtient cela, une option est de passer à
@code{\raggedbottom} (@pxref{\raggedbottom}).  Alternativement, vous
pouvez ajuster la @code{textheight} pour rendre compatibles des pages,
ou vous pouvez ajouter de l'espace vertical élastique entre les lignes
ou entre les paragraphes, comme dans @code{\setlength@{\parskip@}@{0ex
plus0.1ex@}}.  L'option ultime est, dans une phase finale de rédaction,
d'ajuster les hauteurs de page individuellement
(@pxref{\enlargethispage}).

L'état @code{\flushbottom} est la valeur par défaut seulement lorsque on
sélectionne l'option de classe @code{twocolumn} (@pxref{Document class
options}), et pour les indexes fabriqués avec @code{makeidx}.

@c  Cette commande est fragile (@pxref{\protect})

@node \raggedbottom
@section @code{\raggedbottom}
@findex \raggedbottom
@cindex étirement, omettre l'étirement vertical

La déclaration @code{\raggedbottom} rend toutes les pages qui la suivent
de la hauteur naturelle de la matière sur cette page ; aucune des
longueurs élastiques n'est étirée. Ainsi, sur un document en recto-verso
les pages en vis-à-vis sont potentiellement de hauteurs
différentes. Cette commande peut être mise n'importe où dans le corps du
document. @xref{\flushbottom}.

C'est le comportement par défaut à moins qu'on sélectionne l'option
@code{twocolumn} de classe de document (@pxref{Document class options}).


@node Page layout parameters
@section Paramètres de mise en page

@cindex page, paramètres de mise en page
@cindex paramètres, la mise en page
@cindex mise en page, les paramètres de
@cindex en-tête, des paramètres pour
@cindex bas de page, des paramètres pour
@cindex en-tête et pied de page en cours

@ftable @code
@item \columnsep
@itemx \columnseprule
@itemx \columnwidth
@findex \columnsep
@findex \columnseprule
@findex \columnwidth
@anchor{page layout parameters columnsep}
@anchor{page layout parameters columnseprule}
@anchor{page layout parameters columnwidth}
La distance entre les deux colonnes, la largeur d'un filet entre les
colonnes, et la largeur des colonnes, lorsque l'option de classe de
document @code{twocolumn} est en vigueur (@pxref{Document class
options}).  @xref{\twocolumn}.

@item \headheight
@findex \headheight
@anchor{page layout parameters headheight}
Hauteur de la boîte qui contient l'en-tête de page en cours. La valeur
par défaut pour les classes @code{article}, @code{report}, et
@code{book} est @samp{12pt} quelle que soit la taille de la police.

@item \headsep
@findex \headsep
@anchor{page layout parameters headsep}
La distance verticale entre le bas de la ligne d'en-tête et le haut du
texte principal. La valeur par défaut est @samp{25pt}. Dans la classe
@code{book} la valeur par défaut est @samp{0.25in} pour un document
réglé en 10pt, et @samp{0.275in} pour un document en 11pt ou 12pt.

@item \footskip
@findex \footskip
@anchor{page layout parameters footskip}
Distance de la ligne de base de la dernière ligne de texte à la ligne de
base du pied de page. La valeur par défaut dans les classes
@code{article} et @code{report} est @samp{30pt}. Dans la classe
@code{book} la valeur par défaut est @samp{0.35in} pour les documents
réglés en 10pt, @samp{0.38in} en 11pt, et @samp{30pt} en 12pt.

@item \linewidth
@findex \linewidth
@anchor{page layout parameters linewidth}
Largeur de la ligne actuelle, diminuée pour chaque @code{list} imbriquée
(@pxref{list}). c.-à-d.@: que la valeur nominale @code{\linewidth} vaut
@code{\textwidth} mais que pour chaque liste imbriquée la largeur
@code{\linewidth} est diminuée de la somme de @code{\leftmargin} et
@code{\rightmargin} pour cette liste (@pxref{itemize}).
@c La valeur par défaut varie en fonction de la taille de la police, la
@c largeur du papier, le mode à deux colonnes, etc. Pour un document de
@c classe @code{article} en taille de police @samp{10pt}, elle vaut
@c @samp{345pt} ; dans le mode à deux colonnes, elle passe à
@c @samp{229.5pt}.

@item \marginparpush
@itemx \marginsep
@itemx \marginparwidth
@findex \marginparpush
@findex \marginsep
@findex \marginparwidth
@anchor{page layout parameters marginparpush}
@anchor{page layout parameters marginsep}
@anchor{page layout parameters marginparwidth}
L'espace vertical minimal entre deux notes marginales, l'espace
horizontal entre le corps du texte et les notes marginales, et la
largeur horizontale des notes.

Normalement les notes en marginales apparaissent à l'extérieur de la
page, mais la déclaration @code{\reversemarginpar} change cela (et
@code{\normalmarginpar} le rétablit).

La valeur par défaut pour @code{\marginparpush} à la fois dans un
document de classe @code{book} ou @code{article} est : @samp{7pt} si le
document est réglé à 12pt, et @samp{5pt} s'il l'est à 11pt ou 10pt.

Pour @code{\marginsep}, dans la classe @code{article} la valeur par
défaut est @samp{10pt} sauf si le document est réglé à 10pt et en mode en
deux-colonnes où la valeur par défaut est @samp{11pt}.

Pour @code{\marginsep} dans la classe @code{book} la valeur par défaut
est @samp{10pt} en mode deux-colonnes, et @samp{7pt} en mode
mono-colonne.

Pour @code{\marginparwidth} aussi bien dans les classes @code{book} que
@code{article}, en mode deux-colonnes la valeur par défaut est 60% ou
@code{\paperwidth @minus{} \textwidth}, alors qu'en mode monocolonne
c'est 50% de cette distance.

@item \oddsidemargin
@itemx \evensidemargin
@findex \oddsidemargin
@findex \evensidemargin
@anchor{page layout parameters oddsidemargin}
@anchor{page layout parameters evensidemargin}
@cindex marge gauche
La @dfn{marge gauche} est la bande entre le bord gauche de la page et le
corps du texte.

@cindex marge gauche nominale
La @dfn{marge gauche nominale} est la marge gauche lorsque les
paramètres @code{\oddsidemargin} et @code{\eventsidemargin} sont à
@samp{0pt}. Sa frontière est une ligne verticale imaginaire située
à une distance de @code{1in + \hoffset} du bord gauche de la page en
allant vers le côté droit. La longueur @code{\hoffset} vaut @code{0pt},
ce paramètre est obsolète il servait dans les années 1980, quand le
système @TeX{} a été conçu, à rattraper les défauts des imprimantes de
l'époque dont le placement horizontal de la page par rapport à la
feuille de papier pouvait se dérégler.

La longueur @code{\oddsidemargin} est la distance entre le bord gauche
du texte et la frontière de la marge gauche nominale pour les pages de
numéro impair dans les documents en recto-verso, et pour toutes les
pages sinon pour les documents en recto simple. La longueur
@code{\evensidemargin} est la distance entre le bord gauche du texte et
la frontière de la marge gauche nominale pour les pages de numéro pair
dans les documents en recto-verso.

En d'autres termes @code{\oddsidemargin} ou @code{\evensidemargin}
donnent la différence entre la largeur de la marge gauche réel et la
marge gauche nominale. Ces distances @code{\oddsidemargin} et
@code{\evensidemargin} sont donc signées vers le coté droit, c'est à
dire qu'une valeur positive indique que la marge gauche réelle est plus
large que la marge gauche nominale, alors qu'une valeur négative indique
qu'au contraire elle est plus étroite.

Dans un document en recto-verso le @dfn{côté intérieur} de la page est
le côté gauche pour les pages de numéro impair, et le côté droit pour
les pages de numéro pair. Le @dfn{côté extérieur} est le côté opposé au
côté intérieur : la longueur @code{\oddsidemargin} règle donc la
position de la marge intérieure des pages de numéro impair, alors que
@code{\evensidemargin} règle la position la marge extérieur des pages de
numéro pair.

Pour une marge intérieure de 4cm dans un document en recto-verso, mettre
le code suivant dans le préambule :

@example
\evensidemargin\dimexpr\paperwidth-\textwidth-1in-4cm
\oddsidemargin\dimexpr4cm-1in
@end example

Vice-versa, pour une marge extérieure de 5cm dans un document en
recto-verso, mettre le code suivant dans le préambule :

@example
\evensidemargin\dimexpr5cm-1in
\oddsidemargin\dimexpr\paperwidth-\textwidth-1in-5cm
@end example

@item \paperheight
@anchor{page layout parameters paperheight}
La hauteur du papier, à ne pas confondre avec la hauteur de la zone
d'impression.  Elle est normalement réglée avec une option de classe de
document, comme dans @code{\documentclass[a4paper]@{article@}}
(@pxref{Document class options,Options de classe de document}).

@item \paperwidth
@anchor{page layout parameters paperwidth}
La largeur du papier, à ne pas confondre avec la largeur de la zone
d'impression.  Elle est normalement réglée avec une option de classe de
document, comme dans @code{\documentclass[a4paper]@{article@}}
(@pxref{Document class options,Options de classe de document}).

@item \textheight
@anchor{page layout parameters textheight}
La hauteur verticale normale du corps de la page. Si le document réglé à
une taille de police nominale de 10pt, alors pour un document de classe
@code{article} ou @code{report}, elle vaut @samp{43\baselineskip} ; pour
une classe @code{book}, elle vaut @samp{41\baselineskip}.  Pour 11pt,
c'est @samp{38\baselineskip} pour toutes les classes de document. Pour
@samp{12pt} c'est @samp{36\baselineskip} pour toutes les classes aussi.

@item \textwidth
@anchor{page layout parameters textwidth}
La largeur horizontale totale de l'ensemble du corps de la page. Pour un
document de classe @code{article} ou @code{report}, elle vaut
@samp{345pt} à 10pt de taille de police, @samp{360pt} à
11pt, et @samp{390pt} à 12pt. Pour un document
@code{book}, elle veut @samp{4.5in} à 10pt et @samp{5in} à
11pt ou 12pt.

En sortie multi-colonne, @code{\textwidth} reste de la largeur de tout
le corps de la page, tandis que @code{\columnwidth} est la largeur d'une
colonne (@pxref{\twocolumn}).

Dans les listes (@pxref{list}), @code{\textwidth} demeure la largeur du
corps de la page entière (et @code{\columnwidth} est la largeur d'une
colonne entière), alors que @code{\linewidth} peut diminuer au sein de
listes imbriquées.

À l'intérieur d'une minipage (@pxref{minipage} ) ou @code{\parbox}
(@pxref{\parbox}), tous les paramètres liés à la largeur sont mis à la
largeur spécifiée, et de reviennent à leurs valeurs normales à la fin du
@code{minipage} ou @code{\parbox}.

@item \hsize
@findex \hsize
@anchor{page layout parameters hsize}
Par souci d'exhaustivité : @code{\hsize} est le paramètre @TeX{}
primitif utilisé lorsque le texte est divisé en lignes. Il ne devrait
pas être utilisé dans des documents @LaTeX{} en conditions normales.

@item \topmargin
@findex topmargin
@anchor{page layout parameters topmargin}
@cindex marge supérieure
La @dfn{marge supérieure} est la bande entre le bord supérieur de la page et le
bord supérieure de l'en-tête de page.

@cindex marge supérieure nominale
La @dfn{marge supérieure nominale} est la marge supérieur lorsque
@code{\topmargin} vaut @samp{0pt}. Sa frontière est une ligne
horizontale imaginaire située à une distance de @code{1in + \voffset} du
bord supérieur de la page en allant vers le bas. La longueur
@code{\voffset} vaut @code{0pt}, ce paramètre est obsolète il servait
dans les années 1980, quand le système @TeX{} a été conçu, à rattraper
les défauts des imprimantes de l'époque dont le placement vertical de la
page par rapport à la feuille de papier pouvait se dérégler.

La distance @code{\topmargin} sépare le haut de l'en-tête de page de la
frontière de la marge supérieure nominale. Elle est signée vers le bas,
c'est à dire que quand @code{\topmargin} est positif la marge supérieure
est plus large que la marge supérieure nominale, et que s'il est négatif
elle est au contraire plus étroite. En d'autres termes @code{\topmargin}
est la différence entre la largeur de la marge supérieure réelle et la
marge supérieure nominale.

L'espace le haut de la page @TeX{} et le haut du corps de texte est
@code{1in + \voffset + \topmargin + \headheight + \headsep}. La marge
inférieure vaut donc @code{\paperheight -\textheight -\footskip - 1in -
\voffset - \topmargin - \headheight - \headsep}.

@item \topskip
@findex \topskip
@anchor{page layout parameters topskip}
La distance minimale entre le sommet du corps de la page et la ligne de base de
la première ligne de texte. Pour les classes standard, la valeur par défaut est la
même que la taille de la police, par exemple, @samp{10pt} à @samp{10pt}.

@end ftable

@node \baselineskip & \baselinestretch
@section @code{\baselineskip} & @code{\baselinestretch}

@anchor{\baselineskip}
@anchor{\baselinestretch}
@findex \baselineskip
@findex \baselinestretch
@findex \linespread
@cindex espace entre les lignes
@cindex interligne, espace
@cindex double espacement

La variable @code{\baselineskip} est une longueur élastique
(@pxref{Lengths}).  Elle donne l'@dfn{interligne}, la distance normale
entre les lignes d'un paragraphe, de ligne de base à ligne de base.

D'ordinaire un auteur de documents ne change pas directement
@code{\baselineskip} en écrivant. Au lieu de cela, l'interligne est
réglé par la commande de bas niveau de sélection de fonte
@code{\fontsize} (@pxref{low level font commands fontsize}).  La valeur
de @code{\baselineskip} est réinitialisée chaque fois qu'un changement
de fonte survient et ainsi tout changement direct de @code{\baselineskip}
serait anéanti dès la prochaine commutation de fonte. Pour la façon
d'influencer l'espacement des lignes, voir la discussion de
@code{\baselinestretch} ci-dessous.

D'habitude, une taille de fonte et un interligne sont assignés par
l'auteur de la fonte. Ces nombres sont nominaux au sens où si, par
exemple, un fichier de style de fonte comprend la commande
@code{\fontsize@{10pt@}@{12pt@}} alors cela ne veut pas dire que les
caractères dans la fonte font 10@dmn{pt} de haut ; par exemple, les
parenthèses et les capitales accentuées pourraient être plus hautes. Non
plus cela ne signifie que si les lignes sont espacées de moins de
12@dmn{pt} alors elles risquent de se toucher. Ces nombres sont plutôt
des jugements typographiques.  (Souvent, le @code{\baselineskip} est
environ plus grand de 20@dmn{%} que la taille de fonte).

@c adapted from FAQ
Le @code{\baselineskip} n'est pas une propriété de chaque ligne, mais du
paragraphe entier. Il en résulte, que du texte de grande taille au milieu
d'un paragraphe, tel qu'un simple @code{@{\Huge Q@}}, est serré sur sa
ligne.  @TeX{} s'assure qu'il ne racle pas sur la ligne du dessus mais
il ne change par le @code{\baselineskip} pour que cette ligne-là soit
surplombée d'un espace supplémentaire. Pour résoudre ce problème,
utilisez un @code{\strut} (@pxref{\strut}).

La valeur de @code{\baselineskip} que @TeX{} utilise pour les paragraphes
est celle en vigueur à l'endroit de la commande ou ligne à blanc qui
termine l'unité de paragraphe. Ainsi, si un document contient le
paragraphe ci-dessous alors ses lignes seront recroquevillées ensemble,
comparées au lignes des paragraphes alentour.

@c Adapted from B Beeton's "Lapses in TeX" TB 42:1 p 13.
@example
Beaucoup de gens considèrent les sauts de page entre du texte est une
équation affichée comme du mauvais style, alors qu'en fait l'affiche
fait partie du paragraphe.  Étant donné que l'affiche ci-dessous est en
taille de fonte footnotesize, l'entièreté du paragraphe a un espcement
d'interligne correspondant à cette taille. @{\footnotesize $$a+b = c$$@}
@end example

@findex \lineskip
@findex \lineskiplimit
@findex \prevdepth
Le procédé de fabrication des paragraphes est que quand une nouvelle
ligne est ajoutée, si la somme de la profondeur de la ligne précédente
et de la hauteur de la nouvelle ligne est inférieure à
@code{\baselineskip} alors @TeX{} insère une glue verticale en quantité
suffisante pour faire la différence.  Il y a deux points délicats. Le
premier est que au cas où les lignes seraient trop proches l'une de
l'autre, plus proches que @code{\lineskiplimit}, alors @TeX{} au lieu de
cela utilise @code{\lineskip} comme la glue d'interligne.  Le second est
que @TeX{} n'utilise pas vraiment la profondeur de la ligne
précédente. Au lieu de cela il utilise @code{\prevdepth}, ce qui
d'ordinaire contient cette profondeur. Mais au début d'un paragraphe,
(ou de toute liste verticale) ou juste après un filet, @code{\prevdepth}
a la valeur de -1000@dmn{pt} et cette valeur spéciale dit à @TeX{} de ne
pas insérer de glue d'interligne au démarrage du paragraphe.

Dans les classes standardes @code{\lineskiplimit} vaut 0@dmn{pt} et
@code{\lineskip} vaut 1@dmn{pt}. Selon le procédé exposé dans le
paragraphe précédent, la distance entre les lignes peut approcher zéro,
mais si elle devient zéro (ou moins que zéro) alors un écartement de
1@dmn{pt} est appliqué aux lignes.

Il arrive qu'un auteur doive, à des fins d'édition, mettre le document
en double interligne, ou bien en interligne un-et-demi. La façon
correcte d'influencer la distance d'interligne est au travers de
@code{\baselinestretch} qui dilate @code{\baselineskip}, et a une valeur
par défaut de @samp{1.0}.  C'est une commande, et non une longueur,
ainsi on change le facteur d'échelle comme dans
@code{\renewcommand@{\baselinestretch@}@{1.5@}\selectfont}.

La façon la plus directe de changer l'interligne pour tout un document
est de placer @code{\linespread@{@var{facteur}@}} dans le préambule.
Pour un double espacement, prenez @var{facteur} à @samp{1.6} et pour un
espacement un-et-demi utilisez @samp{1.3}.  Ces nombres sont
approximatifs : par exemple puisque @code{\baselineskip} vaut environ
1,2 fois la taille de fonte, le multiplier par 1,6 donne un rapport
entre l'interligne et la taille de fonte d'environ 2.  (La commande
@code{\linespread} est définie comme
@code{\renewcommand@{\baselinestretch@}@{@var{facteur}@}} de sorte que
son effet n'entre en vigueur que lorsqu'un réglage de fonte
survient. Mais cela a toujours lieu au démarrage d'un document, de sorte
que là vous n'avez pas besoin de la faire suivre d'un
@code{\selectfont}).

@PkgIndex{setspace}
Une approche plus simple est fournie par le paquetage @package{setspace}.
Voici un exemple de base :

@example
\usepackage@{setspace@}
\doublespacing  % ou \onehalfspacing pour 1,5
@end example

@noindent
Placé dans le préambule ces déclarations démarreront le document dès le
début avec ces réglages de taille. Mais vous pouvez aussi les utiliser
dans le corps du document pour changer l'espacement à partir de ce
point, et par conséquent il y a @code{\singlespacing} pour revenir à
l'espacement normal. Dans le corps du document, une pratique meilleure
qu'utiliser ces déclarations est d'utiliser les environnements, tels que
@code{\begin@{doublespace@} ... \end@{doublespace@}}.  Ce paquetage
fournit aussi des commandes pour faire un espacement quelconque :
@code{\setstretch@{@var{factor}@}} et
@code{\begin@{spacing@}@{@var{factor}@} ... \end@{spacing@}}.
Ce paquetage conserve également un interligne simple là où c'est
typiquement désirable, comme dans les notes de bas de page et dans les
légendes de figure. Voir la documentation du paquetage.


@node Floats
@section Flottants

Certains éléments typographiques, tels que les figures et les tableaux,
ne peuvent pas être à cheval sur plusieurs pages. Ils doivent être
composés en dehors du flux normal du texte, par exemple flottant au
sommet d'une page ultérieure

@LaTeX{} sait gérer plusieurs classes de matière flottante. Il y a deux
classes définies par défaut, @code{figure} (@pxref{figure}) et
@code{table} (@pxref{table}), mais vous pouvez créer une nouvelle
classes avec le paquetage @package{float}.

Au sein d'une même classe flottante @LaTeX{} respecte l'ordre, de sorte
que la première figure dans le code source d'un document est toujours
composée avant la deuxième figure.  Cependant, @LaTeX{} peut mélanger
les classes, ainsi il peut se produire qu'alors que le premier tableau
apparaît dans le code source avant la première figure, il apparaisse
après elle dans le fichier de sortie.

Le placement des flottants est l'objet de paramètres, donnés ci-dessous,
qui limitent le nombre de flottants pouvant apparaître au sommet d'une
page, et au bas de page, etc. Si à cause d'un nombre trop important de
flottants mis en queue ces limites les empêchent de tenir tous dans une
seule page, alors @LaTeX{} place ce qu'il peut et diffère le reste à la
page suivante. De la sorte, les flottants peuvent être composés loin de
leur place d'origine dans le code source.  En particulier, un flottant
qui prend beaucoup de place peut migrer jusqu'à la fin du document. Mais
alors, parce que tous les flottants dans une classe doivent apparaître
dans le même ordre séquentiel, tous les flottants suivant dans cette
classe apparaissent aussi à la fin.

@cindex placement des flottants
@cindex spécificateur, placement de flottants
En plus de changer les paramètres, pour chaque flottant vous pouvez
peaufiner l'endroit où l'algorithme de placement des flottants essaie de
le placer en utilisant sont argument @var{placement}.  Les valeurs
possibles sont une séquence des lettres ci-dessous. La valeur par
défaut pour à la fois @code{figure} et @code{table}, dans les deux
classes de document @code{article} et @code{book}, est @code{tbp}.

@table @code
@item t
(pour Top) --- au sommet d'une page de texte.

@item b
(pour Bottom) --- au bas d'une page de texte.  (Cependant, @code{b} n'est pas
autorisé avec des flottants en pleine-largeur (@code{figure*}) en cas de
sortie à double-colonne. Pour améliorer cela, on peut utiliser les
paquetages @file{stfloats} ou @file{dblfloatfix}, mais voyez la
discussion sur les avertissements dans la FAQ :
@url{http://www.tex.ac.uk/cgi-bin/texfaq2html?label=2colfloat}.

@item h
(pour « @identity{Here} », c.-à-d.@:« Ici » en anglais) --- à la position du texte
où l'environnement @code{figure} apparaît. Cependant, @code{h} n'est pas
autorisé en soi-même ; @code{t} est ajouté automatiquement.

@cindex ici, placer les flottants
@PkgIndex{float}
Pour forcer à tout prix un flottant à apparaître « ici », vous pouvez
charger le paquetage @package{float} et le spécificateur @code{H} qui y est
défini.  Pour plus ample discussion, voir l'entrée de FAQ à
@url{http://www.tex.ac.uk/cgi-bin/texfaq2html?label=figurehere}.

@item p
@cindex page de flottants
(pour Page de flottants) --- sur une @dfn{page de flottants} séparée, qui est une
page ne contenant pas de texte, seulement des flottants.

@item !
Utilisé en plus de l'un des spécificateurs précédents ; pour ce flottant
seulement, @LaTeX{} ignore les restrictions à la fois sur le nombre de
flottants qui peuvent apparaître et les quantités relatives de texte
flottant et non-flottant sur la page.  Le spécificateur @code{!}
@emph{ne} signifie @emph{pas} « mets le flottant ici » ; voir
plus haut.

@end table

Note : l'ordre dans lequel les lettres apparaissent au sein du paramètre
@var{placement} ne change pas l'ordre dans lequel @LaTeX{} essaie de
placer le flottant ; par exemple @code{btp} a le même effet que
@code{tbp}.  Tout ce que @var{placement} fait c'est que si une lettre
n'est pas présente alors l'algorithme n'essaie pas cet endroit.  Ainsi,
la valeur par défaut de @LaTeX{} étant @code{tbp} consiste à essayer
toutes les localisations sauf celle de placer le flottant là où il
apparaît dans le code source.

Pour empêcher @LaTeX{} de rejeter tous les flottants à la fin du document
ou d'un chapitre, vous pouvez utiliser la commande @code{\clearpage}
pour commencer une nouvelle page et insérer tous les flottants pendants.
Si un saut de page est indésirable alors vous pouvez charger le
paquetage @file{afterpage} et commettre le code
@code{\afterpage@{\clearpage@}}.  Ceci aura l'effet d'attendre la fin de
la page courante et ensuite de faire passer tous les flottants encore
non placés.

@PkgIndex{flafter}
@LaTeX{} peut composer un flottant avant l'endroit où il apparaît dans
le code source (quoique sur la même page de sortie) s'il y a un
spécificateur @code{t} au sein du paramètre @var{placement}.  Si ceci
n'est pas désiré, et que supprimer @code{t} n'est acceptable car ce
spécificateur empêche le flottant d'être placé au sommet de la page
suivante, alors vous pouvez empêcher  cela soit en utilisant le
paquetage @package{flafter} ou en utilisant ou en utilisant la
commande
@findex \suppressfloats
@code{\suppressfloats[t]}, ce qui entraîne le déplacement vers la page
suivante des flottants qui auraient du être placés au sommet de la page
courante.


Voici les paramètres en relation aux fractions de pages occupées par du
texte flottant et non flottant (on peut les changer avec
@code{\renewcommand@{@var{paramètre}@}@{@var{nombre décimal entre 0 et
1}@}}) :

@ftable @code
@findex \bottomfraction
La fraction maximale de page autorisée à être occupées par des flottants
au bas de la page ; la valeur par défaut est @samp{.3}.

@item \floatpagefraction
La fraction minimale d'une page de flottants qui doit être occupée par des
flottants ; la valeur par défaut @samp{.5}.

@item \textfraction
La fraction minimale d'une page qui doit être du texte ; si des
flottants prennent trop d'espace pour préserver une telle quantité de
texte, alors les flottants sont déplacés vers une autre page. La valeur
par défaut est @samp{.2}.

@item \topfraction
Fraction maximale au sommet d'une page page que peut être occupée avant
des flottants ; la valeur par défaut est @samp{.7}.

@end ftable

Les paramètres en relation à l'espace vertical autour des flottants (on
peut les changer avec
@code{\setlength@{@var{paramètre}@}@{@var{expression longueur}@}}) :

@ftable @code
@item \floatsep
Espace entre les flottants au sommet ou au bas d'une page ;  par défaut vaut
@samp{12pt plus2pt minus2pt}.

@item \intextsep
Espace au dessus et au dessous d'un flottant situé au milieu du texte
principal ; vaut par défaut @samp{12pt plus2pt minus2pt} pour les styles
à @samp{10pt} et à @samp{11pt}, et @samp{14pt plus4pt minus4pt} pour
@samp{12pt}.

@item \textfloatsep
Espace entre le dernier (premier) flottant au sommet (bas) d'une page ;
par défaut vaut @samp{20pt plus2pt minus4pt}.
@end ftable

Paramètres en relation avec le nombre de flottant sur une page (on peut
les changer avec @code{\setcounter@{@var{ctrname}@}@{@var{natural
number}@}}) :

@ftable @code
@item \bottomnumber
Nombre maximal de flottants pouvant apparaître au bas d'une page de
texte ; par défaut 1.

@item \topnumber
Nombre maximal de flottants pouvant apparaître au sommet d'une page de
texte ; par défaut 2.

@item \totalnumber
Nombre maximal de flottants pouvant apparaître sur une page de
texte ; par défaut 3.
@end ftable

L'article principal de FAQ @TeX{} en rapport avec les flottants
@url{http://www.tex.ac.uk/cgi-bin/texfaq2html?label=floats} contient des
suggestions pour relâcher les paramètres par défaut de @LaTeX{} de sorte
à réduire les problèmes de flottants rejetés à la fin. Une explication
complète de l'algorithme de placement des flottants se trouve dans
l'article de Frank Mittelbach « @identity{How to
influence the position of float environments like figure and table in
@LaTeX{}?} »  (@url{http://latex-project.org/papers/tb111mitt-float.pdf}).

@menu
* \caption::          Fabrique une légende pour un environnement flottant.
@end menu


@node \caption
@subsection @code{\caption}

@findex \caption
@cindex captions

Synopsis :

@example
\caption@{@var{texte-légende}@}
@end example

@noindent
ou

@example
\caption[@var{texte-légende-bref}]@{@var{texte-légende}@}
@end example

Fabrique une légende pour un environnement flottant, tel que les
environnements @code{figure} ou @code{table} (@pxref{figure}
ou @ref{table}).

Dans l'exemple suivant, @LaTeX{} place une légende sous l'espace blanc
vertical laissé par l'auteur pour l'inclusion ultérieur d'une image.

@example
\begin@{figure@}
  \vspace*@{1cm@}
  \caption@{Alonzo Cushing, Battery A, 4th US Artillery.@}
  \label@{fig:CushingPic@}
\end@{figure@}
@end example

@noindent
La commande @code{\caption} crée une étiquette pour la légende
@var{texte-légende} du genre de @samp{Figure 1 – } pour un document
@code{article} ou @samp{Figure 1.1 – } pour un document @code{book}.
Le texte est centré s'il est plus court que la largeur du texte, ou
composé comme un paragraphe sans retrait s'il prend plus d'une ligne.

En plus de placer le @var{texte-légende} dans la sortie, la commande
@code{\caption} sauvegarde également cette information pour qu'elle soit
utilisée dans une liste de figures ou un liste de tableaux (@pxref{Table
of contents etc.}).

Ci-dessous la commande @code{\caption} utilise l'argument optionnel
@var{texte-légende-bref}, de sorte que le texte plus bref apparaisse
dans la liste des tableaux plutôt que la version longue
@var{texte-légende}.

@example
\begin@{table@}
  \centering
  \begin@{tabular@}@{|*@{3@}@{c@}|@}
    \hline
    4  &9  &2 \\
    3  &5  &7 \\ 
    8  &1  &6 \\
    \hline
  \end@{tabular@}
  \caption[Carré de \textit@{Lo Shu@}]@{%
    Le carré de \textit@{Lo Shu@}, il est unique parmi les carrés
    d'ordre trois à la rotation ou réflexion près.@}
  \label@{tab:LoShu@}
\end@{table@}
@end example

@noindent
@LaTeX{} crée une étiquette pour @var{texte-légende} du genre de
@samp{Table 1 – } pour un document @code{article} ou @samp{Table 1.1 – }
pour un document @code{book}.

La légende peut apparaître au sommet d'une @code{figure} ou
@code{table}. Cela se produirait ainsi dans l'exemple précédent en
mettant la @code{\caption} entre le @code{\centering} et le
@code{\begin@{tabular@}}.

Les différents environnements flottants sont numérotés séparément, par
défaut. Le compteur de l'environnement @code{figure} est nommé
@code{figure}, et de même le compteur de l'environnement @code{table}
est @code{table}.

Le texte qui est mis dans la liste des figures ou des tableaux est un
argument mouvant.  Si vous obtenez l'erreur @LaTeX{} @samp{!  Argument
of \@@caption has an extra @}} alors vous devez précéder d'un
@code{\protect} toute commande fragile. @xref{\protect}.

@PkgIndex{package}
Le paquetage @code{caption} a beaucoup d'options pour ajuster
l'apparence de la légende, par ex.@: changer la taille de la fonte,
faire que la légende soit un texte en retrait plutôt qu'un paragraphe,
ou faire que la légende soit toujours un paragraphe, plutôt qu'un texte
centré quand elle est courte.


@node Sectioning
@chapter Rubricage

@cindex rubricage, commandes
@cindex commandes de rubricage,
@cindex @code{part}
@cindex partie
@cindex @code{chapter}
@cindex chapitre
@cindex section
@cindex @code{subsection}
@cindex sous-section
@cindex @code{subsubsection}
@cindex sous-sous-section
@cindex @code{paragraph}
@cindex paragraphe
@cindex @code{subparagraph}
@cindex sous-paragraphe
@findex \part
@findex \chapter
@findex \section
@findex \subsection
@findex \subsubsection
@findex \paragraph
@findex \subparagraph

Structure votre texte en rubriques : parties, chapitres, sections,
etc. Toutes les commandes de rubricage ont la même forme, l'une parmi :

@example
@var{cmd-de-rubricage}@{@var{titre}@}
@var{cmd-de-rubricage}*@{@var{titre}@}
@var{cmd-de-rubricage}[@var{titre-tdm}]@{@var{titre}@}
@end example

@noindent
Par exemple, déclarez le début d'une sous-section comme dans
@code{\subsection@{Motivation@}}.

Le tableau suivant comprend chacune des commandes @var{cmd-de-rubricage}
de @LaTeX{}.  Toutes sont disponibles dans toutes les classes de
document standardes de @LaTeX{} @code{book}, @code{report},
et @code{article}, à ceci près que @code{\chapter} n'est pas disponible
dans @code{article}.

@multitable @columnfractions .25 .25 .40
@headitem Type de rubrique  @tab Commande  @tab Niveau
@item Part
@tab @code{\part}  @tab -1 (@code{book}, @code{report}), 0 (@code{article})
@item Chapter
@tab @code{\chapter}   @tab 0
@item Section
@tab @code{\section}   @tab 1
@item Subsection
@tab @code{\subsection}   @tab 2
@item Subsubsection
@tab @code{\subsubsection}   @tab 3
@item Paragraph
@tab @code{\paragraph}   @tab 4
@item Subparagraph
@tab @code{\subparagraph}   @tab 5
@end multitable


@cindex @code{*}, forme en @code{*} des commandes de rubricage
@cindex étoilée, forme des commandes de rubricage
@cindex forme étoilée des commandes de rubricage
@cindex forme en * des commandes de rubricage
Toutes ces commandes ont une forme en @code{*}, aussi appelée étoilée,
qui imprime @var{titre} comme d'habitude mais sans le numéroter et sans
fabriquer une entrée dans la table des matières.  Un exemple
d'utilisation est pour un appendice dans un @code{article}.  Entrer le
code @code{\appendix\section@{Appendice@}} donne en sortie @samp{A
Appendix} (@pxref{\appendix}).  Vous pouvez ôter le numéro @samp{A} en
entrant à la place @code{\section*@{Appendice@}} (les articles omettent
couramment d'avoir une table des matières et ont des en-têtes de pages
simples alors les autres différences de la commande @code{\section}
peuvent être négligées).

Le titre @var{titre} fournit la rubrique en tant que titre dans le texte
principal, mais il peut également apparaître dans la table des matières
et le haut et le bas de page (@pxref{Page styles}).  Vous pourriez
désirer un texte différent à ces endroits que dans le texte principal.
Toute ces commandes ont un argument optionnel @var{tdm-titre} destiné à
ces autres endroits.

Le numéro dans la colonne @guillemetleft{}Niveau@guillemetright{} de la
table ci-dessus détermine quelles rubriques sont numérotées, et
lesquelles apparaissent dans la table des matières.  Si le @var{niveau}
de la commande de rubricage est inférieur ou égal à la valeur du
compteur @code{secnumdepth} alors les rubriques correspondant à ces
commandes de rubricage sont numérotées (@pxref{Sectioning/secnumdepth}).
Et, si @var{niveau} est inférieur ou égal à la valeur du compteur
@code{tocdepth} alors la table des matières comprend une entrée pour
cette rubrique (@pxref{Sectioning/tocdepth}).

@LaTeX{} s'attend que avant d'avoir une @code{\subsection} vous ayez une
 @code{\section} et, dans un document de classe @code{book}, qu'avant
 une @code{\section} vous ayez un @code{\chapter}.  Autrement vous
 pourriez obtenir quelque chose comme une sous-section numérotée
 @samp{3.0.1}.

@PkgIndex{titlesec}
@LaTeX{} vous permet de changer l'apparence des rubriques.  Un exemple
simple de ceci est que vous pouvez mettre le numéro de rubrique de type
section en lettres majuscules avec
@code{\renewcommand\thesection@{\Alph@{section@}@}} dans le préambule
(@pxref{\alph \Alph \arabic \roman \Roman \fnsymbol}).  Le CTAN a
beaucoup de paquetages rendant ce genre d'ajustement plus facile,
notamment @package{titlesec}.

Deux compteurs sont en relation avec l'apparence des rubriques fabriquées
par les commandes de rubricage.

@ftable @code
@item secnumdepth
@findex secnumdepth @r{compteur}
@cindex numéros de rubrique, composition
@anchor{sectioning secnumdepth}
@anchor{Sectioning/secnumdepth}
Le compteur @code{secnumdepth} contrôle quels titres de rubriques sont
numérotés.  Régler le compteur avec
@code{\setcounter@{secnumdepth@}@{@var{niveau}@}} supprime la
numérotation des rubriques à toute profondeur supérieure à @var{niveau}
(@pxref{\setcounter}).  Voir la table plus haut pour la valeur des
niveaux. Par exemple, si le @code{secnumdepth} vaut 1 dans un
@code{article} alors la commande @code{\section@{Introduction@}} produit
en sortie quelque chose comme @samp{1 Introduction} alors que
@code{\subsection@{Discussion@}} produit quelque chose comme
@samp{Discussion}, sans numéro. La valeur par défaut de @LaTeX{} pour
@code{secnumdepth} vaut 3 dans la classe @file{article} et 2 dans les
classes @file{book} et @file{report}.

@item tocdepth
@findex tocdepth @r{counter}
@cindex table des matières, impression des numéros de rubrique
@anchor{sectioning tocdepth}
@anchor{Sectioning/tocdepth}
Contrôle quelles rubriques sont listées dans la table des matières.
Régler @code{\setcounter@{tocdepth@}@{@var{niveau}@}} a pour effet que
les rubriques au niveau @var{niveau} sont celles de plus petit niveau à
être listées (@pxref{\setcounter}).  Voir la table ci-dessus pour les
numéros de niveau.  Par exemple, if @code{tocdepth} vaut 1 alors la table
des matières contiendra les rubriques issues de @code{\section}, mais pas
celles de @code{\subsection}.  La valeur par défaut de @LaTeX{} pour
@code{tocdepth} vaut 3 dans la classe @file{article} et 2 dans les
classes @file{book} et @file{report}.
@end ftable


@menu
* \part::                                         Commence une partie.
* \chapter::                                      Commence un chapitre.
* \section::                                      Commence une section.
* \subsection::                                   Commence une sous-section.
* \subsubsection & \paragraph & \subparagraph::   Subdivisions inférieures.
* \appendix::                                     Commence un appendice.
* \frontmatter & \mainmatter & \backmatter::      Les trois parties d'un livre.
* \@@startsection::                               Composer les rubriques.
@end menu


@node \part
@section @code{\part}

@findex \part
@cindex part
@cindex rubricage, part

Synopsis, l'un parmi :

@example
\part@{@var{titre}@}
\part*@{@var{titre}@}
\part[@var{tdm-titre}]@{@var{titre}@}
@end example

Début une partie de document.  Les classes standarde @LaTeX{}
@code{book}, @code{report}, et @code{article} offrent toutes cette
commande.

L'exemple suivant produit une partie de document dans un livre :

@c xxx à traduire
@example
\part@{VOLUME I \\
       PERSONAL MEMOIRS OF  U.\ S.\ GRANT@}
\chapter@{ANCESTRY--BIRTH--BOYHOOD.@}
My family is American, and has been for generations,
in all its branches, direct and collateral.
@end example

Dans chaque classe standarde la commande @code{\part} produit en sortie
un numéro de partie tel que @samp{Première partie}, seul sur sa ligne,
en caractère gras, et en gros caractères.  Ensuite @LaTeX{} produit en
sortie @var{titre}, également seule sur sa ligne, en caractère gras et
en caractères encore plus gros.
Dans la classe @code{book}, le comportement par défaut de @LaTeX{} est
de mettre chaque titre de partie seule sur sa propre page. Si le livre
est en recto-verso alors @LaTeX{} saute une page si nécessaire pour que
la nouvelle partie commence sur une page à numéro impair. Dans un
@code{report} il est également seul sur une page, mais @LaTeX{} ne force
pas qu'elle soit de numéro impair.  Dans un @code{article} @LaTeX{} ne
le place pas sur une nouvelle page, mais au lieu de cela produit en
sortie le numéro de partie et le titre de partie sur la même page que le
document principal.

La forme en @code{*} imprime @var{titre} mais n'imprime pas le numéro de
partie, et n'incrémente pas le compteur @code{part}, et ne produit
aucune entrée dans la table des matières.

L'argument optionnel @var{tdm-titre} apparaît comme le titre de la
partie dans la table des matières (@pxref{Table of contents etc.}) et
dans les hauts de pages (@pxref{Page styles}).  S'il n'est pas présent
alors @var{titre} est utilisé à sa place. Dans l'exemple suivante on met
un saut de ligne dans @var{titre} mais on l'enlève dans la table des
matières.

@example
\part[Up from the bottom; my life]@{Up from the bottom\\ my life@}
@end example

Pour déterminer quelles rubrique sont numéroté et lesquelles
apparaissent dans la table des matières, le numéro de niveau d'une
partie vaut -1 (@pxref{Sectioning/secnumdepth} et
@pxref{Sectioning/tocdepth}).

@PkgIndex{indentfirst}

Dans la classe @code{article}, si un paragraphe suit immédiatement le
titre de partie alors il n'est pas renfoncé.  Pour obtenir un
renfoncement vous pouvez utiliser le paquetage @package{indentfirst}.

@PkgIndex{titlesec}
Un paquetage pour changer le comportement de @code{\part} est
@package{titlesec}.  Voir sa documentation sur le CTAN.


@node \chapter
@section @code{\chapter}

@findex \chapter
@cindex chapitre

Synopsis, l'un parmi :

@example
\chapter@{@var{titre}@}
\chapter*@{@var{titre}@}
\chapter[@var{tdm-titre}]@{@var{titre}@}
@end example

Commence un chapitre.  Les classes standardes @LaTeX{}  @code{book} et
@code{report} ont cette commande, mais @code{article} non.

L'exemple suivant produit un chapitre.

@example
\chapter@{Mirages@}
Appelez moi Ismaël.
Voici quelques années --- peu importe combien --- le porte-monnaie vide
ou presque, rien ne me retenant à terre, je songeai à naviguer un peu et
à voir l'étendue liquide du globe.
@end example

Le comportement par défaut de @LaTeX{} est de commence chaque chapitre
sur une page neuve, une page à numéro impair si le document est en
recto-verso.  Il produit un numéro de chapitre tel que @samp{Chapitre 1}
en gros caractère gras (la taille est @code{\huge}). Ensuite il place le
@var{titre} sur une nouvelle ligne, en caractère gras encore plus gros
(taille @code{\Huge}).  Il incrémente également le compteur
@code{chapter}, ajoute une entrée à la table des matières (@pxref{Table
of contents etc.}), et règle l'information de haut de page (@pxref{Page
styles}).

La forme étoilée, ou forme en @code{*}, affiche @var{titre} sur une
nouvelle ligne, en caractère gras. Mais elle n'affiche pas le numéro de
chapitre, ni n'incrémente le compteur @code{chapter}, et ne produit
aucune entrée dans la table des matières, et n'affecte pas le haut de
page.  (Si vous utilise le style de page @code{headings} dans un
document recto-verso alors le haut de page sera dérivé du chapitre
précédent). Voici un exemple illustrant cela :

@example
\chapter*@{Préambule@}
@end example

L'argument optionnel @var{tdm-titre} apparaît comme titre de chapitre
dans la table des matières (@pxref{Table of contents etc.}) et dans les
hauts de page (@pxref{Page styles}).  Si il n'est pas présent alors
@var{titre} sera à la place.  L'exemple suivant montre le nom complet
dans le titre de chapitre,

@example
\chapter[Weyl]@{Hermann Klaus Hugo (Peter) Weyl (1885--1955)@}
@end example

@noindent
mais seulement @samp{Weyl} sur la page de table des matières.  L'exemple
suivant place un saut de ligne dans le titre, mais ceci ne fonctionne
pas bien avec les hauts de page, alors il omet le saut dans la table des
matières

@example
\chapter[J'ai tout donné ; mon histoire]@{J'ai tout donné\\ mon histoire@}
@end example

Pour déterminer quelles rubriques sont numérotées et lesquelles
apparaissent dans la table des matières, le numéro de niveau d'un
chapitre est 0 (@pxref{Sectioning/secnumdepth} et
@pxref{Sectioning/tocdepth}).

@PkgIndex{indentfirst}
@c French version only
@PkgIndex{mlp}
@PkgIndex{babel}
@PkgIndex{polyglossia}
Lorsque vous chargez un paquetage d'internationalisation tel que
@package{babel}, @package{mlp} ou @package{polyglossia}, et que la langue
sélectionnée est le français, alors le premier paragraphe après le titre
est normalement renfoncé, comme c'est la convention en typographie
française. Par contre, si vous restez en langue par défaut,
c.-à-d.@: en anglo-américain,
@c End French version  only
le paragraphe qui suit le titre de chapitre n'est pas renfoncé, étant donné que c'est
@c French version only
pour l'anglo-américain
@c End French version only
une pratique typographique standarde.  Pour obtenir un renfoncement
@c French version only
dans ce cas
@c End French version only
utilisez le paquetage @package{indentfirst}.

Vous pouvez changer ce qui est affiché pour le numéro de chapitre.  Pour
le changer en quelque chose du genre de @samp{Cours 1}, placez dans le
préambule soit @code{\renewcommand@{\chaptername@}@{Cours@}}, soit
cela (@pxref{\makeatletter & \makeatother}) :

@example
\makeatletter
\renewcommand@{\@@chapapp@}@{Cours@}
\makeatother
@end example

@PkgIndex{babel}
@noindent Pour que cela soit fonction de la langue principale du document, voir le paquetage @package{babel}.

Dans un document recto-verso @LaTeX{} commence les chapitres sur des
pages de numéro impair, en laissant si nécessaire une page de numéro
pair blanche à l'exception d'un éventuel haut de page.  Pour que cette
page soit complètement blanche, voir @ref{\clearpage &
\cleardoublepage}.

@PkgIndex{titlesec}
Pour changer le comportement de la commande @code{\chapter}, vous pouvez
copier sa définition depuis le fichier de format @LaTeX{} et faire des
ajustements.  Mais il y a aussi beaucoup de paquetage sur le CTAN qui
traitent de cela.  L'un d'eux est @package{titlesec}.  Voir sa
documentation, mais l'exemple ci-dessous donne un aperçu de ce qu'il
peut faire.

@example
\usepackage@{titlesec@}   % dans le préambule
\titleformat@{\chapter@}
  @{\Huge\bfseries@}  % format du titre
  @{@}                % étiquette, tel que 1.2 pour une sous-section
  @{0pt@}             % longueur de séparation entre l'étiquette et le titre
  @{@}                % code crochet exécuté avant
@end example

@noindent
Ceci omet le numéro de chapitre @samp{Chapitre 1} de la page, mais
contrairement à @code{\chapter*} cela conserve le chapitre dans la table
des matières et dans les hauts de page.


@node \section
@section @code{\section}

@findex \section
@cindex section

Synopsis, l'un parmi :

@example
\section@{@var{titre}@}
\section*@{@var{titre}@}
\section[@var{tdm-titre}]@{@var{titre}@}
@end example

Commence une section.  Les classes @LaTeX{} standardes @code{article},
@code{book}, et @code{report} ont toutes cette commande.

L'exemple suivant produit une section :

@example
Dans cette partie nous nous intéressons plutôt à la fonction, au
comportement d'entrée-sortie, qu'aux détails de la réalisation de ce
comportement.

\section@{Machines de Turing@}
En dépit de ce désir de rester évasif sur l'implémentation, nous suivons
l'approche d'A.~Turing selon laquelle la première étape pour définir
l'ensemble des fonctions calculables est de réflechir au détails de ce
que des mécanismes peuvent faire.
@end example

Pour les classes standardes @LaTeX{} @code{book} et @code{report} la
sortie par défaut est du genre de @samp{1.2 @var{titre}} (pour
chapitre 1, section 2), seul sur sa ligne et fer à gauche, en caractères
gras et plus gros (la taille de police est @code{\Large}).  La même
chose vaut pour @code{article} à ceci près qu'il n'y a pas de chapitre
dans cette classe, et donc cela ressemble à @samp{2 @var{titre}}.

La forme en @code{*} affiche @var{titre}. Mais elle n'affiche pas le
numéro de section, ni n'incrémente le compteur @code{section}, ne
produit aucune entrée dans la table des matières, et n'affecte pas le
haut de page.  (Si vous utilisez le style de page @code{headings} dans
un document recto-verso, alors le titre de haut de page sera celui de la
rubrique précédente).

L'argument optionnel @var{tdm-titre} apparaît comme titre de section
dans la table des matières (@pxref{Table of contents etc.}) et dans les
titres de haut de page (@pxref{Page styles}).  S'il n'est pas présent
alors @var{titre} est à la place.  L'exemple suivant montre le nom
complet dans le titre de la section,

@example
\section[Elisabeth~II]@{Elisabeth deux,
  Reine par la grâce de Dieu du Royaume Uni,
  du Canada et de ses autres Royaumes et Territoires,
  Chef du Commonwealth, Défenseur de la Foi.@}
@end example

@noindent
mais seulement @samp{Elisabeth II} dans la table de matière et sur les
hauts de page.  Dans l'exemple suivant il y a un saut de ligne dans
@var{titre} mais ça ne fonctionne pas pour la table des matières alors
il est omis de la table des matières et des titres de hauts de page.

@example
\section[La vérité c'est que j'ai menti ; histoire de ma vie]@{La vérité
c'est que j'ai menti\\ histoire de ma vie@}
@end example

Pour déterminer quelles rubriques sont numérotées et lesquelles
apparaissent dans la table des matières, le numéro de niveau d'une
section est 1 (@pxref{Sectioning/secnumdepth} et
@pxref{Sectioning/tocdepth}).

@PkgIndex{indentfirst}
@c French version only
Lorsque vous chargez un paquetage d'internationalisation tel que
@package{babel}, @package{mlp} ou @package{polyglossia}, et que la langue
sélectionnée est le français, alors le premier paragraphe après le titre
est normalement renfoncé, comme c'est la convention en typographie
française. Par contre, si vous restez en langue par défaut,
c.-à-d.@: en anglo-américain,
@c End French version  only
le paragraphe qui suit le titre de section n'est pas renfoncé, étant donné que c'est
@c French version only
pour l'anglo-américain
@c End French version only
une pratique typographique standarde.  Pour obtenir un renfoncement
@c French version only
dans ce cas
@c End French version only
utilisez le paquetage @package{indentfirst}.

@PkgIndex{titlesec}
En général, pour changer le comportement de la commande @code{\section},
il y a diverses options.  L'une d'elles et la commande
@code{\@@startsection} (@pxref{\@@startsection}).  Il y a aussi un grand
nombre de paquetages sur le CTAN traitant de cela, dont
@package{titlesec}.  Voir sa
documentation, mais l'exemple ci-dessous donne un aperçu de ce qu'il
peut faire.

@c credit: egreg https://groups.google.com/forum/#!topic/comp.text.tex/tvc8oM5P4y4
@example
\usepackage@{titlesec@}   % dans le préambule
\titleformat@{\section@}
  @{\normalfont\Large\bfseries@}  % format du titre
  @{\makebox[1pc][r]@{\thesection\hspace@{1pc@}@}@} % étiquette
  @{0pt@}                   % longueur de séparation entre l'étiquette et le titre
  @{@}                      % code crochet exécuté avant
\titlespacing*@{\section@}
  @{-1pc@}@{18pt@}@{10pt@}[10pc]
@end example

@noindent
Cela met le numéro de section dans la marge.


@node \subsection
@section @code{\subsection}

@findex \subsection
@cindex subsection

Synopsis, l'un parmi :

@example
\subsection@{@var{titre}@}
\subsection*@{@var{titre}@}
\subsection[@var{tdm-titre}]@{@var{titre}@}
@end example

Commence une sous-section.  Les classes @LaTeX{} standardes @code{article},
@code{book}, et @code{report} ont toutes cette commande.

L'exemple suivant produit une sous-section :

@example
Nous allons montrer qu'il y a plus de fonction que de machines de Turing
et donc que certaines fonctions n'ont pas de machine associée.

\subsection@{Cardinal@} Nous allons commencer par deux paradoxes qui
mettent en scène le défi que pose à notre intuition la comparaison des
tailles d'ensembles infinis.
@end example

Pour les classes @LaTeX{} standardes @code{book} et @code{report} la
sortie par défaut est du genre de @samp{1.2.3 @var{titre}} (pour
chapitre 1, section 2, sous-section 3), seul sur sa ligne et fer à
gauche, en caractère gras et un peu plus gros (la taille de police est
@code{\large}).  La même chose vaut dans @code{article} à ceci près
qu'il n'y a pas de chapitre dans cette classe, alors cela ressemble à
@samp{2.3 @var{titre}}.

La forme en @code{*} affiche @var{titre}.  Mais elle n'affiche pas le
numéro de sous-section, ni n'incrémente le compteur @code{subsection},
et ne produit aucune entrée dans la table des matières.

@c continuer la trad.
L'argument optionnel @var{tdm-titre} apparaît comme le titre de
sous-section dans la table des matières (@pxref{Table of contents
etc.}).  S'il n'est pas présent alors @var{titre} est à la place.
L'exemple suivant montre le texte complet dans le titre de sous-section,

@example
\subsection[$\alpha,\beta,\gamma$ paper]@{\textit@{The Origin of
  Chemical Elements@} by R.A.~Alpher, H.~Bethe, and G.~Gamow@}
@end example

@noindent
mais seulement @samp{@BES{α,\alpha},@BES{β,\beta},@BES{γ,\gamma}
paper} dans la table des matières.

Pour déterminer quelles rubriques sont numérotées et lesquelles
apparaissent dans la table des matières, le numéro de niveau d'une
sous-section est 2 (@pxref{Sectioning/secnumdepth} et
@pxref{Sectioning/tocdepth}).

@PkgIndex{indentfirst}
@c French version only
Lorsque vous chargez un paquetage d'internationalisation tel que
@package{babel}, @package{mlp} ou @package{polyglossia}, et que la langue
sélectionnée est le français, alors le premier paragraphe après le titre
est normalement renfoncé, comme c'est la convention en typographie
française. Par contre, si vous restez en langue par défaut,
c.-à-d.@: en anglo-américain,
@c End French version  only
le paragraphe qui suit le titre de sous-section n'est pas renfoncé, étant donné que c'est
@c French version only
pour l'anglo-américain
@c End French version only
une pratique typographique standarde.  Pour obtenir un renfoncement
@c French version only
dans ce cas
@c End French version only
utilisez le paquetage @package{indentfirst}.

@PkgIndex{titlesec}
@c
Il y a diverses façon de changer le comportement de la commande
@code{\subsection}.  L'une d'elles et la commande @code{\@@startsection}
(@pxref{\@@startsection}).  Il y a aussi divers paquetages sur le CTAN
traitant de cela, dont @package{titlesec}.  Voir sa documentation, mais
l'exemple ci-dessous donne un aperçu de ce qu'il peut faire.

@example
\usepackage@{titlesec@}   % dans le préambule
\titleformat@{\subsection@}[runin]
  @{\normalfont\normalsize\bfseries@}  % format du titre
  @{\thesubsection@}                   % étiquette
  @{0.6em@}                            % espacement entre l'étiquette et le titre
  @{@}                                 % code crochet exécuté avant
@end example

@noindent
Cela place le numéro de sous-section et @var{titre} sur la première
ligne de texte.


@node \subsubsection & \paragraph & \subparagraph
@section @code{\subsubsection}, @code{\paragraph}, @code{\subparagraph}

@anchor{\subsubsection}
@findex \subsubsection
@cindex subsubsection
@c
@anchor{\paragraph}
@findex \paragraph
@cindex paragraph
@c
@anchor{\subparagraph}
@findex \subparagraph
@cindex subparagraph

Synopsis, l'un parmi les suivant :

@example
\subsubsection@{@var{titre}@}
\subsubsection*@{@var{titre}@}
\subsubsection[@var{titre-tdm}]@{@var{titre}@}
@end example

@noindent
ou l'un parmi :

@example
\paragraph@{@var{titre}@}
\paragraph*@{@var{titre}@}
\paragraph[@var{titre-tdm}]@{@var{titre}@}
@end example

@noindent
ou l'un parmi :

@example
\subparagraph@{@var{titre}@}
\subparagraph*@{@var{titre}@}
\subparagraph[@var{titre-tdm}]@{@var{titre}@}
@end example

Débute une rubrique de type sous-sous-section, paragraphe, ou
sous-paragraphe.  Les classes @LaTeX{} standardes @code{article},
@code{book}, et @code{report} disposent toutes de ces commandes, bien
que leur utilisation n'est pas courante.

L'exemple suivant produit une sous-sous-section :

@c xxx À traduire
@example
\subsubsection@{Piston ring compressors: structural performance@}
Provide exterior/interior wall cladding assemblies
capable of withstanding the effects of load and stresses from
consumer-grade gasoline engine piston rings.
@end example

La sortie produite par défaut de chacune de ces trois commande est la
même pour les classes @LaTeX{} standarde @code{article}, @code{book}, et
@code{report}.  Pour @code{\subsubsection} le @var{titre} est seul sur
sa ligne, en caractères gras avec la taille normale de police.  Pour
@code{\paragraph} le @var{titre} est sur la même ligne que le texte qui
suit, sans renfoncement, en caractères gras avec la taille normale de
police.  Pour @code{\subparagraph} le @var{titre} est sur la même ligne
que la texte qui suit, avec un renfoncement de paragraphe, en caractère
gras et avec la taille normale de police (comme les documents de classe
@code{article} n'ont pas de chapitre, leurs sous-sous-sections sont
numérotées et donc cela ressemble à @samp{1.2.3 @var{titre}}, pour
section 1, sous-section 2, et sous-sous-section 3.  Les deux autres
subdivisions ne sont pas numérotées).

La forme en @code{*} affiche @var{titre}.  Mais elle n'incrémente pas le
compteur associé et ne produit pas d'entrée dans la table des matières
(et le titre produit pas @code{\subsubsection} n'a pas de numéro).

L'argument optionnel @var{titre-tdm} apparaît comme le titre de la
rubrique dans la table des matières (@pxref{Table of contents etc.}).
S'il est omis, alors @var{titre} est utilisé à la place.

Pour déterminer quelles rubriques sont numérotées et lesquelles
apparaissent dans la table des matières, le numéro de niveau d'une
sous-sous-section est 3, celui d'un paragraphe est 4, et celui d'un
sous-paragraphe est 5 (@pxref{Sectioning/secnumdepth} et
@pxref{Sectioning/tocdepth}).

@PkgIndex{indentfirst}
@c French version only
Lorsque vous chargez un paquetage d'internationalisation tel que
@package{babel}, @package{mlp} ou @package{polyglossia}, et que la langue
sélectionnée est le français, alors le premier paragraphe après le titre
est normalement renfoncé, comme c'est la convention en typographie
française. Par contre, si vous restez en langue par défaut,
c.-à-d.@: en anglo-américain,
@c End French version  only
le paragraphe qui suit le titre de chapitre n'est pas renfoncé, étant donné que c'est
@c French version only
pour l'anglo-américain
@c End French version only
une pratique typographique standarde.  Une façon d'obtenir un renfoncement
@c French version only
dans ce cas
@c End French version only
est d'utiliser le paquetage @package{indentfirst}.

@PkgIndex{titlesec}
Il y a de nombreuses manières de changer le comportement de ces
commandes. L'une est la commande @code{\@@startsection}
(@pxref{\@@startsection}).  Il y a aussi un grand nombre de paquetages
sur le CTAN traitant de cela, dont @package{titlesec}.  Voir sa
documentation sur le CTAN.

@node \appendix

@section @code{\appendix}

@findex \appendix
@cindex appendice
@cindex appendices

Synopsis :

@example
\appendix
@end example

Ne produit pas directement quelque chose en sortie.  Mais dans un
document @code{book} ou @code{report} cela déclare que toute commande
@code{\chapter} qui suit commence une annexe.  Pour les documents
@code{article} cela fait la même chose mais avec les commandes
@code{\section}.  Remet également à zéro les compteurs @code{chapter} et
@code{section} dans un document @code{book} ou @code{report}, et dans un
@code{article} les compteurs @code{section} et @code{subsection}.

Dans ce document de classe @code{book} :

@example
\chapter@{Un@}  ...
\chapter@{Deux@}  ...
 ...
\appendix
\chapter@{Trois@}  ...
\chapter@{Quatre@}  ...
@end example

@noindent
les deux premières commandes produisent en sortie @samp{Chapitre 1} and
@samp{Chapitre 2}.  Après la commande @code{\appendix} la numérotation devient
@samp{Annexe A} et @samp{Annexe B}.  @xref{Larger book template},
pour un autre exemple.

@PkgIndex{appendix}
Le paquetage @package{appendix} ajoute la commande @code{\appendixpage}
pour créer une page de titre de partie intitulée @samp{Appendices} dans
le corps du document avant la première annexe, ainsi que la
commande @code{\addappheadtotoc} pour créer l'entrée correspondante dans
la table des matières.  On peut régler le nom @samp{Appendices} avec une
commande comme @code{\renewcommand@{\appendixname@}@{Annexes@}}, et il y
a plusieurs autres fonctions.  Voir la documentation sur le CTAN.

@node \frontmatter & \mainmatter & \backmatter
@section @code{\frontmatter}, @code{\mainmatter}, @code{\backmatter}

@anchor{\frontmatter}
@findex \frontmatter
@cindex @code{book}, pièces préliminaires
@cindex livre, pièces préliminaires
@cindex pièces préliminaires d'un livre
@c
@anchor{\mainmatter}
@findex \mainmatter
@cindex @code{book}, pièces principales
@cindex livre, pièces principales
@cindex pièces principales d'un livre
@c
@anchor{\backmatter}
@findex \backmatter
@cindex @code{book}, pièces postliminaires
@cindex @code{book}, annexes
@cindex livre, pièces postliminaires
@cindex livre, annexes
@cindex pièces postliminaires d'un livre
@cindex annexes d'un livre

Synopsis, l'un ou plus parmi :

@example
\frontmatter
…
\mainmatter
…
\backmatter
…
@end example

Formate un document de classe @code{book} différemment selon la partie
du document en cours de production. Les trois commandes sont toutes
optionnelles.

Traditionnellement, les pièces préliminaires (@code{\frontmatter}) d'un
livre comprennent des choses telles que la page de titre, un abrégé, une
table des matières, une préface, une liste des notations, une liste des
figures et une liste des tableaux.  (Certaines des pages des pièces
préliminaires, telles que la page de titres, traditionnellement ne sont
pas numérotée). Les pièces postliminaires (@code{\backmatter}) peuvent
contenir des choses telles qu'un glossaire, une bibliographie, et un
index.

La commande @code{\frontmatter} rend les numéros de page en chiffres
romains bas de casse, et rend les chapitres non numérotés, bien que les
titres de chaque chapitre apparaissent dans la table des matières ; si
vous utilisez là aussi d'autres commandes de rubricage, alors utilisez
la version en @code{*} (@pxref{Sectioning}).

La commande @code{\mainmatter} permet de revenir au comportement
attendu, et réinitialise le numéro de page.

La commande @code{\backmatter} n'affecte pas la numérotation des pages,
mais commute de nouveau les chapitres en mode sans numéros.

@xref{Larger book template}, pour un exemple d'usage de ces trois
commandes.


@node \@@startsection
@section @code{\@@startsection}, composer les rubriques.

@findex \@@startsection
@cindex section, redéfinir

Synopsis :

@example
\@@startsection@{@var{nom}@}@{@var{niveau}@}@{@var{retrait}@}@{@var{avant}@}@{@var{après}@}@{@var{style}@}
@end example

Utilisé pour aider à redéfinir le comportement des commandes de
rubricage telles que @code{\section} ou @code{\subsection}.

Notez que le paquetage @package{titlesec} rend la manipulation du rubricage
plus facile. De plus, bien que la plupart des exigences concernant les
commandes de rubricage peuvent être remplies avec
@code{\@@startsection}, ce n'est pas le cas de certaines d'entre elles.  Par exemple,
dans les classes @LaTeX{} standardes @code{book} et @code{report}, les
commandes @code{\chapter} et @code{\report} ne sont pas construites de
cette manière. Pour fabriquer une telle commande, il est possible
d'utiliser la commande @code{\secdef}.
@c xx define, and make a cross reference to, secdef.

Techniquement, la commande @code{\@@startsection} a la forme suivante :
@example
\@@startsection@{@var{nom}@}
  @{@var{niveau}@}
  @{@var{retrait}@}
  @{@var{avant}@}
  @{@var{après}@}
  @{@var{style}@}*[@var{titretdm}]@{@var{titre}@}
@end example

@noindent de sorte que faire :

@example
\renewcommand@{\section@}@{\@@startsection@{@var{nom}@}
  @{@var{niveau}@}
  @{@var{retrait}@}
  @{@var{avant}@}
  @{@var{après}@}
  @{@var{style}@}@}
@end example

@noindent redéfinit @code{\section} en gardant sa forme standarde d'appel
@code{\section*[@var{titretdm}]@{@var{titre}@}} (dans laquelle on
rappelle que l'étoile @code{*} est optionnelle).
@xref{Sectioning}. Ceci implique que quand vous écrivez une commande
comme @code{\renewcommand@{\section@}@{...@}}, le
@code{\@@startsection@{...@}} doit venir en dernier dans la définition.
Voir les exemples ci-dessous.

@table @var

@item nom
@anchor{startsection name}
@anchor{\@@startsection/name}
Nom du compteur utilisé pour numéroter les titres de rubrique.  Ce
compteur doit être défini séparément. Ceux qui sont utilisés le plus
communément sont @code{section}, @code{subsection}, ou
@code{paragraph}. Bien que dans ces cas-là le nom du compteur soit
identique à celui de la commande elle-même, utiliser le même nom n'est
pas obligatoire.

Alors @code{\the}@var{name} affiche le numéro de titre, et
@code{\}@var{name}@code{mark} sert aux en-têtes de page. Voir le
troisième exemple plus bas.

@item niveau
@anchor{startsection level}
@anchor{\@@startsection/level}
Entier donnant la profondeur de la commande de
rubricage. @xref{Sectioning}, pour une liste des numéros standards de
niveaux.

Si @var{niveau} est inférieur ou égal à la valeur du compteur
@code{secnumdepth}, alors les titres pour cette commande de rubricage
sont numérotés (@pxref{Sectioning/secnumdepth}). Par exemple : dans un
@code{article}, si @code{secnumdepth} vaut 1, alors une commande
@code{\section@{Introduction@}} produira en sortie une chaîne du type
« @code{1 Introduction} », alors que @code{\subsection@{Historique@}}
produira en sortie une chaîne sans numéro de préfixe :
« @code{Historique} ».

Si @var{niveau} est inférieur ou égal à la valeur du compteur
@code{tocdepth}, alors la table des matières aura un article pour cette
rubrique.  Par exemple, dans un @code{article}, si @code{tocdepth} vaut
1, la table des matières listera les @code{section}s, mais pas les
@code{subsection}s.

@item retrait
@anchor{startsection indent}
@anchor{\@@startsection/indent}

Une longueur donnant le renfoncement de toutes les lignes du titre par
rapport à la marge de gauche. Pour un renfoncement nul, utilisez @code{0pt}.
@c xx à insérer :
@c vous pouvez utiliser la macro @code{\z@@} définie à @code{0pt} pour
@c que le code soit plus efficace
Une valeur négative telle que @code{-1em} cause un débord du titre dans
la marge de gauche.

@item avant
@anchor{startsection beforeskip}
@anchor{\@@startsection/beforeskip}
Longueur dont la valeur absolue est la longueur de l'espace vertical
inséré avant le titre de la rubrique. Cet espacement est ignoré si la
rubrique commence au début d'une page.  Si ce nombre est négatif, alors
le premier paragraphe suivant le titre n'est pas renfoncé, s'il est
positif ou nul il l'est. (Notez que l'opposé de @code{1pt plus 2pt minus
3pt} est @code{-1pt plus -2pt minus -3pt}).

Par exemple si @var{avant} vaut @code{-3.5ex plus -1ex minus -0.2ex}
alors pour commencer la nouvelle rubrique, @LaTeX{} ajoute environ 3,5
fois la hauteur d'une lettre x en espace vertical, et le premier
paragraphe de la rubrique n'est pas renfoncé.  Utiliser une longueur
élastique, c.-à-d.@: comprenant @code{plus} et @code{minus}, est une
bonne pratique ici car cela donne à @LaTeX{} plus de latitude lors de la
fabrication de la page (@pxref{Lengths}).

La quantité totale d'espace vertical entre la ligne de base de la ligne
précédant cette rubrique et la ligne de base du titre de la rubrique est
la somme du @code{\parskip} dans la police du corps de texte, du
@code{\baselineskip} de la police du titre, et de la valeur absolue de
l'argument @var{avant}. Cet espace est typiquement élastique de sorte à
pouvoir se dilater ou se contracter.  (Si la rubrique commence en début
d'une page de sorte que cet espace soit ignoré, alors la ligne de base
du titre correspond à la ligne de base qu'aurait la première ligne de
texte sur cette page si celle-ci commençait par du texte).

@item après
@anchor{startsection afterskip}
@anchor{\@@startsection/afterskip}
Longueur. Lorsque @var{après} est positif ou nul, il s'agit de l'espace
vertical à insérer après le titre de la rubrique. Lorsque elle est
négative, alors le titre fait corps avec le paragraphe le suivant
immédiatement. Dans ce cas la valeur absolue de la longueur donne
l'espace horizontal entre la fin du titre et le début du paragraphe
suivant.  (Notez que l'opposé de @code{1pt plus 2pt minus 3pt} est
@code{-1pt plus -2pt minus -3pt}).

Comme c'est le cas avec @var{avant}, utiliser une longueur élastique
avec des composantes @code{plus} et @code{minus} est une bonne pratique
ici puisque elle donne à @LaTeX{} plus de latitude pour assembler la
page.

Si @var{après} est positif ou nul, la quantité totale d'espace vertical
entre la ligne de base du titre de la rubrique et la ligne de base de la
première ligne du paragraphe suivant est la somme du @code{\parskip} de
la police du titre, de @code{\baselineskip} de la police du corps de
texte, et de la valeur de @var{après}. Cet espace est typiquement
élastique de sorte qu'il puisse se dilater ou se contracter. (Notez que,
du fait que le signe d'@var{après} contrôle que le titre soit
indépendant du texte qui le suit ou faisant corps avec lui, vous ne
pouvez pas utiliser un @var{après} négatif pour annuler une partie du
@code{\parskip}).

@item style
@anchor{startsection style}
@anchor{\@@startsection/style}
Contrôle le style du titre : voir les exemples plus bas. Les commandes
typiquement utilisées ici sont @code{\centering}, @code{\raggedright},
@code{\normalfont}, @code{\hrule}, ou @code{\newpage}. La dernière
commande au sein de @var{style} peut être une commande prenant un
argument, telle que @code{\MakeUppercase} ou @code{\fbox}. Le titre de
la rubrique est passé en argument à cette commande. Par exemple régler
@var{style} à @code{\bfseries\MakeUppercase} a pour effet de produire
des titres gras et en capitales.
@end table

Voici les réglages par défaut de @LaTeX{} pour les trois premiers
niveaux de rubricage qui sont définis par @code{\@@startsection}, pour
les classes @file{article}, @file{book}, et @file{report}.

@itemize
@item
Pour @code{section} : le @var{niveau} vaut 1, le @var{retrait} vaut 0@dmn{pt},
le @var{avant} vaut @code{-3.5ex plus -1ex minus -0.2ex}, le @var{après}
vaut @code{2.3ex plus 0.2ex}, et le @var{style} vaut
@code{\normalfont\Large\bfseries}.

@item
Pour @code{subsection} : le @var{niveau}
vaut 2, le @var{retrait} vaut 0@dmn{pt}, le @var{avant} vaut
@code{-3.25ex plus -1ex minus -0.2ex}, le @var{après} vaut @code{1.5ex
plus 0.2ex}, et le @var{style} vaut @code{\normalfont\large\bfseries}.

@item
Pour @code{subsubsection} : le @var{niveau} vaut 3, le @var{retrait} vaut
0@dmn{pt}, le @var{avant} vaut @code{-3.25ex plus -1ex minus -0.2ex}, le
@var{après} vaut @code{1.5ex plus 0.2ex}, et le @var{style} vaut
@code{\normalfont\normalsize\bfseries}.
@end itemize


Quelques exemples suivent. Ils vont soit au sein d'un fichier de
paquetage ou de classe, soit dans le préambule d'un document
@LaTeX{}. Si vous les mettez dans le préambule, elle doivent être entre
une commande @code{\makeatletter} et une commande @code{\makeatother}.
(Le message d'erreur @code{You can't use `\spacefactor' in vertical
mode.}  est le plus probable lorsque on oublie de faire
cela). @xref{\makeatletter & \makeatother}.

L'exemple ci-dessous centre les titres de section et les met en gros
caractères gras. Il le fait avec @code{\renewcommand} parce que les
classes standardes de @LaTeX{} ont déjà une commande @code{\section} de
définie. Pour la même raison il ne définit ni un compteur
@code{section}, ni les commandes @code{\thesection} et
@code{\l@@section}.

@example
\renewcommand\section@{%
  \@@startsection@{section@}% @ref{\@@startsection/name,@var{nom},@var{nom}}.
  @{1@}% @ref{\@@startsection/level,@var{niveau},@var{niveau}}.
  @{0pt@}% @ref{\@@startsection/indent,@var{retrait},@var{retrait}}.
  @{-3.5ex plus -1ex minus -.2ex@}% @ref{\@@startsection/beforeskip,@var{avant},@var{avant}}.
  @{2.3ex plus.2ex@}% @ref{\@@startsection/afterskip,@var{après},@var{après}}.
  @{\centering\normalfont\Large\bfseries@}@}% @ref{\@@startsection/style,@var{style},@var{style}}.
@end example


L'exemple ci-dessous met les titres de @code{subsection} en petites
capitales, et leur fait faire corps avec le paragraphe suivant.

@example
\renewcommand\subsection@{%
  \@@startsection@{subsection@}%  @ref{\@@startsection/name,@var{nom},@var{nom}}.
    @{2@}% @ref{\@@startsection/level,@var{niveau},@var{niveau}}.
    @{0em@}% @ref{\@@startsection/indent,@var{retrait},@var{retrait}}.
    @{-1ex plus 0.1ex minus -0.05ex@}% @ref{\@@startsection/beforeskip,@var{avant},@var{avant}}.
    @{-1em plus 0.2em@}% @ref{\@@startsection/afterskip,@var{après},@var{après}}.
    @{\scshape@}% @ref{\@@startsection/style,@var{style},@var{style}}.
  @}
@end example


Les exemples précédents redéfinissaient les commandes de titre de
rubriques existantes.  L'exemple suivant définit une nouvelle commande,
illustrant la nécessité d'un compteur et de macros pour son affichage.

@c From https://groups.google.com/forum/#!searchin/comp.text.tex/startsection%7Csort:relevance/comp.text.tex/sB-nTS-oL08/ZZeKYdG0llMJ
@example
\setcounter@{secnumdepth@}@{6@}% affiche les compteurs justqu'à ce niveau
\newcounter@{subsubparagraph@}[subparagraph]% compteur pour la
                                          % numérotation
\renewcommand@{\thesubsubparagraph@}%
   @{\thesubparagraph.\@@arabic\c@@subsubparagraph@}% comment afficher
                                                % la numérotation
\newcommand@{\subsubparagraph@}@{\@@startsection
                         @{subsubparagraph@}%
                         @{6@}%
                         @{0em@}%
                         @{\baselineskip@}%
                         @{0.5\baselineskip@}%
                         @{\normalfont\normalsize@}@}
\newcommand*\l@@subsubparagraph%
  @{\@@dottedtocline@{6@}@{10em@}@{5em@}@}% pour la table des matières
\newcommand@{\subsubparagraphmark@}[1]@{@}% pour les en-têtes de page
@end example

@node Cross references
@chapter Des renvois
@cindex renvois

Une des raisons pour numéroter des choses telles que les figures ou les
équations est d'indiquer au lecteur une référence vers elles, comme dans « Voir la
figure 3 pour plus de détails. »

@cindex étiquette
Souvent on désire écrire quelque chose du genre de @samp{Voir
théorème~31}. Mais Inclure manuellement le numéro est une mauvaise
pratique. Au lieu de cela, il vaut mieux écrire une @dfn{étiquette} du
genre @code{\label@{eq:ThmGreens@}} puis lui @dfn{faire référence} avec
@code{Voir l'équation~\ref@{eq:ThmGreens@}}. @LaTeX{} se charge de
déterminer automatiquement le numéro, de le produire en sortie, et de le
changer par la suite si besoin est.

@example
Cela apparaîtra avec le théorème~\ref@{th:ThmGreens@}. % référence déclarée en aval
...
\begin@{theorem@} \label@{th:ThmGreens@}
  ...
\end@{theorem@}
...
Voir le théorème~\ref@{th:ThmGreens@} page~\pageref@{th:ThmGreens@}.
@end example


@LaTeX{} garde trace de l'information de renvoi dans un
fichier avec le même nom de base que le fichier contenant le
@code{\label@{...@}} mais avec une extension @file{.aux}. Ainsi si
@code{\label} est dans @file{calcul.tex} alors cette information est
dans @file{calcul.aux}. @LaTeX{} met cette information dans ce fichier à
chaque fois qu'il rencontre un @code{\label}.

@ignore
(L'information a le format
@code{\newlabel@{@var{étiquette}@}@{@{@var{étiquette-courante}@}@{@var{numéro-de-page}@}@}}
où @var{étiquette-courante} est la valeur de la macro
@code{\@@currentlabel} qui est d'ordinaire mise à jour à chaque vous que
vous appelez @code{\refstepcounter@{@var{compteur}@}}.)
@end ignore

@cindex référence déclarée en aval
@cindex aval, référence déclarée en
@cindex déclaration en aval de référence
L'effet secondaire le plus courant du paragraphe précédent se produit
lorsque votre document a une @dfn{référence déclarée en aval}, c.-à-d.@:
un @code{\ref} qui apparaît avant le @code{\label} associé. Si c'est la
première fois que vous compilez le document alors vous obtiendrez un
message @code{LaTeX Warning: Label(s) may have changed. Rerun to get
cross references right.} et dans la sortie la référence apparaîtra comme
deux points d'interrogation @samp{??} en caractères gras. Ou, si vous
modifiez le document de telle façon que les références changent alors
vous obtiendrez le même avertissement et la sortie contiendra
l'information de référence de la fois précédente. La solution dans les
deux cas est juste de recompiler le document encore une fois.

@PkgIndex{cleveref}

Le paquetage @package{cleveref} élargit les possibilités de faire des
renvois de @LaTeX{}. Vous pouvez faire en sorte que si vous saisissez
@code{\begin@{thm@}\label@{th:Nerode@}...\end@{thm@}} alors
@code{\cref@{th:Nerode@}} produit en sortie @samp{théorème 3.21}, sans
que vous ayez à saisir le mot « théorème ».


@menu
* \label :: Attribuez un nom symbolique à un morceau de texte.
* \pageref:: Faire un renvoi à un numéro de page.
* \ref:: Faire un renvoi à une rubrique, figure ou chose similaire.
* xr@comma{} paquetage: xr package. Renvois depuis un autre document.
@end menu


@node \label
@section @code{\label}
@findex \label

Synopsis :

@example
\label@{@var{clef}@}
@end example

Attribut un numéro de référence à @var{clef}. Au sein de texte
ordinaire, @code{\label@{@var{clef}@}} attribut à @var{clef} le numéro
de la rubrique courante. Au sein d'un environnement numéroté, tel que
l'environnement @code{table} ou @code{theorem},
@code{\label@{@var{clef}@}} attribue le numéro de cet environnement à
@var{clef}. On retire le numéro attribué avec la commande
@code{\ref@{@var{clef}@}} (@pxref{\ref}).

Le nom @var{clef} peut se composer de n'importe quelle séquence de
lettres, chiffres, ou caractères de ponctuation ordinaires. Il est
sensible à la casse --- lettres capitales ou bas-de-casse.

Pour éviter de créer accidentellement deux étiquettes avec le même nom,
l'usage est d'utiliser des étiquettes composées d'un préfixe et d'un
suffixe séparés par un caractère @code{:} ou @code{.}. Certains préfixes
classiquement utilisés :

@table @code
@item ch
pour les chapitres
@item sec
les commandes de rubricage de niveau inférieur
@item fig
pour les figures
@item tab
pour les tableaux
@item eq
pour les équations
@end table

Ainsi, @code{\label@{fig:Euler@}} est une étiquette pour une figure avec
un portrait de ce grand homme.

Dans l'exemple ci-dessous la clef @code{sec:test} se verra attribuée le
numéro de la section courante et la clef @code{fig:test} se verra
attribuée le numéro de la figure.  Soit dit en passant, mettez les
étiquettes (@code{\label}) après les légendes (@code{\caption}) au sein
des environnements @code{figure} ou @code{table}.

@example
\section@{Titre de la rubrique@}
\label@{sec:test@}
Dans cette rubrique~\ref@{sec:test@}.
\begin@{figure@}
  ...
  \caption@{Texte de la légende@}
  \label@{fig:test@}
\end@{figure@}
Voir Figure~\ref@{fig:test@}.
@end example

@node \pageref
@section @code{\pageref@{@var{clef}@}}
@findex \pageref
@cindex renvoi avec numéro de page
@cindex numéro de page, renvoi

Synopsis :

@example
\pageref@{@var{clef}@}
@end example

Produit le numéro de page de l'endroit du texte où la commande
correspondante @code{\label}@{@var{clef}@} apparaît.

Dans cet exemple le @code{\label@{eq:principale@}} est utilisé à la fois
pour le numéro de la formule et pour le numéro de page. (Notez que les
deux références sont des références déclarées en aval, ainsi ce document
a besoin d'être compilé deux fois pour les résoudre).

@example
Le résultat principal est la formule~\ref@{eq:principale@} de la
page~\pageref@{eq:principale@}.
  ...
\begin@{equation@} \label@{eq:principale@}
   \mathbf@{P@}=\mathbf@{NP@}
\end@{equation@}
@end example

@node \ref
@section @code{\ref@{@var{clef}@}}
@findex \ref
@cindex renvoi, symbolique
@cindex numéro de rubrique, renvoi
@cindex numéro d'équation, renvoi
@cindex numéro de figure, renvoi
@cindex numéro de note en bas de page, renvoi

Synopsis :

@example
\ref@{@var{clef}@}
@end example

Produit le numéro de la rubrique, équation, note en bas de page, figure,
@dots{}, de la commande correspondante @code{\label} (@pxref{\label}).
Elle ne produit aucun texte, tel que le mot @samp{Section} ou
@samp{Figure}, juste le numéro lui-même sans plus.

Dans cet exemple, le @code{\ref@{populaire@}} produit @samp{2}.  Notez
que ceci est une référence déclarée en aval puisque elle est faite avant
@code{\label@{populaire@}}.

@example
Le format utilisé le plus largement est à l'article numéro~\ref@{populaire@}.
\begin@{enumerate@}
\item Plain \TeX
\item \label@{populaire@} \LaTeX
\item Con\TeX t
\end@{enumerate@}
@end example


@node xr package
@section Le paquetage @package{xr}

@PkgIndex{xr}
@PkgIndex{xr-hyper}
@findex \externaldocument
@cindex renvois entre documents

Synopsis :

@example
\usepackage@{xr@}
  \externaldocument@{@var{nom-de-base-document}@}
@end example

@noindent ou

@example
\usepackage@{xr@}
  \externaldocument[@var{préfixe-renvoi}]@{@var{nom-de-base-document}@}
@end example

Fait des renvois vers le document externe
@file{@var{nom-de-base-document}.tex}.

Voici un exemple. Si @file{cours.tex} comprend ce qui suit dans le
préambule :

@example
\usepackage@{xr@}
  \externaldocument@{exercises@}
  \externaldocument[IND-]@{indications@}
  \externaldocument@{reponses@}
@end example

@noindent
alors on peut utiliser des étiquettes de renvoi depuis les trois autres
documents. Supposons que @file{exercises.tex} a une liste énumérée qui
contient ceci :

@example
\item \label@{exer:ThmEuler@} Que se passe-t-il si chaque nœud a un
degré impair ?
@end example

@noindent
et que @file{indications.tex} comprend une liste énumérée avec ceci :

@example
\item \label@{exer:ThmEuler@} Distinguez le cas à deux nœuds.
@end example

@noindent
et que @file{reponses.tex} a une liste énumérée avec ceci :

@example
\item \label@{rep:ThmEuler@} Il n'y pas pas de chemin d'Euler, sauf
s'il y a exactement deux nœuds.
@end example

Après avoir compilé les documents @file{exercises}, @file{indications},
et @file{reponses}, saisir ce qui suit dans le corps de @file{cours.tex}
aura pour effet qu'on a accès depuis @file{cours} aux numéros de renvoi
utilisés dans les autres documents.

@example
Voir Exercice~\ref@{exer:ThmEuler@}, avec Indication~\ref@{IND-exer:ThmEuler@}.
La solution est Réponse~\ref@{rep:ThmEuler@}.
@end example

Le préfixe @code{IND-} pour les renvois depuis le fichier
@file{indications} est nécessaire parce que l'étiquette dans ce fichier
est la même que dans le fichier @file{exercices}. Sans ce préfixe, les
deux renvois auraient le numéro correspondant à ce dernier.

Note : si le document utilise le paquetage @package{hyperref} alors au
lieu de @package{xr}, placez @code{\usepackage@{xr-hyper@}} avant le
@code{\usepackage@{hyperref@}}.  Aussi, si l'un quelconque parmi les
documents utilise @package{hyperref} alors tous doivent l'utiliser.


@node Environments
@chapter Environnements
@cindex Environnements

@findex \begin
@findex \end

@LaTeX{} fournit beaucoup d'environnements pour baliser un certain texte.
Chaque environnement commence et se termine de la même manière :

@example
\begin@{@var{nomenv}@}
...
\end@{@var{nomenv}@}
@end example

@menu
* abstract::    Produit un abrégé.
* array::       Tableau pour les mathématiques.
* center::      Lignes centrées.
* description:: Lignes étiquetées.
* displaymath:: Formule qui apparaissent sur leur propre ligne.
* document::    Entoure le document en entier.
* enumerate::   Liste à numéros.
* eqnarray::    Séquences d'équations alignées.
* equation::    Équation en hors texte.
* figure::      Figures flottantes.
* filecontents:: Écrire des fichiers multiples à partir du fichier source.
* flushleft::   Lignes jusitifiées à gauche.
* flushright::  Lignes jusitifiées à droite.
* itemize::     Liste à puces.
* letter::      Lettres.
* list::        Environnement pour listes génériques.
* math::        Math en ligne.
* minipage::    Page miniature.
* picture::     Image avec du texte, des flèches, des lignes et des cercles.
* quotation et quote: quotation & quote.    Citer du texte.
* tabbing::     Aligner du texte arbitrairement.
* table::       Tables flottantes.
* tabular::     Aligner du texte dans les colonnes.
* thebibliography::     Bibliographie ou liste de références.
* theorem::     Théorèmes, lemmes, etc.
* titlepage::   Pour des pages de titre sur mesure.
* verbatim::    Simuler un entrée tapuscrite.
* verse::       Pour la poésie et d'autres choses.
@end menu


@node abstract
@section @code{abstract}

@EnvIndex{abstract}
@cindex résumé

Synopsis :
@example
\begin@{abstract@}
...
\end@{abstract@}
@end example

Produit un résumé, potentiellement contenant plusieurs paragraphes. Cet
environnement n'est défini que dans les classes de document
@code{article} et @code{report} (@pxref{Document classes}).

Utiliser l'exemple ci-dessous au sein de la classe @code{article}
produit un paragraphe détaché. L'option @code{titlepage} de la classe de
document a pour effet que le résumé soit sur une page séparée
(@pxref{Document class options}) ; ceci est le comportement par défaut
seulement dans la classe @code{report}.

@example
\begin@{abstract@}
  Nous comparons tous les récits de la proposition faits par Porter
  Alexander à Robert E Lee en lieu de l'Appomattox Court House que
  l'armée continue à combattre dans une guerre de guerilla, ce que Lee
  refusa.
\end@{abstract@}
@end example

L'exemple suivant produit un résumé en une-colonne au sein d'un document
en deux-colonnes (pour plus solution plus flexible, utilisez le paquetage
@file{abstract}).

@c Adopted from http://www.tex.ac.uk/FAQ-onecolabs.html
@example
\documentclass[twocolumn]@{article@}
  ...
\begin@{document@}
\title@{Babe Ruth comme ancêtre culturel : une approche atavique@}
\author@{Smith \\ Jones \\ Robinson\thanks@{Bourse des chemins de fer.@}@}
\twocolumn[
  \begin@{@@twocolumnfalse@}
     \maketitle
     \begin@{abstract@}
       Ruth n'était pas seulement le Sultan du Swat, il était à lui tout
       seul l'équipe du swat.
     \end@{abstract@}
   \end@{@@twocolumnfalse@}
   ]
@{   % by-hand insert a footnote at page bottom
 \renewcommand@{\thefootnote@}@{\fnsymbol@{footnote@}@}
 \footnotetext[1]@{Merci pour tout le poisson.@}
@}
@end example


@node array
@section @code{array}
@EnvIndex{array}
@cindex tableaux mathématiques

Synopsis :

@example
\begin@{array@}@{@var{patron}@}
@var{entrée-col-1}&@var{entrée-col-2} ... &@var{entrée-col-n}@}\\
...
\end@{array@}
@end example

@noindent
ou

@example
\begin@{array@}[@var{pos}]@{@var{patron}@}
@var{entrée-col-1}&@var{entrée-col-2} ... &@var{entrée-col-n}@}\\
...
\end@{array@}
@end example

Les tableaux mathématiques sont produits avec l'environnement
@code{array}. Cet environnement ne peut être utilisé qu'en mode math
(@pxref{Modes}), normalement au sein d'un environnement mathématique
hors texte tel qu'@code{equation} (@pxref{equation}).  Les entrées dans
chaque colonne sont séparées avec une esperluette (@code{&}). Les lignes
sont terminées par une double controblique (@pxref{\\}).

L'exemple suivant affiche un tableau trois par trois.

@example
\begin@{equation*@}
  \chi(x) =
  \left|              % barre verticale en bordure
    \begin@{array@}@{ccc@}
      x-a  &-b  &-c  \\
      -d   &x-e &-f  \\
      -g   &-h  &x-i
    \end@{array@}
 \right|
\end@{equation*@}
@end example

L'argument obligatoire @var{patron} décrit le nombre de colonnes,
l'alignement en leur sein, et le formatage des régions
inter-colonne. Par exemple,
@code{\begin@{array@}@{rcl@}...\end@{array@}} produit trois colonnes :
la première fer à droite, la deuxième centrée, et la troisième fer à
gauche. Voir @ref{tabular} pour une description complète de
@var{patron}, et des autres caractéristiques communes aux deux
environnements, y compris l'argument optionnel @code{pos}.

L'environnement @code{array} diverge de @code{tabular} par deux
aspects. Le premier est que les entrées de @code{array} sont composées
en mode mathématique, en style texte (@pxref{Math styles})
(sauf si le @var{patron} spécifie la colonne avec @code{p@{...@}}, ce
qui a pour effet que l'entrée est composée en mode texte). Le second est
que au lieu du paramètre @code{\tablcolsep} de @code{tabular}, l'espace
inter-colonne que @LaTeX{} met dans un @code{array} est contrôlé par
@findex \arraycolsep
@code{\arraycolsep}, qui spécifie la moitié de la largeur entre les
colonnes. La valeur par défaut est @samp{5pt} de sorte qu'un espace de
10@dmn{pt} sépare deux colonnes.

@PkgIndex{amsmath}
Pour obtenir des tableaux entre accolades la méthode standarde est
d'utiliser le paquetage @package{amsmath}. Il comprend les environnements
@code{pmatrix} pour un tableau entre parenthèses @code{(...)},
@code{bmatrix} pour un tableau entre crochets @code{[...]},
@code{Bmatrix} pour un tableau entre accolades @code{@{...@}},
@code{vmatrix} pour un tableau entre barres verticales @code{|...|}, et
@code{Vmatrix} pour un tableau entre doubles barres
verticales @code{||...||}, ainsi que diverses autres constructions de
tableaux.

@PkgIndex{amsmath}
L'exemple suivant utilise le paquetage @package{amsmath} :

@example
\usepackage@{amsmath@}  % dans le préambule

\begin@{equation@}
  \begin@{vmatrix@}@{cc@}
    a  &b \\
    c  &d
  \end@{vmatrix@}=ad-bc
\end@{equation@}
@end example

@PkgIndex{array}
@PkgIndex{dcolumn}
Il y a beaucoup de paquetages concernant les tableaux.  Le
paquetage @package{array} étend utilement leur possibilités de bien des
manières, et notamment en ajoutant des types de colonne.  Le
paquetage @package{dcolumn} ajoute un type de colonne pour centrer sur
le séparateur décimal. Pour les deux voir la documentation sur le CTAN.


@node center
@section @code{center}

@EnvIndex{center}
@cindex centrer du texte, environnement pour

Synopsis :

@example
\begin@{center@}
@var{ligne1} \\
@var{ligne2} \\
\end@{center@}
@end example

L'environnement @code{center} vous permet de créer un paragraphe
consistant de lignes qui sont centrées entre les marges de gauche et de
droite de la page courante. On utilise une double controblique,
@code{\\}, pour obtenir un saut de ligne (@pxref{\\}).
@findex \\ @r{(pour @code{center})}
Si du texte est trop long pour entrer dans une ligne, alors @LaTeX{}
insère des sauts de ligne en évitant de faire des césures ou de dilater
ou contracter tout espace inter-mot.

Cet environnement insère de l'espace au-dessus et au-dessous du corps du
texte. Voir @ref{\centering} pour ne pas avoir cet espace, par exemple
au sein d'un environnement @code{figure}.

L'exemple suivant produit trois lignes centrées.  Il y a un espace
vertical supplémentaire entre les deux dernières lignes.

@example
\begin@{center@}
  Une thèse soumise en remplissant partiellement \\
  les exigences de \\[0.5ex]
  l'École pour l'Ingénierie Environnementale
\end@{center@}
@end example

Dans l'exemple suivant, selon la largeur de la ligne de la page,
@LaTeX{} pourrait faire un saut de ligne pour la partie avant la double
controblique.  Si cela se produit, il en centre chaque ligne, et sinon
il en centre l'unique ligne.  Ensuite @LaTeX{} faut un saut de ligne à la
double controblique, et centre la partie finale.

@example
\begin@{center@}
  Mon père considérait comme intolérable quiconque fréquentait l'église mais ne buvait pas d'alcool.\\
  J'ai grandi dans cette croyance.  --- Richard Burton
\end@{center@}
@end example

Ajouter une double controblique à la fin de la ligne finale est
optionnel.  Lorsque elle est présente, cela n'ajoute pas d'espace
vertical.

Dans un document en double-colonne le texte est centré dans une colonne,
et non sur la page entière.

@menu
* \centering:: Forme déclarative de l'environnement @code{center}.
@end menu


@node \centering
@subsection @code{\centering}

@findex \centering
@cindex centrer du texte, déclaration pour

Synopsis :

@example
@{\centering ... @}
@end example

@noindent
ou

@example
\begin@{group@}
  \centering ...
\end@{group@}
@end example

Centre la matière dans sa portée.  Utilisée le plus souvent l'intérieur d'un
environnement tel que @code{figure} ou dans une @code{parbox}.

L'exemple suivant de déclaration @code{\centerin} a pour effet de
centrer le graphique horizontalement.

@example
\begin@{figure@}
  \centering
  \includegraphics[width=0.6\textwidth]@{ctan_lion.png@}
  \caption@{CTAN Lion@}  \label@{fig:CTANLion@}
\end@{figure@}
@end example

@noindent
La portée de ce @code{\centering} finit avec le @code{\end@{figure@}}.

Contrairement à l'environnement @code{center}, la commande
@code{\centering} n'ajoute pas d'espacement vertical au-dessus et
au-dessous du texte. C'est son avantage dans l'exemple précédent ; il n'y
a pas d'espace en trop.

Elle ne commence pas non plus un nouveau paragraphe ; elle change
simplement la façon dont @LaTeX{} formate les unités paragraphe. Si
@code{ww @{\centering xx \\ yy@} zz} est entouré de lignes à blanc,
alors @LaTeX{} crée un paragraphe dont la première ligne @code{ww xx}
est centrée, et dont la seconde ligne, non centrée, contient @code{yy
zz}. Généralement, ce qu'on désire c'est que la portée de la déclaration
contienne une ligne à blanc ou la commande @code{\end} d'un
environnement tel que @code{figure} ou @code{table} qui finisse l'unité
paragraphe.  Ainsi, si @code{@{\centering xx \\ yy\par@} zz} est entouré
de lignes à blanc alors cela fabrique un nouveau paragraphe avec deux
lignes centrées @samp{xx} et @samp{yy}, suivi d'un nouveau paragraphe
@samp{zz} qui est formaté comme d'habitude.


@node description
@section @code{description}

@EnvIndex{description}
@cindex listes étiquetées, créer
@cindex listes de description, créer

Synopsis :

@example
\begin@{description@}
\item [@var{étiquette du 1er article}] @var{texte du 1er article}
\item [@var{étiquette du 2e article}] @var{texte du 2e article}
...
\end@{description@}
@end example

@findex \item
L'environnement @code{description} est utilisé pour fabriquer des listes
d'articles étiquetés. Chaque @var{étiquette} d'article est composée en
gras, alignée à gauche de sorte que les étiquettes longues continuent
sur la première ligne du texte de l'article.  Il doit y avoir au moins un
article ; sans cela on provoque l'erreur @LaTeX{} @samp{Something's
wrong--perhaps a missing \item}.

Cet exemple montre l'environnement utilisé pour une séquence de
définitions.

@example
\begin@{definition@}
  \item[lama] Un prêtre.
  \item[lame] Une pièce coupante.
@end example

@noindent
Les étiquettes @samp{lama} et @samp{llama} ressortent en gras avec leur
bords gauches alignés sur la marge de gauche.

@findex \item
Faites démarrer la liste d'articles avec la commande @code{\item}
(@pxref{\item}). Utilisez l'étiquette optionnelle, comme dans
@code{\item[Point principal]}, en effet il n'y a pas de valeur par
défaut sensée. Après le @code{\item} se trouve du texte optionnel
pouvant contenir plusieurs paragraphes.

@cindex gras machine à écrire, éviter
@cindex gras tapuscrit, éviter
@cindex étiquette machine à écrire dans les listes
@cindex étiquette tapuscrite dans les listes
Comme les étiquettes sont en gras, si le texte de l'étiquette appelle un
changement de police effectué dans la forme à argument (voir @ref{Font
styles,styles des polices}) alors il ressortira en gras.  Par exemple,
si le texte de l'étiquette est en police machine à écrire comme dans
@code{\item[\texttt@{texte étiquette@}]} alors il apparaîtra en
tapuscrit gras, si cela est disponible. La méthode la plus simple pour
obtenir la police tapuscrit non grasse est d'utiliser la forme
déclarative : @code{\item[@{\tt texte étiquette@}]}.  De la même façon,
obtenez la police romaine standarde avec @code{\item[@{\rm texte
étiquette@}]}.

En ce qui concerne les autres principaux environnements de liste à
étiquettes de @LaTeX{}, voir @ref{itemize} et @ref{enumerate}.
Contrairement à ces environnements, imbriquer les environnements
@code{description} ne change pas l'étiquette par défaut ; elle est en
gras et alignée à gauche à tous les niveaux.

Pour plus d'information sur les paramètres de disposition de liste, y
compris les valeurs par défaut, et sur la personnalisation de la
disposition de liste, voir @ref{list}.  Le paquetage @package{enumitem} est
utile pour personnaliser les listes.

Cet exemple met les étiquettes de description en petites capitales.

@example
\renewcommand@{\descriptionlabel@}[1]@{%
  @{\hspace@{\labelsep@}\textsc@{#1@}@}@}
@end example


@node displaymath
@section @code{displaymath}
@c http://tex.stackexchange.com/questions/40492/what-are-the-differences-between-align-equation-and-displaymath

@EnvIndex{displaymath}

Synopsis :

@example
\begin@{displaymath@}
@var{des maths}
\end@{displaymath@}
@end example


L'environnement @code{displaymath} compose le texte @var{des maths} sur
sa propre ligne, centré par défaut.  L'option globale @code{fleqn}
justifie les équations à gauche ; voir @ref{Document class options}.

Aucun numéro d'équation n'est ajouté au texte de texte
@code{displaymath} ; pour obtenir un numéro d'équation, vous pouvez
utiliser l'environnement @code{equation} (@pxref{equation}).

@LaTeX{} ne fait pas de saut de ligne au sein de @var{des maths}.

@PkgIndex{amsmath}
Notez que le paquetage @package{amsmath} comprend des possibilités beaucoup
plus vastes en matière d'affichage d'équations. Par exemple, il offre
plusieurs alternatives pour effectuer des sauts de lignes au sein de
texte en mode mathématique.

@findex \[...\] @r{displaymath}
La construction @code{\[@var{des maths}\]} est un synonyme de
l'environnement @code{\begin@{displaymath@}@var{des
maths}\end@{displaymath@}}, mais ce dernier est plus pratique à
manipuler dans le fichier source ; par exemple la recherche d'un
caractère crochet @code{]} peut donner des faux positifs, alors qu'il
est plus probable que le mot @code{displaymath} soit unique.


@findex $$...$$ @r{displaymath, forme approchée en @value{PlainTeX}}
(Digression : la construction @code{$$@var{des maths}$$} tirée du
langage @value{PlainTeX} est souvent utilisée à tort comme un synonyme
de @code{displaymath}.  Elle n'en est pas un, et n'est pas du tout
officiellement prise en charge par @LaTeX{} ; @code{$$} ne prend pas en
charge @code{fleqn} (@pxref{Document class options}), gère l'espacement
vertical différemment, et n'effectue pas de vérification de
cohérence).

Le texte composé par cet exemple est centré et seul sur sa ligne.
@example
\begin@{displaymath@}
  \int_1^2 x^2\,dx=7/3
\end@{displaymath@}
@end example
De plus, le signe intégrale est plus grand que ce que la version en
ligne @code{\( \int_1^2 x^2\,dx=7/3 \)} produit.

@node document
@section @code{document}

@EnvIndex{document}

L'environnement @code{document} entoure le corps entier d'un document.
Il est obligatoire dans tout document @LaTeX{}. @xref{Starting and
ending}.
@menu
* \AtBeginDocument::          Crochet pour commandes à exécuter au début du document.
* \AtEndDocument::            Crochet pour commandes à exécuter à la fin du document.
@end menu


@node \AtBeginDocument

@findex \AtBeginDocument
@cindex début de document, crochet

Synopsis :

@example
\AtBeginDocument@{@var{code}@}
@end example

Sauvegarde @var{code} et exécute le quand @code{\begin@{document@}} est
exécuté, à la toute fin du préambule.  Le code est exécuté après que les
tables de sélection de police ont été réglées, ainsi la police normale
du document est la police courante. Toutefois, le code est exécuté en
tant que faisant partie du préambule, c'est pourquoi on ne peut pas
composer du texte avec.

On peut utiliser cette commande plus d'une fois ; les lignes de code
successives sont exécutée dans l'ordre de passage à la commande.


@node \AtEndDocument

@findex \AtEndDocument
@cindex fin document, crochet

Synopsis :

@example
\AtEndDocument@{@var{code}@}
@end example

Sauvegarde @var{code} et l'exécute vers la fin du document.  Plus
précisément, il est exécuté lorsque @code{\end@{document@}} est exécuté,
avant que la dernière page ne soit terminée et avant que tous
environnements flottant restants soient traités. Si on désire d'une
partie du code soit exécuté après ces deux traitements, alors il suffit
d'inclure un @code{\clearpage} à l'endroit approprié du @var{code}.

On peut utiliser cette commande plus d'une fois ; les lignes de code
successives sont exécutée dans l'ordre de passage à la commande.

@node enumerate
@section @code{enumerate}

@EnvIndex{enumerate}
@cindex listes d'articles numérotés
@cindex numérotés, listes d'articles

Synopsis :

@example
\begin@{enumerate@}
\item @var{article1}
\item @var{article2}
...
\end@{enumerate@}
@end example

L'environnement @code{enumerate} produit une liste numérotée d'articles.
Le format du numéro en étiquette dépend de si cet environnement est
imbriqué dans un autre ; voir plus bas.

@findex \item
La liste consiste en au moins un article. L'absence d'article cause
l'erreur @LaTeX{} @samp{Something's wrong--perhaps a missing \item}.
Chaque article est produit avec la commande @code{\item}.

Cet exemple fait la liste des deux premiers coureurs à l'arrivée du
marathon olympique de 1908 :

@example
\begin@{enumerate@}
 \item Johnny Hayes (USA)
 \item Charles Hefferon (RSA)
\end@{enumerate@}
@end example

Les énumérations peuvent être imbriquées les unes dans les autres,
jusqu'à une profondeur de quatre niveaux. Elles peuvent aussi être
imbriquées au sein d'autres environnements fabriquant des paragraphes,
tels que @code{itemize} (@pxref{itemize}) et @code{description}
(@pxref{description}).
Le format de l'étiquette produite dépend du niveau d'imbrication de la
liste. Voici les valeurs par défaut de @LaTeX{} pour le format à chaque
niveau d'imbrication (où 1 est le niveau le plus externe) :

@enumerate
@item numéro arabe suivi d'un point : @samp{1.}, @samp{2.}, @dots{}
@item lettre en bas de casse et entre parenthèse : @samp{(a)}, @samp{(b)} @dots{}
@item numéro romain en bas de casse suivi d'un point : @samp{i.}, @samp{ii.}, @dots{}
@item lettre capitale suivie d'un point : @samp{A.}, @samp{B.}, @dots{}
@end enumerate


@findex \enumi
@findex \enumii
@findex \enumiii
@findex \enumiv
L'environnement @code{enumerate} utilise les compteurs @code{\enumi},
@dots{}, @code{\enumiv} (@pxref{Counters}).  Si vous utilisez l'argument
optionnel d'@code{\item} alors le compteur n'est pas incrémenté pour cet
article (@pxref{\item}).

@findex \labelenumi
@findex \labelenumii
@findex \labelenumiii
@findex \labelenumiv
L'environnement @code{enumerate} utilise les commandes de
@code{\labelenumi} jusqu'à @code{\labelenumiv} pour produire l'étiquette
par défaut. Ainsi, vous pouvez utiliser @code{\renewcommand} pour
changer le format des étiquettes (@pxref{\newcommand &
\renewcommand}). Par exemple, cette liste de premier niveau va être
étiquetée avec des lettres capitales, en gras, non suivies point :

@findex \Alph @r{exemple}
@example
\renewcommand@{\labelenumi@}@{\textbf@{\Alph@{enumi@}@}@}
\begin@{enumerate@}
  \item eI
  \item bi:
  \item si:
\end@{enumerate@}
@end example


Pour une liste des commandes comme @code{\Alph} utilisables pour
formater le compteur d'étiquette voir @ref{\alph \Alph \arabic \roman
\Roman \fnsymbol}.

Pour plus ample information sur la personnalisation de la forme
@c layout -> forme ?
voir @ref{list}.  De même, le paquetage @package{enumitem} est utile pour
cela.

@node eqnarray
@section @code{eqnarray}

@EnvIndex{eqnarray}
@cindex équations, aligner
@cindex aligner des équations

@cindex @code{align} @r{environnement, d'@package{amsmath}}
@cindex @package{amsmath} @r{paquetage, remplaçant @code{eqnarray}}
@cindex @identity{Madsen, Lars}
L'environnement @code{eqnarray} est obsolète. Il a des maladresses parmi
lesquelles l'espacement qui est incohérent avec d'autres éléments
mathématiques. (Voir l'article « Évitez @identity{eqnarray} ! »@: de @identity{Lars Madsen}
(@url{http://tug.org/TUGboat/tb33-1/tb103madsen.pdf}). Les nouveaux
documents devraient inclure le paquetage @package{amsmath} et utiliser les
environnements d'affichage mathématique que celui-ci fournit, tels que
@code{align}. On inclut une description uniquement pour être complet et
pour pouvoir travailler avec d'anciens documents.

Synopsis :

@example
\begin@{eqnarray@} @r{(ou @code{eqnarray*})}
@var{formula1} \\
@var{formula2} \\
...
\end@{eqnarray@}
@end example

@findex \\ (for @code{eqnarray})
L'environnement @code{eqnarray} est utilisé pour afficher une séquence
d'équations ou d'inégalités. Il est similaire à un environnement
@code{array} à trois colonnes, avec des lignes consécutives séparées par
@code{\\} et des articles consécutifs au sein d'une ligne séparé par une
esperluette @code{&}.

@findex \\* (pour @code{eqnarray})
@code{\\*} peut aussi être utilisé pour séparer les équations, avec sa
signification normale de ne pas autoriser un saut de page à cette ligne.

@findex \nonumber
@cindex numéro d'équation, omettre
Un numéro d'équation est placé sur chaque ligne à moins que cette ligne
ait une commande @code{\nonumber}. Alternativement, la forme étoilé (en
@code{*}) de l'environnement (@code{\begin@{eqnarray*@}
... \end@{eqnarray*@}}) omet la numérotation des équations entièrement,
tout en faisant par ailleurs la même chose qu'@code{eqnarray}.

@findex \lefteqn
La commande @code{\lefteqn} est utilisée pour couper les longues
formules sur plusieurs lignes. Elle compose son argument en hors texte
et le justifie à gauche dans une boîte de largeur nulle.

@node equation
@section @code{equation}

@EnvIndex{equation}
@cindex équations, environnement pour
@cindex formules, environnement pour

Synopsis :

@example
\begin@{equation@}
@var{texte mathématique}
\end@{equation@}
@end example

Même chose que l'environnement @code{displaymath} (@pxref{displaymath})
à ceci près que @LaTeX{} place un numéro d'équation aligné sur la marge
de droite. Le numéro d'équation est généré en utilisant le compteur
@code{equation}.

Il ne faut aucune ligne vide entre @code{\begin@{equation@}} et
@code{\begin@{equation@}}, sinon @LaTeX{} dit qu'il manque une signe
dollar.

@PkgIndex{amsmath}
Le paquetage @package{amsmath} comprend des moyens étendus pour l'affichage
d'équations.  Les nouveaux documents devraient inclure ce paquetage.

@node figure
@section @code{figure}
@EnvIndex{figure}
@cindex insérer des figures
@cindex figures, insertion

Synopsis :

@example
\begin@{figure@}[@var{placement}]
  @var{corpsfigure}
  \caption[@var{titreldf}]@{@var{texte}@}  % optionnel
  \label@{@var{étiquette@}}          % optionnel
\end@{figure@}
@end example

@noindent
ou :

@example
\begin@{figure*@}[@var{placement}]
  @var{corpsfigure}
  \caption[@var{titreldf}]@{@var{texte}@}  % optionnel
  \label@{@var{étiquette@}}          % optionnel
\end@{figure*@}
@end example

Les figures sont de la matière qui ne fait pas partie du texte normal.  Un
exemple est de la matière qu'on ne peut pas avoir segmenté entre deux
pages, comme un graphique.  À cause de cela, @LaTeX{} ne compose pas les
figures en séquence avec le texte normal, mais au lieu de cela les fait
« flotter » jusqu'à un endroit convenable, tel que le haut de la page
suivante (@pxref{Floats}).


Le @var{corpsfigure} peut consister de graphiques importés
(@pxref{Graphics}), de texte, de commandes @LaTeX{}, etc. Il est composé
une @code{parbox} de largeur @code{\textwidth}.


Pour les valeurs possibles de @var{placement} sont @code{h} pour « ici »
(@samp{here} en anglais), @code{t} pour « en haut » (@samp{top}),
@code{b} pour « en bas », et @code{p} pour sur un page séparée de
flottants. Pour l'effet de ces options sur l'algorithme de placement des
flottants, voir @ref{Floats}.

La version étoilée @code{figure*} est utilisée quand un document est en
mode double-colonne (@pxref{\twocolumn}). elle produit une figure qui
s'étend sur les deux colonnes, au sommet de la page. Pour ajouter la
possibilité de la placer à un bas de page voir la discussion de
@var{placement} @code{b} dans @ref{Floats}.

L'étiquette est optionnelle ; elle est utilisée pour les renvois
(@pxref{Cross references}).
@findex \caption
La commande optionnelle @code{\caption} spécifie la légende @var{texte}
pour la figure (@pxref{\caption}). La légende est numérotée par
défaut. Si @var{titreldf} est présent, il est utilisé dans la liste des
figures au lieu de @var{texte} (@pxref{Table of contents etc.}).

Cet exemple fabrique une figure à partir d'un graphique. Il nécessite
l'un des paquetages @file{graphics} ou @file{graphicx}. Le graphique,
avec sa légende, est placé au sommet d'une page ou, s'il est rejeté à la
fin du document, sur une page de flottants.

@example
\begin@{figure@}[t]
  \centering
  \includegraphics[width=0.5\textwidth]@{CTANlion.png@}
  \caption@{The CTAN lion, by Duane Bibby@}
\end@{figure@}
@end example


@node filecontents
@section @code{filecontents}: Écrire un fichier externe
@EnvIndex{filecontents}
@EnvIndex{filecontents*}
@cindex fichier externe, écrire
@cindex écrire un fichier externe

Synopsis :

@example
\begin@{filecontents@}[@var{option}]@{@var{nomfichier}@}
@var{texte}
\end@{filecontents@}
@end example

@noindent
ou

@example
\begin@{filecontents*@}[@var{option}]@{@var{nomfichier}@}
@var{texte}
\end@{filecontents*@}
@end example

Crée un fichier nommé @var{nomfichier} dans le répertoire courant (ou
dans le répertoire de sortie s'il a été spécifié ; @pxref{output
directory}) et y écrit @var{texte}. Par défaut un fichier déjà existant
n'est pas écrasé.

La version non étoilée de l'environnement @code{filecontent} préfixe le
contenu du ficher créé d'une en-tête de commentaires @TeX{} ; voir
l'exemple ci-dessous. La version étoilée @code{filecontent*} n'inclut
par l'en-tête.

Les options possibles sont :

@table @code
@item force
@itemx overwrite
@cindex @code{force}, option de @code{filecontents}
@cindex @code{overwrite}, option de @code{filecontents}
Écrase le fichier s'il existe.

@item noheader
@cindex @code{noheader}, option de @code{filecontents}
Omet l'en-tête. Équivalent à utiliser @code{filecontents*}.

@item nosearch
@cindex @code{nosearch}, option de @code{filecontents}
Vérifie uniquement si un fichier existe dans le répertoire courant (et
le répertoire de sortie, s'il a été spécifié), non dans le chemin
complet de recherche.


@end table

Ces options ont été ajoutées à la parution 2019 de @LaTeX{}.

@cindex sources autonomes
@cindex fichiers source, rendre autonomes
Cet environnement peut être utilisé n'importe où dans le préambule, bien
qu'il apparaisse souvent avant la commande @code{\documentclass}. Elle
est classiquement utilisée pour créer un fichier @code{.bib} ou d'autre
fichier de données similaire à partir du document source principale, de
sorte à rendre le fichier source autonome. De même, il peut être utilisé
pour créer un fichier personnalisé de style ou de classe, rendant ainsi
encore le source autonome.


Par exemple, ce document :

@example
\documentclass@{article@}
\begin@{filecontents@}@{JH.sty@}
\newcommand@{\monnom@}@{Jim Hef@{@}feron@}
\end@{filecontents@}
\usepackage@{JH@}
\begin@{document@}
Un article de \monnom.
\end@{document@}
@end example

produit ce fichier @file{JH.sty} :

@example
%% LaTeX2e file `JH.sty'
%% generated by the `filecontents' environment
%% from source `test' on 2015/10/12.
%%
\newcommand@{\monnom@}@{Jim Hef@{@}feron@}
@end example


@node flushleft
@section @code{flushleft}
@EnvIndex{flushleft}
@cindex justifier à gauche du texte, environnement pour
@cindex texte fer à gauche, environnement pour
@cindex texte ferré à gauche, environnement pour
@cindex texte drapeau droit, environnement pour

Synopsis :

@example
\begin@{flushleft@}
@var{ligne1} \\
@var{ligne2} \\
...
\end@{flushleft@}
@end example

@findex \\ @r{'pour @code{flushleft})}
L'environnement @code{flushleft} vous permet de créer un paragraphe
ferré à gauche, c'est à dire consistant en lignes qui sont alignées sur
la marge de gauche et en dentelures à droite comme un drapeau dont la
hampe (fer du composeur) serait à gauche et les franges à droite. Si
vous avez des lignes qui sont trop longues alors @LaTeX{} insère des
sauts de ligne sans faire de césure ni dilater ou contracter les espaces
inter-mot. Pour forcer un saut de ligne on utilise une double
controblique, @code{\\}. Pour la forme déclarative,
voir @ref{\raggedright}.

L'exemple suivant crée une boîte de texte qui fait au plus 7,5cm de
large, et dont le texte est fer à gauche et drapeau à droite.

@example
\noindent\begin@{minipage@}@{7.5cm@}
\begin@{flushleft@}
  Une longue phrase que \LaTeX@{@} coupe à l'endroit approprié. \\
  Et, une nouvelle ligne forcée par la double controblique.
\end@{flushleft@}
\end@{minipage@}
@end example

@menu
* \raggedright:: Forme déclarative de l'environnement @code{flushleft}.
@end menu


@node \raggedright
@subsection @code{\raggedright}
@findex \raggedright
@cindex texte drapeau droit
@cindex texte ferré à gauche
@cindex texte fer à gauche
@cindex justifié à gauche du texte
@cindex justification, drapeau droit

Synopsis :

@example
@{\raggedright  ... @}
@end example

@noindent
ou :

@example
\begin@{@var{environnement}@} \raggedright
  ...
\end@{@var{environnement}@}
@end example

Une déclaration qui a pour effet que les lignes sont ferrées sur la
marge de gauche et drapeau sur la droite, c.-à-d.@: que les mots sont
alignés sur la gauche comme sur le fer du composeur, et en dentelure
comme les franges d'un drapeau à droite. Elle peut être utilisée au sein
d'un @var{environnement} tel que @code{quote} ou d'une
@code{parbox}. Pour la forme par environnement voir @ref{flushleft}.

Contrairement à l'environnement @code{flushleft}, la commande
@code{\raggedright} ne démarre pas un nouveau paragraphe ; elle change
seulement la façon dont @LaTeX{} formate les unités de paragraphe. Pour
affecter le format d'une unité de paragraphe, la portée de la déclaration
doit contenir la ligne à blanc ou la commande @code{\end} qui termine
l'unité de paragraphe.


Dans l'exemple ci-après @code{\raggedright} dans la deuxième colonne
empêche @LaTeX{} de faire une composition très maladroite pour faire
rentrer le texte dans une colonne étroite.  Notez que
@code{\raggedright} est au sein d'accolades @code{@{...@}} pour borner
son effet.

@example
\begin@{tabular@}@{rp@{5cm@}@}
  Équipe alpha  &@{\raggedright Cette équipe fait le travail réel.@} \\
  Équipe bêta   &@{\raggedright Cette équipe assure que le système de
                   refroidissement ne manque jamais d'eau.@} \\
\end@{tabular@}
@end example

@node flushright
@section @code{flushright}
@EnvIndex{flushright}
@cindex texte drapeau gauche, environnement pour
@cindex justifier à droite, environnement pour

@example
\begin@{flushright@}
  @var{ligne1} \\
  @var{ligne2} \\
...
\end@{flushright@}
@end example

@findex \\ @r{(pour @code{flushright})}
L'environnement @code{flushright} vous permet de créer un paragraphe
ferré à droite et drapeau gauche, c.-à-d.@: consistant de lignes qui
sont alignées sur la marge de droite (fer à droite) et en dentelures
(drapeau) sur la marge de gauche. Si vous avez des lignes qui sont trop
longues pour entrer entre les marges, alors @LaTeX{} insère des sauts de
ligne sans faire de césure ni dilater ou contracter les espaces
inter-mot. Pour forcer un saut de ligne on utilise une double
controblique, @code{\\}. Pour la forme déclarative,
voir @ref{\raggedleft}.

Pour un exemple en relation avec cet environnement,
voir @ref{flushleft}, où il suffit mutatis mutandis de changer
@code{flushright} en @code{flushleft}.


@menu
* \raggedleft:: Forme déclarative de l'environnement @code{flushright}.
@end menu


@node \raggedleft
@subsection @code{\raggedleft}
@findex \raggedleft
@cindex texte drapeau gauche
@cindex justification, drapeau gauche
@cindex justifier le texte à droite

Synopsis :

@example
@{\raggedleft  ... @}
@end example

@noindent
ou

@example
\begin@{@var{environnement}@} \raggedleft
  ...
\end@{@var{environnement}@}
@end example

Une déclaration qui a pour effet que les lignes sont ferrées sur la
marge de droite et drapeau sur la gauche, c.-à-d.@: que les mots sont
alignés sur la droite comme sur le fer du composeur, et en dentelure
comme les franges d'un drapeau à gauche. Elle peut être utilisée au sein
d'un @var{environnement} tel que @code{quote} ou d'une
@code{parbox}. Pour la forme par environnement voir @ref{flushleft}.

Contrairement à l'environnement @code{flushright}, la commande
@code{\raggedleft} ne démarre pas un nouveau paragraphe ; elle change
seulement la façon dont @LaTeX{} formate les unités de paragraphe. Pour
affecter le format d'une unité de paragraphe, la portée de la déclaration
doit contenir une ligne à blanc ou la commande @code{\end} qui termine
l'unité de paragraphe.

Pour un exemple en relation avec cet environnement,
voir @ref{\raggedright}, où il suffit mutatis mutandis de changer
@code{\raggedright} en @code{\raggedleft}.

@node itemize
@section @code{itemize}
@EnvIndex{itemize}
@findex \item
@cindex listes d'articles
@cindex listes non ordonnées
@cindex listes à puces

Synopsis :

@example
\begin@{itemize@}
  \item[@var{étiquette optionnelle du 1er article}] @var{texte du 1er article}
  \item[@var{étiquette optionnelle du 2e article}] @var{texte du 2e article}
   ...
\end@{itemize@}
@end example

L'environnement @code{itemize} produit une @dfn{liste non ordonnée}, qu'on
appelle parfois liste à puces. Il doit y avoir au moins une commande
@code{\item} au sein de l'environnement ; sans quoi @LaTeX{} produit
l'erreur @samp{Something's wrong--perhaps a missing \item}.

L'exemple suivant donne une liste à deux articles.

@example
\begin@{itemize@}
 \item Esquisse au crayon et aquarelle par Cassandra
 \item Portrait Rice
\end@{itemize@}
@end example

@noindent
Par défaut --- sans charger par ex.@: le paquetage @package{babel} avec une
autre langue que USenglish --- dans une liste au premier niveau
d'imbrication l'étiquette est rendue par une puce, @bullet{}.  Le format
des étiquettes dépend du niveau d'imbrication ; voir plus bas.


@findex \item
On démarre les articles de liste avec la commande @code{\item}
(@pxref{\item}).  Si vous passez à @code{\item} un argument optionnel en
le faisant suivre de crochets, comme dans @code{\item[@var{étiquette
optionnelle}]}, alors par défaut @var{étiquette optionnelle} apparaît en
gras et aligné à droite, de sorte qu'elle peut s'étendre dans la marge
de gauche.  Pour des étiquettes alignées à gauche voir l'environnement
@ref{description}. À la suite @code{\item} se trouve le texte que
l'article qui peut être vide ou contenir plusieurs paragraphes.

Les listes non ordonnées peuvent être imbriquées l'une dans l'autre, sur
jusqu'à quatre niveaux de profondeur. Elles peuvent aussi être imbriquées
avec d'autre environnements fabriquant des paragraphes, comme
@code{enumerate} (@pxref{enumerate}).

@findex \labelitemi
@findex \labelitemii
@findex \labelitemiii
@findex \labelitemiv
@anchor{itemize labelitemi}
@anchor{itemize labelitemii}
@anchor{itemize labelitemiii}
@anchor{itemize labelitemiv}
L'environnement @code{itemize} utilise les commandes de
@code{\labelitemi} jusqu'à @code{\labelitemiv} pour produire les
étiquettes par défaut (notez la convention que le nombre romain en bas
de casse à la fin du nom de la commande indique le niveau
d'imbrication). Voici les marques de chaque niveau :

@enumerate
@item @bullet{} (puce, issue de @code{\textbullet})
@item @b{-@w{-}} (tiret demi-cadratin gras, issu du @code{\normalfont\bfseries\textendash})
@item * (astérisque, issu de @code{\textasteriskcentered})
@iftex
@item @math{\cdot} (point centré verticalement, issu de @code{\textperiodcentered})
@end iftex
@ifnottex
@item . (point centré verticalement, rendu ici comme un point final, issu de @code{\textperiodcentered})
@end ifnottex
@end enumerate

@c vincentb1 cette information n'est pas dans l'original, vérifiez avec Karl :

Si vous utilisez le paquetage @package{babel} avec la langue
@code{french}, alors il y a des tirets pour tous les niveaux comme c'est
l'habitude des Français.



Utilisez @code{\renewcommand} pour changer les étiquettes. Par exemple,
pour que le premier niveau utilise des losanges :

@example
\renewcommand@{\labelitemi@}@{$\diamond$@}
@end example

@findex \leftmargin
@findex \leftmargini
@findex \leftmarginii
@findex \leftmarginiii
@findex \leftmarginiv
@findex \leftmarginv
@findex \leftmarginvi
@anchor{itemize leftmargin}
@anchor{itemize leftmargini}
@anchor{itemize leftmarginii}
@anchor{itemize leftmarginiii}
@anchor{itemize leftmarginiv}
@anchor{itemize leftmarginv}
@anchor{itemize leftmarginvi}
Les paramètres de @code{\leftmargini} jusqu'à @code{\leftmarginvi}
définissent la distance entre la marge de gauche de l'environnement
susjacent et la marge de gauche de la liste. (On utilise aussi la convention de
nommage de la commande avec un nombre romain en bas de casse à la fin
pour désigner le niveau d'imbrication). Les valeurs par défaut sont :
@code{2.5em} pour le niveau 1 (@code{2em} en mode deux-colonnes),
@code{2.2em} pour le niveau 2, @code{1.87em} pour le niveau 3 et
@code{1.7em} pour le niveau 4, avec des valeurs plus petites pour les
niveaux plus profondément imbriqués.

@PkgIndex{enumitem}
Pour les autres environnements majeurs de listes à étiquettes de
@LaTeX{}, voir @ref{description} et @ref{enumerate}. Les environnements
@code{itemize}, @code{enumerate} et @code{description} utilisent les
mêmes paramètres de contrôle de la disposition des listes. Pour leur
description, y compris les valeurs par défaut, ainsi que la
personnalisation de la disposition, voir @ref{list}. Le paquetage
@package{enumitem} est utile pour personnaliser les listes.

Dans cet exemple on réduit grandement l'espace de marge pour la liste à
puces la plus externe :

@example
\setlength@{\leftmargini@}@{1.25em@} % valeur par défaut 2.5em
@end example

@c xx TODO vérifier que tout cela se retouve bien dans node list.
@ignore
Quelques paramètres qui affectent le formatage des listes :

@ftable @code
@item \itemindent
Renfoncement supplémentaire avant chaque articles dans une liste ; la
valeur par défaut est zéro.

@item \labelsep
Espace entre l'étiquette et le texte d'un article ; la valeur par défaut
est @samp{.5em}.

@item \labelwidth
Largeur de l'étiquette ; la valeur par défaut est @samp{2em}, ou
@samp{1.5em} en mode deux-colonnes.

@item \listparindent
Renfoncement supplémentaire ajoutée aux paragraphes suivants à commencer
par le second au sein d'un article de liste ; la valeur par défaut est
@samp{0pt}.

@item \rightmargin
Distance horizontale entre la marge de droite de la liste et
l'environnement susjacent ; la valeur par défaut est @samp{0pt}, sauf à
l'intérieur des environnements @code{quote}, @code{quotation}, et
@code{verse}, où elle est réglée pour être égale à @code{\leftmargin}.

@end ftable

Paramètres affectant l'espacement vertical entre les articles de liste
(plutôt relâché, par défaut).

@ftable @code
@item \itemsep
Espace vertical entre les articles. La valeur par défaut est @code{2pt
plus1pt minus1pt} pour les documents en @code{10pt}, @code{3pt plus2pt
minus1pt} pour ceux en @code{11pt}, et @code{4.5pt plus2pt minus1pt}
pour ceux en @code{12pt}.

@item \parsep
Espace vertical supplémentaire entre les paragraphes au sein d'un
article de liste. Par défaut vaut la même chose que @code{\itemsep}.

@item \topsep
Espace vertical entre le premier article et le paragraphe précédent.
Pour les listes au niveau le plus haut, la valeur par défaut est
@code{8pt plus2pt minus4pt} pour les documents en @code{10pt}, @code{9pt
plus3pt minus5pt} pour ceux en @code{11pt}, et @code{10pt plus4pt
minus6pt} pour ceux en @code{12pt}. Ces valeurs sont réduites pour les
listes avec au moins un niveau d'imbrication.

@item \partopsep
Espace supplémentaire ajouté à @code{\topsep} quand l'environnement de
liste démarre un paragraphe. La valeur par défaut est @code{2pt plus1pt
minus1pt} pour les documents en @code{10pt}, @code{3pt plus1pt minus1pt}
pour ceux en @code{11pt}, et @code{3pt plus2pt minus2pt} pour ceux en
@code{12pt}.

@end ftable
@end ignore


@findex \parskip @r{exemple}
En particulier pour les listes avec des articles courts, il peut être
désirable d'élider l'espace entre les articles. Voici un exemple
définissant un environnement @code{itemize*} sans espacement
supplémentaire entre les articles, ni entre les paragraphes au sein d'un
seul article (@code{\parskip} n'est pas spécifique aux listes,
@pxref{\parindent & \parskip}):

@example
\newenvironment@{itemize*@}%
  @{\begin@{itemize@}%
    \setlength@{\itemsep@}@{0pt@}%
    \setlength@{\parsep@}@{0pt@}@}%
    \setlength@{\parskip@}@{0pt@}@}%
  @{\end@{itemize@}@}
@end example


@node letter
@section environnement @code{letter}: écrire des lettres postales
@EnvIndex{letter}

Cet environnement est utilisé pour créer des lettres. @xref{Letters}.


@node list
@section @code{list}
@EnvIndex{list}
@cindex listes d'articles, générique

Synopsis :

@example
\begin@{list@}@{@var{étiquetage}@}@{@var{espacement}@}
\item[@var{étiquette optionnelle du premier article}] texte du premier
  article
\item[@var{étiquette optionnelle du deuxième article}] texte du deuxième
  aticle
...
\end@{list@}
@end example

L'environnement @code{list} est un environnement générique qui est
utilisé pour construire des listes plus spécialisées. On l'utilise la
plupart du temps pour créer des listes via les environnements
@code{description}, @code{enumerate}, et @code{itemize}
(@pxref{description}, @ref{enumerate}, et @ref{itemize}).  Par ailleurs,
beaucoup d'environnements standards de @LaTeX{} qui visuellement ne sont
pas des listes sont construits en utilisant @code{list}, ceci comprend
@code{quotation}, @code{quote}, @code{center}, @code{verbatim}, et bien
d'autres (@pxref{quotation & quote}, @pxref{center},
@pxref{flushright}).

Ici, on décrit l'environnement @code{list} en définissant un
nouvel environnement personnalisé.

@example
\newcounter@{compteurlistenommage@}  % numérotes les articles
\newenvironment@{nommage@}
  @{\begin@{list@}
     @{Article~\Roman@{compteurlistenommage@}.@} % argument d'étiquetage
     @{\usecounter@{compteurlistenommage@}   % argument d'espacement
      \setlength@{\leftmargin@}@{3.5em@}@} % ...suite argument d'espacement
  @}
  @{\end@{list@}@}

\begin@{nommage@}
  \item Apparaît comme « Article~I. »
  \item[Étiquette spéciale.] Apparaît comme « Étiquette spéciale. »
  \item Apparaît comme « Article~II. »
\end@{nommage@}
@end example

L'argument obligatoire @var{étiquetage}, qui est le premier argument de
l'environnement @code{list}, spécifie comment les articles doivent être
étiquetés par défaut. Il peut contenir du texte et des commandes
@LaTeX{}, comme dans l'exemple précédent où il contient à la fois
@samp{Article} et @samp{\Roman@{@dots{}@}}. @LaTeX{} forme l'étiquette
en mettant l'argument @var{étiquetage} dans une boîte de largeur
@code{\labelwidth}. Si l'étiquette est plus large que cela, la matière
supplémentaire s'étend sur la droite. Lorsque vous fabriquez une
instance de @code{list} vous pouvez l'emporter sur l'étiquetage par
défaut en donnant à @code{\item} un argument optionnel avec des crochets
et le texte, comme dans l'exemple précédent @code{\item[Étiquette
spéciale.]} ; @pxref{\item}.

Le second argument obligatoire @var{espacement} prend une liste de
commandes. L'une de celle qu'on y retrouve est
@code{\usecounter@{@var{nomcompteur}@}} (@pxref{\usecounter}).  Utilisez
la pour dire à @LaTeX{} de numéroter les articles en utilisant le
compteur fourni.  Ce compteur est remis à zéro chaque fois que @LaTeX{}
entre dans l'environnement, et le compteur est incrémenté par un chaque
fois que @LaTeX{} rencontre une commande @code{\item}.

@findex \makelabel
Une autre commande qu'on retrouve dans @var{espacement} est
@code{\makelabel}, pour construire la boîte de l'étiquette.  Par défaut
elle positionne le contenu fer à droite. Elle prend un argument,
l'étiquette. Elle compose son contenu en mode LR. Un exemple de
changement de sa définition consiste dans l'exemple précédent
@code{nommage} à ajouter avant la définition de l'environnement
@code{\newcommand@{\namedmakelabel@}[1]@{\textsc@{#1@}@}}, et entre la
commande @code{\setlength} et la parenthèse clôturant l'argument
@var{espacement} à ajouter aussi @code{\let\makelabel\namedmakelabel}.
Ceci composera les étiquettes en petites capitales.  De même, en
remplaçant cette seconde ligne de code par @code{\let\makelabel\fbox} on
met les étiquettes dans une boîte encadrée.  Ci-après voici un autre
exemple de la commande @code{\makelabel}, dans la définition de
l'environnement @code{etiquetterouge}.

De même on trouve souvent au sein de @var{espacement} des commandes pour
redéfinir l'espacement de la liste. Ci dessous on listes les paramètres
d'espacement et leur valeurs par défaut. (Il se peut que les valeurs par
défaut pour les environnements dérivés tels que @code{itemize} soient
différentes des valeurs exposées ici). Voir aussi la figure qui suit la
liste. Chaque paramètre est une longueur (@pxref{Lengths}).  Les espaces
verticaux sont d'ordinaire des longueurs élastiques, avec une composante
en @code{plus} ou en @code{minus}, pour donner à @TeX{} de la
flexibilité dans le réglage de la page.  On change chaque paramètre avec
une commande du genre de as @code{\setlength@{itemsep@}@{2pt plus1pt
minus1pt@}}.  Pour obtenir certains effets, ces longueurs doivent être
mise à zéro, ou à une valeur négative.

@ftable @code
@item \itemindent
@anchor{list itemindent}
Espace supplémentaire horizontal de renfoncement, ajouté à de
@code{leftmargin}, de la première ligne de chaque article. Sa valeur par
défaut est @code{0pt}.

@item \itemsep
@anchor{list itemsep}
Espace vertical entre les articles, ajouté à @code{\parsep}.  Les
valeurs par défaut pour les trois premiers niveaux dans les classes de
@LaTeX{} @samp{article}, @samp{book}, et @samp{report} à la taille de 10
point sont : @code{4pt plus2pt minus1pt}, @code{\parsep} (c.-à-d.@:
@code{2pt plus1pt minus1pt}), et @code{\topsep} (c.-à-d.@: @code{2pt
plus1pt minus1pt}).  Les valeurs par défaut à 11 points sont :
@code{4.5pt plus2pt minus1pt}, @code{\parsep} (c.-à-d.@: @code{2pt
plus1pt minus1pt}), et @code{\topsep} (c.-à-d.@: @code{2pt plus1pt
minus1pt}).  Les valeurs par défaut à 12 points sont : @code{5pt
plus2.5pt minus1pt}, @code{\parsep} (c.-à-d.@: @code{2.5pt plus1pt
minus1pt}), et @code{\topsep} (c.-à-d.@: @code{2.5pt plus1pt minus1pt}).

@item \labelsep
@anchor{list labelsep}
Espace horizontal entre l'étiquette et le texte d'un article. La valeur
par défaut pour les classes @LaTeX{} @samp{article}, @samp{book}, et
@samp{report} est de @code{0.5em}.

@item \labelwidth
@anchor{list labelwidth}
Largeur horizontale. La boîte contenant l'étiquette est nominalement de
cette largeur. Si @code{\makelabel} renvoie un texte qui est plus large
que cela, alors le renfoncement de la première ligne de l'article sera
augmenté pour créer l'espace nécessaire à cette matière supplémentaire.
Si @code{\makelabel} renvoie un texte de largeur inférieur ou égale à
@code{\labelwidth} alors le comportement par défaut de @LaTeX{} est que
l'étiquette est composé fer à droite dans une boîte de cette largeur.

Le bord de gauche de la boîte de l'étiquette est à
@code{\leftmargin}+@code{\itemindent}-@code{\labelsep}-@code{\labelwidth}
de la marge de gauche de l'environnement enveloppant.

La valeur par défaut pour les classes @LaTeX{} @samp{article},
@samp{book}, et @samp{report} pour les listes de premier niveau vaut
@code{\leftmargini}-@code{\labelsep}, (c.-à-d.@: @code{2em} en mode à une
colonne et @code{1.5em} en mode deux-colonnes).  Au deuxième niveau,
c'est @code{\leftmarginii}-@code{\labelsep}, et au troisième niveau
@code{\leftmarginiii}-@code{\labelsep}.  Ces définitions ont pour effet
que le bord de gauche de l'étiquette coïncide avec la marge de gauche
de l'environnement enveloppant.

@item \leftmargin
@anchor{list leftmargin}
Espace horizontal entre la marge de gauche de l'environnement susjacent
(ou la marge de gauche de la page pour une liste de premier niveau), et
la marge de gauche de cette liste. Doit être positif ou nul.

Dans les classes de document @LaTeX{} standardes, ce paramètre est réglé
à la valeur @code{\leftmargini} pour une liste de premier niveau, alors
que pour une liste de deuxième niveau, c'est à dire imbriquée dans une
liste de premier niveau, il est réglé à @code{\leftmarginii}.  Pour les
listes aux niveaux d'imbrication suivants les valeurs de
@code{\leftmarginiii} à @code{\leftmarginvi} sont utilisées.  (Imbriquer
des listes au delà de cinq niveaux produit le message d'erreur @samp{Too
deeply nested}).

Les valeurs par défaut des trois premiers niveaux dans les classes
@LaTeX{} @samp{article}, @samp{book}, et @samp{report} sont les
suivantes : @code{\leftmargini} vaut @code{2.5em} (ou @code{2em} en mode
deux-colonnes), @code{\leftmarginii} vaut @code{2.2em}, et
@code{\leftmarginiii} vaut @code{1.87em}.

@item \listparindent
@cindex débord
Espace horizontal de renfoncement supplémentaire, au delà de
@code{\leftmargin}, pour le deuxième paragraphe et les suivants au sein
d'un article de liste.  Une valeur négative produit un @dfn{débord},
c.-à-d.@: un retrait sur la gauche. Sa valeur par défaut est @code{0pt}.

@item \parsep
@anchor{list parsep} Espace vertical entre les paragraphes d'un article.
Les valeurs par défaut pour les trois premiers niveaux dans les classes
@LaTeX{} @samp{article}, @samp{book} et @samp{report} à la taille de 10
point sont : @code{4pt plus2pt minus1pt}, @code{2pt plus1pt minus1pt},
and @code{0pt}.  La valeurs par défaut à la taille de 11 point sont :
@code{4.5pt plus2pt minus1pt}, @code{2pt plus1pt minus1pt}, et
@code{0pt}.  La valeurs par défaut à la taille de 12 point sont :
@code{5pt plus2.5pt minus1pt}, @code{2.5pt plus1pt minus1pt}, et
@code{0pt}.

@item \partopsep
@anchor{list partopsep} Espace vertical ajouté, en plus de
@code{\topsep}+@code{\parskip}, en haut et en bas de l'environnement
tout entier lorsque la liste considérée est précédée d'une ligne à
blanc. (Une ligne à blanc dans le source @LaTeX{} avant la liste change
l'espacement à la fois en haut et en bas de la liste ; que la ligne
suivant la liste soit à blanc est sans importance).

Les valeurs par défaut pour les trois premiers niveaux dans les classes
@LaTeX{} @samp{article}, @samp{book}, et @samp{report} à la taille de
point sont : @code{2pt plus1 minus1pt}, @code{2pt plus1pt minus1pt}, et
@code{1pt plus0pt minus1pt}.  Les valeurs par défaut à la taille de 11
point sont : @code{3pt plus1pt minus1pt}, @code{3pt plus1pt minus1pt},
et @code{1pt plus0pt minus1pt}).  Les valeurs par défaut à la taille de
12 point sont : @code{3pt plus2pt minus3pt}, @code{3pt plus2pt
minus2pt}, et @code{1pt plus0pt minus1pt}.

@item \rightmargin
@anchor{list rightmargin}

Espace horizontal entre la marge de droite de la liste et la marge de
droite de l'environnement l'englobant. Vaut par défaut @code{0pt}. Doit
être positif ou nul.

@item \topsep
@anchor{list topsep} Espace vertical ajouté aussi bien au haut qu'au bas
de la liste, en plus de @code{\parskip} (@pxref{\parindent & \parskip}).
Les valeurs par défaut pour les trois premiers niveaux dans les classes
@LaTeX{} @samp{book}, et @samp{report} à la taille de 10 point sont :
@code{8pt plus2pt minus4pt}, @code{4pt plus2pt minus1pt}, and @code{2pt
plus1pt minus1pt}.  Les valeurs par défaut à la taille de 11 point
sont : @code{9pt plus3pt minus5pt}, @code{4.5pt plus2pt minus1pt}, and
@code{2pt plus1pt minus1pt}.  Les valeurs par défaut à la taille de 12
point sont : @code{10pt plus4pt minus6pt}, @code{5pt plus2.5pt
minus1pt}, et @code{2.5pt plus1pt minus1pt}.

@end ftable

La figure suivante illustre les distances horizontales et verticales.

@float
@image{latex2e-figures/list,3.21in,,,.png}
@end float

Les longueurs illustrées sont listées ci-dessous.  La relation clef est
que le bord droit du crochet pour @var{h1} est à la même position
horizontale que le bord droit du crochet pour @var{h4}, de sorte que le
bord de gauche de la boîte de l'étiquette est à
@var{h3}+@var{h4}-(@var{h0}+@var{h1}).

@table @var
@item v0
vaut @math{@code{@\topsep} + @code{@\parskip}} si l'environnement
@code{list} ne commence pas un nouveau paragraphe, et
@code{\topsep}+@code{\parskip}+@code{\partopsep} sinon

@item v1
@code{\parsep}

@item v2
@code{\itemsep}+@code{\parsep}

@item v3
Même valeur que @var{v0}.  (Cet espace est affecté selon qu'une ligne à
blanc apparaît dans le source au dessus de l'environnement ; la présence
d'une ligne à blanc au dessous de l'environnement est sans effet).

@item h0
@code{\labelwidth}

@item h1
@code{\labelsep}

@item h2
@code{\listparindent}

@item h3
@code{\leftmargin}

@item h4
@code{\itemindent}

@item h5
@code{\rightmargin}

@end table

Les marges de gauche et de droite de la liste, affichées ci-dessus comme
@var{h3} et @var{h5}, sont exprimées relativement à celles fournies par
l'environnement englobant, ou par rapport aux marges de la page pour une
liste au niveau le plus externe.  La largeur de ligne utilisée pour la
composition des articles de la liste est @code{\linewidth} (@pxref{Page
layout parameters}).  Par exemple, réglez la marge de gauche de la liste
à un quart de la distance entre les marges de gauche et de droite de
l'environnement englobant avec
@code{\setlength@{\leftmargin@}@{0.25\linewidth@}}.

Les sauts de page au sein d'une structure de liste sont contrôlés par
les paramètres ci-dessous. Pour chacun d'eux, la valeur par défaut de
@LaTeX{} est @code{-\@@lowpenalty}, c.-à-d.@: @code{-51}.  Comme c'est
négatif, cela encourage d'une certaine façon un saut de page à tout
endroit.  On peut changer cela avec un réglage de, par ex.,
@code{\@@beginparpenalty=9999} ; une valeur de 10000 interdit une saut
de page.

@ftable @code
@item \@@beginparpenalty
La pénalité de saut de page pour un saut avant la liste (par défaut
@code{-51}).

@item \@@itempenalty
La pénalité pour un saut de page avant un article de liste (par défaut
@code{-51}).

@item \@@endparpenalty
La pénalité pour un saut de page après une liste (par défaut
@code{-51}).

@end ftable

@PkgIndex{enumitem}
Le paquetage @package{enumitem} est utile pour personnaliser les
listes.

Dans l'exemple suivant les étiquettes sont en rouge.  Elles sont
numérotées, et le bord gauche des étiquettes est aligné avec le bord
gauche du texte des articles.  @xref{\usecounter}.

@example
\usepackage@{color@}
\newcounter@{cnt@}
\newcommand@{\makeredlabel@}[1]@{\textcolor@{red@}@{#1.@}@}
\newenvironment@{redlabel@}
  @{\begin@{list@}
    @{\arabic@{cnt@}@}
    @{\usecounter@{cnt@}
     \setlength@{\labelwidth@}@{0em@}
     \setlength@{\labelsep@}@{0.5em@}
     \setlength@{\leftmargin@}@{1.5em@}
     \setlength@{\itemindent@}@{0.5em@} % vaut \labelwidth+\labelsep
     \let\makelabel=\makeredlabel
    @}
  @}
@{\end@{list@}@}
@end example

@menu
* \item::         Un article dans une liste.
* trivlist::      Une forme restreinte de @code{list}.
@end menu


@node \item
@subsection @code{\item}: Une entrée dans une liste

Synopsis :

@example
\item texte de l'article
@end example

@noindent
ou

@example
\item[@var{étiquette optionnelle}] texte de l'article
@end example

Un entrée dans une liste.  Les entrées sont préfixées par une étiquette,
dont la valeur par défaut dépend du type de liste.

Parce que l'argument optionnel @var{étiquette optionnelle} est entouré
de crochets (@code{[} et @code{]}), pour utiliser des crochets au
sein de l'argument optionnel vous devez les cacher entre accolades, comme
dans @code{\item[Crochet fermant, @{]@}]}.  De même, pour utiliser un
crochet ouvrant comme premier caractère du texte d'un article, cachez le
aussi au sein d'accolade.  @xref{@LaTeX{} command syntax}.

Dans cet exemple la liste @code{enumerate} a deux articles qui utilise
l'étiquette par défaut et une qui utilise l'étiquette optionnelle.

@example
\begin@{enumerate@}
  \item Moe
  \item[sometimes] Shemp
  \item Larry
\end@{enumerate@}
@end example

Le premier article est étiqueté @samp{1.}, le deuxième article est
étiqueté @samp{sometimes}, et le troisième article est étiqueté
@samp{2.} (notez que, à cause de l'étiquette optionnelle dans le second
article, le troisième article ne reçoit pas l'étiquette @samp{3.}).

@node trivlist
@subsection @code{trivlist}: Une forme restreinte de @code{list}

Synopsis :

@example
\begin@{trivlist@}
  ...
\end@{trivlist@}
@end example

Une version restreinte de l'environnement @code{list} dans laquelle les
marges sont sans renfoncement et @code{\item} sans l'argument optionnel
ne produit pas de texte.  Elle est utilisée le plus souvent au sein de
macros, de sorte à définir un environnement où la commande @code{\item}
fait partie de la définition de l'environnement.  Par exemple,
l'environnement @code{center} est défini pour l'essentiel comme ceci :

@example
\newenvironment@{center@}
  @{\begin@{trivlist@}\centering\item\relax@}
  @{\end@{trivlist@}@}
@end example

Utiliser @code{trivlist} de la sorte permet à la macro d'hériter du code
mutualisé : combiner l'espace vertical provenant de deux environnements
adjacents ; détecter si le texte suivant l'environnement doit être
considéré comme un nouveau paragraphe ou la suite du paragraphe
précédent ; ajuster les marges de gauche et de droit pour d'éventuels
environnements de liste imbriqués.

En particulier, @code{trivlist} utilise les valeurs courantes des
paramètres de liste (@pxref{list}), à ceci près que @code{\parsep} est
réglé à la valeur de @code{\parskip}, et que @code{\leftmargin},
@code{\labelwidth}, et @code{\itemindent} sont réglés à zéro.

Cet exemple produit les articles comme deux paragraphes, à ceci près que
(par défaut) ils n'ont pas de renfoncement de paragraphe et sont séparés
verticalement.

@example
\begin@{trivlist@}
\item C'est un fameux trois-mâts, fin comme un oiseau
\item Hisse et ho, Santiano.
\end@{trivlist@}
@end example

@node math
@section @code{math}
@EnvIndex{math}
@cindex formules en ligne

Synopsis :

@example
\begin@{math@}
@var{maths}
\end@{math@}
@end example

@findex $ @r{en ligne, math}
@findex \(...\) @r{en ligne, math}
L'environnement @code{math} insère les @var{maths} donnés au sein du
texte en cours. @code{\(...\))} et @code{$...$} sont des synonymes.
@xref{Math formulas}.

@node minipage
@section @code{minipage}
@EnvIndex{minipage}
@cindex minipage, créer une

Synopsis :

@example
\begin@{minipage@}@{@var{largeur}@}
  @var{matière}
\end@{minipage@}
@end example

@noindent
ou

@example
\begin@{minipage@}[@var{position}][@var{hauteur}][@var{pos-interne}]@{@var{largeur}@}
@var{matière}
\end@{minipage@}
@end example

Place @var{matière} dans une boîte qui est @var{largeur} de large. C'est
comme une version réduite d'une page ; elle peut contenir ses propres
notes en bas de page, listes à puces, etc. (Il y a quelques
restrictions, notamment qu'elle ne peut pas avoir de flottants). Cette
boîte ne peut pas être coupée sur plusieurs pages. Ainsi @code{minipage}
est similaire à la commande @code{\parbox} (@pxref{\parbox}), mais
contrairement à @code{\parbox}, d'autres environnements de production de
paragraphe peuvent être utilisés au sein d'une minipage.

Cet exemple fait 7,5cm de large, et comprend deux paragraphes.

@example
\begin@{minipage@}@{7.5cm@}
  Stephen Kleene fut un fondateur de la théorie de la récursivité.

  Il fut l'élève de Church, l'auteur de trois textes qui firent
  autorité, et le président de l'Association for Symbolic Logic, et il
  fut récompensé par la National Medal of Science.
 \end@{minipage@}
@end example

@noindent
Voir plus bas pour une discussion sur le renfoncement de paragraphe au
sein d'une @code{minipage}.

L'argument obligatoire @var{largeur} est une longueur rigide (@pxref{Lengths}).
Il donne la largeur de la boîte dans laquelle @var{matière} est composée.

Il y a trois arguments optionnels, @var{position}, @var{hauteur}, et
@var{pos-interne}.  Il n'est pas nécessaire de fournir les trois à la
fois. Par exemple, obtenez les valeurs par défaut pour @var{position} et
réglez @var{hauteur} avec
@code{\begin@{minipage@}[c][2.54cm]@{\columnwidth@} @var{matière}
\end@{minipage@}}.  (Obtenez la hauteur naturelle avec un argument vide,
@code{[]}).

L'argument optionnel @var{position} gouverne la façon dont la
@code{minipage} s'aligne verticalement avec la matière l'entourant.

@table @code
@item c
@c xx Clarify what it means when adjacent text lines do not have aligned
@c vertical center with each other
(Synonyme @code{m}) Valeur par défaut.  Positionne la @code{minipage} de
sorte que son centre vertical soit aligné avec le centre des lignes de
texte adjacentes.

@item t
@findex \vtop @r{@value{PlainTeX}}
Aligne la ligne du haut de la @code{minipage} sur la ligne de base du
texte l'entourant (comme @code{\vtop} en @value{PlainTeX}).

@item b
@findex \vbox @r{@value{PlainTeX}}
Aligne la ligne du bas de @code{minipage} avec la ligne de base du texte
l'entourant (comme @code{\vbox} en @value{PlainTeX}).
@end table

Pour voir l'effet de ces options, comparez le résultat de la compilation de

@example
---\begin@{minipage@}[c]@{0.25in@}
  first\\ second\\ third
\end@{minipage@}
@end example

@noindent
avec ce qui se passe en remplaçant @code{c} par @code{b} ou @code{t}.

L'argument optionnel @var{hauteur} est une longueur rigide
(@pxref{Lengths}).  Il règle la hauteur de la @code{minipage}.  Vous
pouvez donner n'importe quelle valeur supérieure, égale ou inférieure à
la hauteur naturelle de la @code{minipage} sans que @LaTeX{} ne produise
une erreur ou un avertissement.  Vous pouvez aussi la régler à une
hauteur de valeur nulle ou négative.

L'argument optionnel final @var{pos-interne} contrôle la disposition de
@var{matière} au sein de la boîte. Voici les valeurs possibles (la
valeur par défaut est la valeur de l'argument @var{position}).

@table @code
@item t
Place @var{matière} en haut de la boîte.

@item c
Centre @var{matière} verticalement.

@item b
Place @var{matière} en bas de la boîte.

@item s
Dilate @var{matière} verticalement ; elle doit contenir de l'espace
dilatable verticalement.

@end table

L'argument @var{pos-interne} a un sens quand l'option @var{hauteur} est
réglée à une valeur supérieure à la hauteur naturelle de la
@code{minipage}.  Pour voir l'effet des options, exécutez l'exemple
suivant avec les différents choix possibles au lieu de @code{b}.

@example
Texte avant
\begin@{center@}
  ---\begin@{minipage@}[c][8cm][b]@{0.25\textwidth@}
       premier\\ deuxième\\ troisième
  \end@{minipage@}
\end@{center@}
Texte après
@end example

@cindex renfoncement des paragraphes, au sein d'une minipage
@cindex paragraphes, renfoncement au sein d'une minipage
@findex \parindent
Par défaut, les paragraphes ne sont pas renfoncés au sein d'un
environnement @code{minipage}. Vous pouvez restaurer le renfoncement
avec une commande telle que @code{\setlength@{\parindent@}@{1pc@}} placé
au début de @var{matière}.

@cindex notes en bas de page au sein des figures
@cindex figures, notes en bas de page au sein des
Les notes en bas de page au sein d'un environnement @code{minipage} sont
gérées d'une façon qui est particulièrement utile pour mettre des notes
en bas de page dans des figures ou des tableaux. Une commande
@code{\footnote}  ou @code{\footnotetext} met la note en bas de page au bas
de la minipage au lieu de la mettre au bas de la page, et elle utilise
le compteur @code{\mpfootnote} au lieu du compteur ordinaire
@code{footnote} (@pxref{Counters}).

L'exemple ci-dessous place la note argument de @code{\footnote} en bas
de la table, et non en bas de la page.

@example
\begin@{center@}           % centre la minipage sur la ligne
\begin@{minipage@}@{6.5cm@}
  \begin@{center@}         % centre la table au sein de la minipage
    \begin@{tabular@}@{ll@}
      \textsc@{Monarque@}  &\textsc@{Règne@}             \\ \hline
      Elizabeth II      &63 ans\footnote@{à ce jour@} \\
      Victoria          &63 ans                   \\
      George III        &59 ans
    \end@{tabular@}
  \end@{center@}
\end@{minipage@}
\end@{center@}
@end example

Si vous imbriquez des minipages, alors il y a une bizarrerie dans
l'utilisation des notes @code{\footnote}. Les notes apparaissent au bas
du texte terminé par la prochaine @code{\end@{minipage@}} ce qui n'est
peut-être pas leur place logique.

L'exemple suivant place un tableau de données côte à côte d'un
graphique. Ils sont verticalement centrés.

@PkgIndex{siunitx}
@example
% siunitx permet d'avoir le type de colonne S dans les tableaux,
% pour l'alignement sur le séparateur décimal, réglé comme virgule.
\usepackage[output-decimal-marker=@{,@}]@{siunitx@}
\newcommand*@{\vcenteredhbox@}[1]@{\begin@{tabular@}@{@@@{@}c@@@{@}@}#1\end@{tabular@}@}
  ...
\begin@{center@}
  \vcenteredhbox@{\includegraphics[width=0.3\textwidth]@{nyc.png@}@}
  \hspace@{0.1\textwidth@}
  \begin@{minipage@}@{0.5\textwidth@}
    \begin@{tabular@}@{r|S@}
      % \multicolumn pour supprimer la barre verticale entre les titres
      % de colonnes
      \multicolumn@{1@}@{r@}@{Quartier@} &
      % les accolades empêchent siunitx de voir le point comme un
      % séparateur décimal
      @{Pop. (million)@}  \\ \hline
      The Bronx      &1.5  \\
      Brooklyn       &2.6  \\
      Manhattan      &1.6  \\
      Queens         &2.3  \\
      Staten Island  &0.5
    \end@{tabular@}
  \end@{minipage@}
\end@{center@}
@end example

@node picture
@section @code{picture}
@EnvIndex{picture}
@cindex créer des images
@cindex images, créer

Synopsis :

@example
\begin@{picture@}(@var{largeur},@var{hauteur})
   @var{commande picture}
\end@{picture@}
@end example

@noindent
ou

@example
\begin@{picture@}(@var{largeur},@var{hauteur})(@var{décalagex},@var{décalagey})
  @var{commande picture}
\end@{picture@}
@end example

@noindent
où on a autant de @var{commande picture}(s) qu'on le désire.

L'environnement @code{picture} vous permet de créer des dessins simples
contenant des lignes, des flèches, des boîtes, des cercles, et du texte.
Cet environnement n'est pas obsolète, mais les nouveaux documents
utilisent typiquement des systèmes de création de graphiques bien plus
puissants tels que TikZ, PStricks, MetaPost, ou Asymptote. Aucun de
ceux-ci n'est couvert dans ce document ; voir le CTAN.

Pour commencer, voici un exemple illustrant la méthode du parallélogramme
pour additionner deux vecteurs.

@findex \unitlength
@example
\setlength@{\unitlength@}@{1cm@}
\begin@{picture@}(6,6)  % la boîte de l'image fera 6cm de large sur 6cm
                      % de haut
  \put(0,0)@{\vector(2,1)@{4@}@}  % la pente du vecteur est de 1/2
    \put(2,1)@{\makebox(0,0)[l]@{\ premier terme@}@}
  \put(4,2)@{\vector(1,2)@{2@}@}
    \put(5,4)@{\makebox(0,0)[l]@{\ second terme@}@}
  \put(0,0)@{\vector(1,1)@{6@}@}
    \put(3,3)@{\makebox(0,0)[r]@{somme\ @}@}
\end@{picture@}
@end example

L'environnement @code{picture} a un argument obligatoire qui est une
paire de nombres réels positifs (@var{largeur},@var{hauteur}).
@c { Dans la version française seulement
Le point est utilisé comme séparateur décimal quand ils ne sont pas
entiers.
@c }
En les multipliant par @code{\unitlength} on obtient la taille nominale
de la sortie, c.-à-d.@: l'espace que @LaTeX{} réserve sur la page en
sortie. Cette taille nominale n'est pas nécessairement la taille réelle
de l'image ; @LaTeX{} dessine aussi les parties de l'image en dehors de
la boîte de l'image.

L'environnement @code{picture} a aussi un argument optionnel
(@var{décalagex},@var{décalagey}). Il sert à décaler l'origine.
Contrairement aux arguments optionnels ordinaires, cet argument n'est
pas contenu entre crochets. Comme pour l'argument obligatoire, c'est une
paire de deux nombres. En les multipliant par @code{\unitlength} on
obtient les coordonnées du point situé dans le coin inférieur gauche de
l'image.

Par exemple, si @code{\unitlength} a été réglée à @code{1mm}, la
commande

@example
\begin@{picture@}(100,200)(10,20)
@end example

@noindent produit un dessin de largeur 100 millimètres et hauteur 200
millimètres. Son origine est le point (10mm,20mm) et donc le coin
inférieur gauche est là, et le coin supérieur droit est à (110mm,220mm).
Lorsque vous tracez un dessin, typiquement vous omettez l'argument
optionnel, laissant l'origine au coin inférieur gauche. Si ensuite vous
voulez modifier le dessin en translatant tout, vous pouvez juste ajouter
l'argument optionnel approprié.

@cindex position dans picture
Chaque @var{commande picture} dit à @LaTeX{} où placer quelque chose en
donnant sa position. Une @dfn{position} est une paire telle que
@code{(2.4,-5)} donnant les coordonnées en x et en y. Une
@dfn{coordonnée} n'est pas une longueur, c'est un nombre réel (il
utilise le point @samp{.} comme séparateur décimal et peut avoir un
signe moins). Elle spécifie une longueur en termes de la longueur unité
@code{\unitlength}, de sorte que si @code{\unitlength} a été réglée à
@code{1cm}, alors la coordonnées @samp{2.54} spécifie une longueur de
2,54 centimètres.

La valeur par défaut de @LaTeX{} pour @code{\unitlength} est
@code{1pt}. C'est une longueur rigide (@pxref{Lengths}). Utilisez la
commande @code{\setlength} pour la modifier
(@pxref{\setlength}). Effectuez ce changement uniquement en dehors de
l'environnement @code{picture}.

L'environnement @code{picture} prend en charge les expressions
arithmétiques standardes en plus des nombres.

Les coordonnées sont données relativement à une origine, qui est par
défaut au coin en bas à gauche de l'image. Notez que lorsque une
position apparaît en tant qu'argument, comme dans
@code{\put(1,2)@{...@}}, elle n'est pas entourées d'accolades puisque
les parenthèses servent à délimiter l'argument. De même, contrairement à
certains systèmes de dessin par ordinateur, l'axe des ordonnées y est
orienté vers le haut de la page, par ex.@: @math{y = 1} est
@emph{au-dessus} de @math{y = 0}.

Il y a quatre manières de placer des choses dans une image : @code{\put},
@code{\multiput}, @code{\qbezier}, et @code{\graphpaper}.  La plus
utilisée est @code{\put}. Le code suivant

@example
\put (11.3,-0.3)@{...@}
@end example

@noindent
met l'objet spécifié par @code{...} dans le dessin @code{picture}, avec
son point de référence aux coordonnées @math{(11.3,-0.3)}.  Les points de
référence des divers objets sont décrits plus bas.

@findex LR box
La commande @code{\put} crée une @dfn{LR box} (@pxref{Modes}).  Vous
pouvez mettre tout ce qui peut aller dans une @code{\mbox} (@pxref{\mbox
& \makebox}) dans l'argument texte de la commande @code{\put}.  Quand
vous faites cela, le point de référence devient le coin inférieur gauche
de la boîte. Dans cette image :

@example
\setlength@{\unitlength@}@{1cm@}
...\begin@{picture@}(1,1)
  \put(0,0)@{\line(1,0)@{1@}@}
  \put(0,0)@{\line(1,1)@{1@}@}
\end@{picture@}
@end example

@noindent
les trois points sont juste légèrement à la gauche du point où les deux
lignes forment un angle.  (À noter aussi que @code{\line(1,1)@{1@}} ne
demande pas une ligne de longueur un, mais une ligne dont l'étendue
selon la coordonnée x est de 1).

Les commandes @code{\multiput}, @code{qbezier}, et @code{graphpaper} sont
décrites plus bas.

Vous pouvez également utiliser cet environnement pour placer une matière
quelconque à un emplacement exact. Par exemple :

@example
\usepackage@{color,graphicx@}  % dans le préambule
  ...
\begin@{center@}
\setlength@{\unitlength@}@{\textwidth@}
\begin@{picture@}(1,1)   % réserve un espace large et haut de \textwidth
  \put(0,0)@{\includegraphics[width=\textwidth]@{desertedisland.jpg@}@}
  \put(0.25,0.35)@{\textcolor@{red@}@{X Trésor ici@}@}
\end@{picture@}
\end@{center@}
@end example

@noindent
Le X rouge sera précisément à un quart de @code{\textwidth} à droite de
la marge de gauche, et @code{0.35\textwidth} au dessus du bas de
l'image.  Un autre exemple de cette utilisation est de placer un code
similaire dans l'en-tête de page pour obtenir une matière répétée sur
chaque page.

@menu
* \put:: Place un objet à un endroit spécifié.
* \multiput:: Dessine plusieurs instances d'un objet.
* \qbezier:: Dessine un courbe de Bézier quadratique.
* \graphpaper:: Dessine un quadrillage.
* \line:: Dessine une ligne droite.
* \linethickness:: Règle l'épaisseur des lignes horizontales et verticales.
* \thinlines:: L'épaisseur de ligne par défaut.
* \thicklines:: Une plus grosse épaisseur de ligne.
* \circle:: Dessine un cercle.
* \oval:: Dessine un ovale.
* \shortstack:: Empile plusieurs objets.
* \vector:: Dessine une ligne flèchée.
* \makebox (picture):: Dessine une boîte de la taille spécifiée.
* \framebox (picture):: Dessine une boîte avec un cadre autour.
* \frame:: Dessine un cadre autour d'un objet.
* \dashbox:: Dessine une boîte en tiretés.
@end menu

@ignore
@findex \unitlength
Vous dîtes à @LaTeX{} où mettre les choses dans le dessin en spécifiant
leur coordonnées. Une coordonnée est un nombre qui peut avoir une
séparateur décimal (point et non virgule) et un signe moins --- un
nombre comme @code{5}, @code{0.3} ou @code{-3.1416}.  Une coordonnées
spécifie une longueur en multiples de l'unité de longueur
@code{\unitlength}, ainsi si @code{\unitlength} a été réglée à
@code{1cm}, alors la coordonnée 2.54 spécifie une longueur de 2,54
centimètres.

Vous devriez changer la valeur de @code{\unitlength}, en utilisant la
commande @code{\setlength}, en dehors d'un environnement
@code{picture}. La valeur par défaut est @code{1pt}.

@PkgIndex{picture}
Le paquetage @package{picture} redéfinit l'environnement @code{picture} de
sorte qu'où que soit utilisé un nombre au sein de @var{commandes picture}
pour spécifier une coordonnée, on puisse alternativement utiliser une
longueur. Notez bien cependant que ceci empêche de dilater/contracter
ces longueurs en changeant @code{\unitlength}.

@cindex position, dans un dessin @code{picture}
Une @dfn{position} est une paire de coordonnées, telle que
@code{(2.4,-5)}, ce qui spécifie un point d'abscisse @code{2.4} et
d'ordonnée @code{-5}.  Les coordonnées sont spécifiées de la manière
habituelle relativement à une origine, qui est normalement dans le coin
inférieur gauche du dessin. Notez que lorsque une position apparaît en
argument, elle n'est pas entourée d'accolades ; on délimite l'argument
avec des parenthèses.

@end ignore

@node \put
@subsection @code{\put}
@findex \put

@code{\put(@var{xcoord},@var{ycoord})@{@var{contenu}@}}

La commande @code{\put} place @var{contenu} aux coordonnées
(@var{xcoord},@var{ycoord}). Voir la discussion sur les coordonnées et
@code{\unitlength} dans @ref{picture}. Le @var{contenu} est traité en
mode LR (@pxref{Modes}) de sorte qu'il ne peut pas contenir de sauts de
ligne.

L'exemple ci-dessous inclut le texte dans le dessin @code{picture}.

@example
\put(4.5,2.5)@{Faire la manœuvre de \textit@{retrait@}@}
@end example

Le point de référence, la position (4.5,2.5), est le point en bas à
gauche de texte, au coin en bas à gauche du @samp{F}.


@node \multiput
@subsection @code{\multiput}
@findex \multiput

Synopsis :
@example
\multiput(@var{x},@var{y})(@var{delta_x},@var{delta_y})@{@var{nbre-copies}@}@{@var{obj}@}
@end example

La commande @code{\multiput} copie l'objet @var{obj} en tout
@var{nbre-copies} fois, avec un incrément de @var{delta_x,delta_y}. Le
@var{obj} est placé en premier à la position @math{(x,y)}, puis à la
position @math{(x+\delta x,y+\delta y)}, et ainsi de suite.

L'exemple ci-dessous dessine une grille simple avec une ligne sur cinq en
gras (voir aussi @ref{\graphpaper}).

@example
\begin@{picture@}(10,10)
  \linethickness@{0.05mm@}
  \multiput(0,0)(1,0)@{10@}@{\line(0,1)@{10@}@} 
  \multiput(0,0)(0,1)@{10@}@{\line(1,0)@{10@}@}
  \linethickness@{0.5mm@}
  \multiput(0,0)(5,0)@{3@}@{\line(0,1)@{10@}@}
  \multiput(0,0)(0,5)@{3@}@{\line(1,0)@{10@}@}
\end@{picture@}
@end example


@node \qbezier
@subsection @code{\qbezier}

@findex \qbezier

Synopsis :

@example
\qbezier(@var{x1},@var{y1})(@var{x2},@var{y2})(@var{x3},@var{y3})
\qbezier[@var{quant}](@var{x1},@var{y1})(@var{x2},@var{y2})(@var{x3},@var{y3})
@end example

Dessine une courbe de Bézier quadratique dont les points de contrôle
sont donnés par les trois arguments obligatoires
@code{(@var{x1},@var{y1})}, @code{(@var{x2},@var{y2})}, et
@code{(@var{x3},@var{y3})}.  c.-à-d.@: que la courbe va de @var{(x1,y1)}
à @var{(x3,y3)}, est quadratique, et est telle que la tangente en
@var{(x1,y1)} passe par @var{(x2,y2)}, et de même pour la tangente en
@var{(x3,y3)}.

L'exemple suivant dessine une courbe des coordonnées (1,1) à (1,0).

@example
\qbezier(1,1)(1.25,0.75)(1,0)
@end example

@noindent
La tangente de la courbe en (1,1) passe par (1.25,0.75), et la tangente
en (1,0) fait de même.

L'argument optionnel @var{quant} donne le nombre de points
intermédiaires calculés.  Par défaut la commande dessine une courbe
lisse dont le nombre maximum de points est @code{\qbeziermax} (on change
cette valeur avec @code{\renewcommand}).

L'exemple suivant dessine un rectangle avec un haut ondulé, en
utilisant @code{\qbezier} pour cette courbe.

@example
\begin@{picture@}(8,4)
  \put(0,0)@{\vector(1,0)@{8@}@}  % axe des x
  \put(0,0)@{\vector(0,1)@{4@}@}  % axe des y
  \put(2,0)@{\line(0,1)@{3@}@}       % côté gauche
  \put(4,0)@{\line(0,1)@{3.5@}@}     % côté droit
  \qbezier(2,3)(2.5,2.9)(3,3.25)
    \qbezier(3,3.25)(3.5,3.6)(4,3.5)
  \thicklines  % ci-dessous, les lignes sont deux fois plus épaisses
  \put(2,3)@{\line(4,1)@{2@}@}
  \put(4.5,2.5)@{\framebox@{Méthode des trapèzes@}@}
\end@{picture@}
@end example

@node \graphpaper
@subsection @code{\graphpaper}

@findex \graphpaper
Synopsis :

@example
\graphpaper(@var{x_init},@var{y_init})(@var{x_dimen},@var{y_dimen})
\graphpaper[@var{espacement}](@var{x_init},@var{y_init})(@var{x_dimen},@var{y_dimen})
@end example

@PkgIndex{graphpap}
Dessine un quadrillage.  Le paquetage @package{graphpap} est nécessaire.
L'origine du quadrillage est @code{(@var{x_init},@var{y_init})}.
Les lignes de la grille sont espacées de @var{espacement} unités (par défaut 10).
Le quadrillage s'étend sur @var{x_dimen} unités vers la droite et @var{y_dimen} vers le haut.
Tous les arguments doivent être des entiers positifs.

L'exemple ci-dessous fait une grille avec sept lignes verticales et onze
horizontales.

@example
\usepackage@{graphpap@}    % dans le préambule
  ...
\begin@{picture@}(6,20)    % dans le corps du document
  \graphpaper[2](0,0)(12,20)
\end@{picture@}
@end example

@noindent
Les lignes sont numérotées toutes les dix unités.


@node \line
@subsection @code{\line}
@findex \line

Synopsis :

@example
\line(@var{x_avance},@var{y_monte})@{@var{excursion}@}
@end example

Dessine une ligne. Sa pente est telle que la ligne monte de @var{y_monte}
verticalement pour toute avancée horizontale de
@var{x_avance}. L'@var{excursion} est le déplacement horizontal total ---
ce n'est pas la longueur du vecteur, mais la variation en @math{x}. Dans
le cas spécial des lignes verticales, où (@var{x_avance},@var{y_monte})=(0,1),
l'@var{excursion} donne le déplacement en @math{y}.

L'exemple suivant dessine une ligne commençant aux coordonnées (1,3).

@example
\put(1,3)@{\line(2,5)@{4@}@}
@end example

@noindent
Pour toute avancée de 2 vers la droite, cette ligne monte de 5.  Parce
que @var{excursion} spécifie qu'elle avance de 4, elle monte en tout
de 10.  De sorte que son extrémité finale est
@math{(1,3)+(4,10)=(5,13)}.  En particulier, notez que
@math{@var{excursion}=4} n'est pas la longueur de la ligne, mais c'est
son déplacement en @math{x}.

Les arguments @var{x_avance} et @var{y_monte} sont des entiers qui
peuvent être positifs, négatifs, ou nuls (si les deux valent 0, alors
@LaTeX{} traite le second comme 1).  Avec
@code{\put(@var{x_init},@var{y_init})@{\line(@var{x_avance},@var{y_monte})@{@var{travel}@}@}},
si @var{x_avance} est négatif alors l'extrémité finale de la ligne a sa
première coordonnée inférieure à @var{x_init}.  Si @var{y_monte} est
négatif alors l'extrémité finale a sa seconde coordonnées inférieure à
@var{y_init}.

Si @var{excursion} est négatif alors vous obtenez @code{LaTeX Error: Bad \line or
\vector argument.}

@cindex graphiques, paquetages
@PkgIndex{pict2e}
@PkgIndex{TikZ}
@PkgIndex{PSTricks}
@PkgIndex{MetaPost}
@PkgIndex{Asymptote}
De base @LaTeX{} peut seulement dessiner des lignes avec une plage
limitée de pentes parce que ces lignes sont constituées par la
juxtaposition de petits segments de droite issus de polices
préfabriquées. Les deux nombres @var{x_avance} et @var{y_monte} prennent
des valeurs entières de @minus{}6 jusqu'à 6. De plus ils doivent être
premiers entre eux, de sorte que (@var{x_avance}, @var{y_monte})=(2,1) est
licite, mais pas (@var{x_avance}, @var{y_monte})=(4,2) (is vous choisissez
cette dernière forme alors au lieu de lignes vous obtiendrez des
séquences de têtes de flèches ; la solution est de revenir à la première
forme).  Pour obtenir des lignes de pente arbitraire et plein d'autres
formes dans un système tel que @code{picture}, voir le paquetage
@package{pict2e} (@url{https://ctan.org/pkg/pict2e}).  Une autre solution
est d'utiliser un système graphique complet tel que TikZ, PSTricks,
MetaPost, ou Asymptote.


@node \linethickness
@subsection @code{\linethickness}
@findex \linethickness

La commande @code{\linethickness@{@var{dim}@}} déclare que l'épaisseur
des lignes horizontales et verticales dans un environnement
@code{picture} vaut @var{dim}, ce qui doit être une longueur positive
(@pxref{Lengths}).  Elle diffère de @code{\thinlines} et
@code{\thicklines} en ce qu'elle n'affecte pas l'épaisseur des lignes
obliques, cercles, ou ovales (@pxref{\oval}).


@node \thinlines
@subsection @code{\thinlines}
@findex \thinlines

La commande @code{\thinlines} déclare que l'épaisseur de trait des
lignes (@pxref{\line}), cercles (@pxref{\circle}) et ovales
(@pxref{\oval}) qui suivent dans un environnement @code{picture} est
réglée à 0,4@dmn{pt}. C'est l'épaisseur par défaut, et donc cette
commande n'est nécessaire que si l'épaisseur a été changée par
soit @ref{\linethickness}, soit @ref{\thicklines}.


@node \thicklines
@subsection @code{\thicklines}
@findex \thicklines

La commande @code{\thicklines} déclare que l'épaisseur de trait des
lignes (@pxref{\line}), cercles (@pxref{\circle}) et ovales
(@pxref{\oval}) qui suivent dans un environnement @code{picture} est
réglée à 0,8@dmn{pt}. Voir aussi soit @ref{\linethickness},
soit @ref{\thinlines}. Cette commande est illustrée dans l'exemple de la
méthode des trapèzes de @ref{\qbezier}.


@node \circle
@subsection @code{\circle}
@findex \circle

Synopsis :
@example
\circle@{@var{diamètre}@}
\circle*@{@var{diamètre}@}
@end example

La commande @code{\circle} produit un cercle dont le diamètre est le
plus proche possible de celui spécifié. La forme étoilée (en @code{*})
de la commande dessine un disque, c.-à-d.@: un cercle plein.

L'exemple suivant trace un cercle de rayon 6, centré en @code{(5,7)}.

@example
\put(5,7)@{\circle@{6@}@}
@end example

Les rayons disponibles pour @code{circle} sont, en points, les nombres
pair de 2 à 20 inclus. Pour @code{\circle*} ce sont tous les entiers de
1 à 15.


@node \oval
@subsection @code{\oval}
@findex \oval

Synopsis :

@example
\oval(@var{largeur},@var{hauteur})[@var{portion}]
@end example

La commande @code{\oval} produit un rectangle aux coins arrondis,
ci-après désigné par @dfn{ovale}.  L'argument optionnel @var{portion}
vous permet de ne produire qu'une moitié de l'ovale selon ce qui suit :

@table @code
@item t
sélectionne la moitié supérieure ;
@item b
sélectionne la moitié inférieure ;
@item r
sélectionne la moitié de droite ;
@item l
sélectionne la moitié de gauche.
@end table

Il est également possible de ne produire qu'un quart de l'ovale en
réglant @var{portion} à @code{tr}, @code{br}, @code{bl}, ou @code{tl}.

L'exemple suivant dessins la moitié supérieure d'un ovale qui est large
de 3, et haut de 7.

@example
\put(5,7)@{\oval(3,7)[t]@}
@end example

@noindent
Le (5,7) est le centre de l'ovale entier, et non juste le centre de la
moitié supérieure.

Ces formes ne sont pas des ellipses. Ce sont des rectangles dont les
« coins » sont fabriqués avec des quarts de cercle. Ces cercles ont un
rayon maximal de 20@dmn{pt} (@pxref{\circle} pour les tailles). Ainsi
les grands ovales sont juste des cadres aux coins quelque peu arrondis.


@node \shortstack
@subsection @code{\shortstack}
@findex \shortstack

Synopsis :

@example
\shortstack[@var{position}]@{@var{ligne-1}\\ ...@}
@end example

La commande @code{\shortstack} produit une pile verticale d'objets.

L'exemple suivant étiquette l'axe des @math{y} en écrivant le mot @samp{axe} au dessus du mot @samp{@math{y}}.

@example
\setlength@{\unitlength@}@{1cm@}
\begin@{picture@}(5,2.5)(-0.75,0)
   \put(0,0)@{\vector(1,0)@{4@}@}   % axe des x
   \put(0,0)@{\vector(0,1)@{2@}@}   % axe des y
   \put(-0.2,2)@{\makebox(0,0)[r]@{\shortstack[r]@{axe\\ $y$@}@}@}
\end@{picture@}
@end example

@noindent
Pour une pile @code{\shortstack}, le point de référence est le coin
inférieur gauche de la pile.  Dans l'exemple plus haut la boîte
@code{\makebox} (@pxref{\mbox & \makebox}) met la pile fer à droite dans
une boîte de largeur nulle, de sorte qu'au bout du compte la pile est
située légèrement à la gauche de l'axe des @math{y}.

Les positions valides sont :

@table @code
@item r
Aligne les objets fer à droite
@item l
Aligne les objets fer à gauche
@item c
Centre les  objets (position par défaut)
@end table

@findex \\ @r{(pour les  objets @code{\shortstack})}
Les objets sont séparés en lignes avec @code{\\}. « @identity{Short stack} »
signifie « pile courte » en anglais : ces piles sont courtes au sens où,
contrairement à un environnement @code{tabular} ou @code{array}, dans
leur cas les lignes ne sont pas espacées d'un interligne
uniforme. Ainsi, dans @code{\shortstack@{X\\o\\o\\X@}} les première et
dernière lignes sont plus hautes que les deux du milieu, et donc
l'interligne entre les deux du milieu est plus petit que celui entre la
troisième et la dernière ligne. Vous pouvez ajuster les hauteurs et
profondeurs de ligne en mettant l'interligne habituel avec
@code{\shortstack@{X\\ \strut o\\o\\X@}} (@pxref{\strut}), ou
explicitement, avec une boîte de largeur nulle 
@code{\shortstack@{X \\ \rule@{0pt@}@{12pt@} o\\o\\X@}}, ou encore en
utilisant l'argument optionnel de @code{\\}, comme dans
@code{\shortstack@{X\\[2pt] o\\o\\X@}}.

La commande @code{\shortstack} est également disponible hors de
l'environnement @code{picture}.


@node \vector
@subsection @code{\vector}
@findex \vector

Synopsis :

@example
\vector(@var{xpente},@var{ypente})@{@var{longueur}@}
@end example

La commande @code{\vector} dessine une ligne fléchée de la
@var{longueur} et direction @math{(@var{xpente},@var{ypente})}
spécifiées. Les valeurs de @math{@var{xpente}} et @math{@var{ypente}}
doivent être comprises entre @minus{}4 and +4 y compris.

@node \makebox (picture)
@subsection @code{\makebox}
@findex \makebox (@code{picture})

Synopsis :
@example
\makebox(@var{largeur},@var{hauteur})[@var{position}]@{@var{texte}@}
@end example

La commande @code{\makebox} pour l'environnement @code{picture} est
similaire à la commande normale @code{\makebox} à ceci près que vous
devez spécifier une @var{largeur} et une @var{hauteur} implicitement
multipliés par @code{\unitlength}.

L'argument optionnel, @code{[@var{position}]}, spécifie le quadrant dans
lequel votre @var{texte} apparaît. Vous pouvez sélectionner jusqu'à deux
spécificateurs parmi les suivants :

@table @code
@item t
Place l'article au sommet du rectangle.

@item b
Place l'article en bas du rectangle.

@item l
Place l'article sur la gauche.

@item r
Place l'article sur la droite.

@end table

@xref{\mbox & \makebox}.


@node \framebox (picture)
@subsection @code{\framebox}
@findex \framebox

Synopsis :

@example
\framebox(@var{largeur},@var{hauteur})[@var{pos}]@{...@}
@end example

La commande @code{\framebox} est similaire à @code{\makebox} (voir
section précédent), à ceci près qu'elle met un cadre autour de
l'extérieur du contenu de la boîte qu'elle créée.

@findex \fboxrule
@findex \fboxsep
La commande @code{\framebox} produit un filet d'épaisseur
@code{\fboxrule}, et laisse un espace @code{\fboxsep} entre le filet et
le contenu de la boîte.


@node \frame
@subsection @code{\frame}
@findex \frame

Synopsis :

@example
\frame@{@var{texte}@}
@end example

La commande @code{\frame} met un cadre rectangulaire autour de
@var{texte}.  Le point de référence est le coin en bas à gauche du
cadre. Aucun espace supplémentaire n'est mis entre le cadre et l'objet
@var{texte}.


@node \dashbox
@subsection @code{\dashbox}

@findex \dashbox

Dessine une boîte avec une ligne en tiretés. Synopsis :

@example
\dashbox@{@var{tlong}@}(@var{rlargeur},@var{rhauteur})[@var{pos}]@{@var{texte}@}
@end example

@code{\dashbox} crée un rectangle en tiretés autour de @var{texte} au
sein d'un environnement @code{picture}. Les tirets sont long de
@var{tlong} unités, et le rectangle a pour largeur totale @var{rlargeur}
et hauteur totale @var{rhauteur}.  Le @var{texte} est positionné par l'argument
optionnel @var{pos}. @c xxref positions.

Une boîte en tiretés a meilleure allure quand les paramètres
@var{rlargeur} et @var{rhauteur} sont des multiples de @var{tlong}.

@node quotation & quote
@section @code{quotation} et @code{quote}

@anchor{quotation}
@EnvIndex{quotation}
@cindex citation
@cindex texte cité avec renfoncement des paragraphes, affichage
@cindex afficher du texte cité avec renfoncement de paragraphe
@cindex renfoncement des paragraphes dans du texte cité
@anchor{quote}
@EnvIndex{quote}
@cindex texte cité sans renfoncement des paragraphes, affichage
@cindex afficher un texte cité sans renfoncement de paragraphe
@cindex renfoncement des paragraphes dans un texte cité, omettre

Synopsis :

@example
\begin@{quotation@}
  @var{texte}
\end@{quotation@}
@end example

@noindent ou

@example
\begin@{quote@}
  @var{texte}
\end@{quote@}
@end example

Cite du texte.

Dans les deux environnements, les marges sont renfoncées à la fois sur la
gauche et la droite. Le texte est justifié des deux côtés sur la marge.
De même que dans le texte principal, laisser une ligne à blanc au sein
du texte produit un nouveau paragraphe.

Pour comparer les deux : dans l'environnement @code{quotation}, les
paragraphes sont renfoncés de 1,5@dmn{em} et l'espace entre les
paragraphes est petit, @code{0pt plus 1pt}.  Dans l'environnement
@code{quote}, les paragraphes ne sont pas renfoncés et il y a un espace
vertical entre les paragraphes (c'est la longueur élastique
@code{\parsep}).  Ainsi, l'environnement @code{quotation} convient mieux
aux documents où les nouveaux paragraphes sont marqués par un
renfoncement plutôt que par une séparation verticale.  De plus,
@code{quote} convient mieux pour des citations courtes ou une suite de
citations courtes.

@example
\begin@{quotation@} \small\it
  Il y a quatre-vingt sept ans
  ... ne disparaîtra jamais de la surface de la terre.
  \hspace@{1em plus 1fill@}--- Abraham Lincoln
\end@{quotation@}
@end example

@node tabbing
@section @code{tabbing}

@EnvIndex{tabbing}
@cindex taquets de tabulation, utiliser
@cindex aligner du texte en utilisant des taquets de tabulation
@cindex alignement au moyen de @code{tabbing}

Synopsis :

@example
\begin@{tabbing@}
@var{lgn1col1} \= @var{lgn1col2} ... \\
@var{lgn2col1} \> @var{lgn2col2} ... \\
...
\end@{tabbing@}
@end example

L'environnement @code{tabbing} fournit une technique pour aligner du
texte en colonnes. Il fonctionne en réglant des taquets et en tabulant
jusqu'à eux à la façon dont on le faisait avec une machine à écrire
ordinaire.

@PkgIndex{algorithm2e}
@PkgIndex{listings} @PkgIndex{minted} @PkgIndex{fancyvrb}
@PkgIndex{longtable}
L'environnement @code{tabbing} est peu utilisé, car en général, pour
formater du code informatique on utilise un environnement verbatim
(@pxref{verbatim}). À noter également, pour mettre en vedette la
syntaxe, les paquetages @package{algorithm2e} pour du pseudo-code, et
@package{fancyvrb}, @package{listings} ou @package{minted} pour du vrai code.
Et pour faire un tableau, on préfère les environnements @code{tabular}
(@pxref{tabular}) ou @code{array} (@pxref{array}) pour un petit tableau
qu'on met dans un flottant @code{table} (@pxref{table}) et
l'environnement @package{longtable} fourni par le paquetage
@package{longtable} pour un tableau pouvant être coupé sur plusieurs pages.

La description suivante n'est donc fournie que être complet.

Dans l'exemple suivant la première ligne sert à régler les taquets à des
largeurs explicites, elle se termine par une commande @code{\kill}
(décrite plus bas) :

@example
\begin@{tabbing@}
\hspace@{3cm@}\=\hspace@{2.5cm@}\=\kill
Navire                \>Armement        \>Année   \\
\textit@{Sophie@}       \>14              \>1800    \\
\textit@{@identity{Polychrest}@}   \>24              \>1803    \\
\textit@{@identity{Lively}@}       \>38              \>1804    \\
\textit@{Surprise@}     \>28              \>1805    \\
\end@{tabbing@}
@end example

@noindent
Le résultat ressemble à cela :

@quotation
@multitable @columnfractions .2 .17 .17
@item Navire @tab Armement @tab Année
@item @i{Sophie}      @tab 14 @tab 1800
@item @i{@identity{Polychrest}}  @tab 24 @tab 1803
@item @i{@identity{Lively}}      @tab 38 @tab 1804
@item @i{Surprise}    @tab 28 @tab 1805
@end multitable
@end quotation

L'environnement @code{tabbing} se distingue de @code{tabular} notamment
parce qu'avec @code{tabbing} l'utilisateur est obligé de régler la
position des taquets, et le contenu des colonnes est toujours composé
en mode LR et s'étend sur la colonne suivante s'il est plus large que la
colonne courante, alors qu'avec @code{tabular}, l'utilisateur peut selon
le spécificateur de colonne, soit composer le contenu des cellules en
mode LR et laisser @LaTeX{} déterminer la largeur de colonne
automatiquement pour que le contenu ne sorte jamais de la colonne, soit
fixer la largeur et composer le contenu des cellules dans une
@code{parbox}. Une autre différence est que @code{tabular} permet de
faire des filets, notamment de border les colonnes par des filets
verticaux, et d'avoir un espace @code{\tabcolsep} entre le contenu et la
bordure de colonne. Une autre distinction est que un @code{tabbing} peut
être coupé sur plusieurs pages, alors que @code{tabular} génère une
boîte, l'environnement @package{longtable} du paquetage @package{longtable}
étant préféré à @code{tabbing} pour les longs tableaux.

Finalement, alors que @code{tabular} peut être utilisé dans n'importe
quel mode, @code{tabbing} ne peut être utilisé qu'en mode paragraphe, et
il démarre un nouveau paragraphe.

De plus, comme l'illustre l'exemple donné plus haut, il n'est pas
nécessaire d'utiliser la forme étoilée de la commande @code{\hspace} au
début d'une ligne tabulée.  La marge de droite de l'environnement
@code{tabbing} est la fin de ligne, de sorte que la largeur de
l'environnement est @code{\linewidth}.

@cindex ligne tabulée @r{(@code{tabbing})}
L'environnement @code{tabbing} contient une suite de @dfn{lignes
tabulées}, la première ligne tabulée commence immédiatement après
@code{\begin@{tabbing@}} et chaque ligne se termine par @code{\\} ou
@code{\kill}. Il est possible d'omettre le @code{\\} pour la dernière
ligne et de terminer juste par @code{\end@{tabbing@}}.

@cindex motif courant de taquets de tabulation @r{(@code{tabbing})}
L'environnement @code{tabbing} a un @dfn{motif courant de taquets de
tabulation} qui est une séquence de @var{n} taquets, avec @math{@var{n}
> 0}, numérotés 0, 1, etc. Ceci crée @var{n} colonnes
correspondantes. Le taquet @Num{0} est toujours la marge de gauche
définie par l'environnement englobant. Le taquet numéro @var{i} est
réglé quand on lui assigne une position horizontale sur la page avec la
commande @code{\=}. Le taquet numéro @var{i} ne peut être réglé que si
les autres taquets 0, @dots{}, @math{@var{i}-1} ont déjà été réglés.


@cindex taquet courant @r{(@code{tabbing})}
L'un des taquets du motif courant ayant été réglé comme le @dfn{taquet
courant}, par défaut tout texte composé par la suite au sein de
l'environnement @code{tabbing} est composé en drapeau droit avec le fer à
gauche sur ce taquet, c'est à dire qu'il est aligné à gauche dans la
colonne courante. La composition est faite en mode LR.

@cindex taquet de début de ligne courant @r{(@code{tabbing})}
Par ailleurs l'environnement @code{tabbing} a un @dfn{taquet de début de
ligne courant}. Par défaut, immédiatement après @code{\begin@{tabbing@}}
c'est le taquet @Num{0}, et on peut le changer pour les lignes suivantes
avec les commandes @code{\+} et @code{\-}. Au début de chaque ligne tabulée, le taquet
courant est initialement égal au taquet de début de ligne courant.
Lorsque le motif de taquets est modifié par une commande @code{\=},
alors le taquet de début de ligne redevient le taquet @Num{0} à partir de la
ligne suivante, à moins qu'une commande @code{\+} le change de nouveau
avant le changement de ligne par @code{\\} ou @code{\kill}. La commande
@code{\pushtabs} sauvegarde non seulement les positions de taquets, mais
aussi le taquet de début de ligne, et inversement @code{\poptabs} le
restaure.

La marge de droite de l'environnement @code{tabbing} est la fin de
ligne, c.-à-d.@: que la largeur de l'environnement est de longueur
@code{\linewidth}. Il n'y a pas par défaut de taquet correspondant à la
marge de droite, même s'il serait possible avec un peu de calcul d'en
définir un à cette position (voir exemples ci-après).

En ce qui concerne la marge de gauche, ou autrement dit le taquet @Num{0},
contrairement à l'environnement @code{tabular}, il n'est pas nécessaire
de mettre un @code{\noindent} devant @code{\begin@{tabbing@}} pour
éviter un renfoncement : un environnement @code{tabbing} commence
toujours un nouveau paragraphe sans renfoncement. De plus il est inutile
d'étoiler une commande @code{\hspace} en début de ligne tabulée pour que
l'espace soit pris en compte.

Normalement, au sein du motif de taquets de tabulation, l'ordre des
taquets correspond à des positions allant de gauche à droite. Il est
cependant possible de positionner n'importe quel taquet, hormis le
taquet @Num{0} à n'importe quelle position en utilisant des espacements
négatifs ou nuls. En réalité, le fait de ne pas pouvoir changer la
position du taquet @Num{0} n'est pas restrictif, car on peut utiliser à la
place comme taquet de début de ligne le taquet @Num{1} grâce à la commande
@code{\+}. Ainsi dans l'exemple ci-dessous, alors qu'on a le même
contenu de l'environnement @code{tabbing} que dans l'exemple précédent,
la première et la troisième colonne ont été interverties en changeant
uniquement le motif de taquets dans la première ligne se terminant en
@code{\kill}.

@example
\begin@{tabbing@}
\hspace@{5.5cm@}\=\hspace@{-2.5cm@}\=\hspace@{-3cm@}\=\+\kill
Navire              \>Armement         \>Année    \\
\textit@{Sophie@}     \>14               \>1800    \\
\textit@{@identity{Polychrest}@} \>24               \>1803    \\
\textit@{@identity{Lively}@}     \>38               \>1804    \\
\textit@{Surprise@}   \>28               \>1805    \\
\end@{tabbing@}
@end example

@noindent
Le résultat ressemble donc à cela :

@quotation
@multitable @columnfractions .2 .17 .17
@item Année @tab Armement @tab Navire
@item 1800  @tab 14 @tab @i{Sophie}
@item 1803  @tab 24 @tab @i{@identity{Polychrest}}
@item 1804  @tab 38 @tab @i{@identity{Lively}}
@item 1805  @tab 28 @tab @i{Surprise}
@end multitable
@end quotation


Les commandes suivantes peuvent être utilisées au sein d'un
environnement @code{tabbing} :

@ftable @code
@item \\ @r{(@code{tabbing})}
Finit une ligne tabulée et la compose. Après cette commande une nouvelle
ligne tabulée commence, et donc le taquet courant redevient le taquet
courant de début de ligne.

@item \= @r{(@code{tabbing})}
Règle le prochain taquet à la position courante, et fait de lui le
taquet courant. Si le taquet courant est le taquet @Num{@var{n}}, alors une
commande @code{\=} règle la position du taquet @Num{@math{@var{n}+1}} et
fait de lui le taquet courant. Si on avait déjà au moins
@math{@var{n}+2} taquets, ceci redéfinit la position du taquet
@Num{@math{@var{n}+1}}. Sinon, le nombre de taquets dans le motif courant
était à ce moment @math{(@var{n}+1)}, c'est à dire que dernier des
taquets en numéro d'ordre était le @Num{@var{n}}, alors la commande
@code{\=} en définissant le taquet @Num{@math{@var{n}+1}}, porte le nombre
de taquets de @math{@var{n}+1} à @math{@var{n}+2}.

La position des taquets peut être définie avec plus de liberté que ce
qui se passait avec un machine à écrire ordinaire. En effet il est
possible de définir à la même position deux taquets de @Num{@var{n}} et
@Num{@var{m}} distincts, voire de faire en sorte que les taquets @Num{@var{n}}
et @Num{@var{m}}, avec @math{@var{n}<@var{m}}, soient à des positions telles
que le taquet @Num{@var{m}} soit avant le taquet @Num{@var{n}}.

@item \> @r{(@code{tabbing})}
@findex \>
Change le taquet courant au taquet suivant dans l'ordre logique,
c.-à-d.@: si le taquet courant est le taquet @Num{@var{n}}, alors, en
supposant qu'il y ait au moins @math{@var{n}+2} taquets définis, on
passe au taquet @Num{@math{@var{n}+1}}, sinon cette commande provoque une
erreur.

@item \<
Change le taquet courant au taquet précédent dans l'ordre logique. Cette
commande ne peut être utilisée qu'au début d'une ligne tabulée, et que
lorsque le taquet de début de ligne courant est le taquet @Num{@var{n}} avec
@math{@var{n}>0}.  Le taquet courant devient alors le taquet
@Num{@math{@var{n}-1}}.

Il est en fait possible d'avoir @var{m} commandes @code{\<} consécutives
à condition que @math{@var{m}@leq{}@var{n}}, le taquet courant devient
alors le taquet @Num{@math{(@var{n}-@var{m})}}. Si par contre
@math{@var{m}>@var{n}}, alors la @math{@var{n}+1} commande @code{\<}
provoque une erreur.

Il est possible, même si c'est absurde, d'avoir ensuite des commandes
@code{\>} qui défont ce qu'on fait les commandes @code{\<}. Ainsi en
supposant qu'au début d'une ligne tabulée le taquet de début de ligne
courant soit le taquet @Num{2}, faire commencer la ligne par @code{\<\<\>\>}
n'a aucun effet. Par contre, @code{\<\<\<\>\>\>} provoquera une erreur,
parce que la troisième commande @code{\<} est illicite. Dans les mêmes
conditions faire @code{\<\>\<\>} provoque également une erreur, car la
seconde commande @code{\<} n'est pas consécutive de la première, elle
n'est donc pas, au sens où on l'entend, utilisée en début de ligne.

@item \+
Change le taquet de début de ligne courant au taquet suivant dans
l'ordre logique pour la ligne tabulée suivante, et toutes celles qui
suivent tant qu'une autre commande ne vient pas le modifier. La notion
de taquet suivant dans l'ordre logique suit le même principe que pour la
commande @code{\>}, c'est à dire que s'il n'y a que @math{@var{n}+1}
taquets définis, et que le taquet de début de ligne courant est le
taquet @Num{@var{n}}, alors cette commande provoque une erreur. La
commande @code{\+} peut être invoquée n'importe où dans la ligne
tabulée, et on peut avoir plusieurs commandes @code{\+} au sein de la
même ligne, du moment que pour chacune d'elle un nombre suffisant de
taquets est déjà défini. Par exemple le code suivant provoque une erreur
parce que bien qu'à la fin de la première ligne on ait trois taquets
définis, au moment où la commande @code{\+} est invoquée le nombre de
taquets définis ne vaut que 1, on ne peut donc pas passer du taquet
@Num{0} au taquet @Num{1} :

@smallexample
\begin@{tabbing@}
Vive \+\=la \=France\\
Vive \>la\>République\\
\end@{tabbing@}
@end smallexample

En revanche le code suivant fonctionne, car lorsque la commande
@code{\+} est passée on a trois taquets définis, les taquets @Num{0} à 2, on
peut donc passer du taquet @Num{0} au taquet @Num{1}.

@smallexample
\begin@{tabbing@}
Vive \=la \=France\+\\
Vive \>la\>République\\
\end@{tabbing@}
@end smallexample

C'est pourquoi l'usage est que la ou les commandes @code{\+} sont
toujours invoquées juste avant la fin de ligne @code{\\} ou @code{\kill}.

Il est possible, même si cela est absurde, d'avoir sur la même ligne à
la fois des commandes @code{\+} et @code{\-} s'annulant l'une l'autre,
du moment qu'aucune d'elle ne fasse passer sur un taquet non défini.

@item \-
Change le taquet de début de ligne courant au taquet précédent dans
l'ordre logique pour la ligne tabulée suivante, et toutes celles qui
suivent tant qu'une autre commande ne vient pas le modifier. C'est à
dire que si le taquet de début de ligne courant est le taquet @Num{@var{n}},
et qu'on a @var{m} commandes @code{\-} avec @math{@var{m}@geq{}@var{n}},
alors le taquet de début de ligne courant de la ligne suivante devient
le taquet @Num{@math{@var{n}-@var{m}}}. Par contre, si
@math{@var{m}>@var{n}}, alors la @math{(@var{n}+1)}ième commande
@code{\+} provoque une erreur.

@item \' @r{(@code{tabbing})}
Déplace tout ce que vous avez tapé jusqu'alors dans la colonne courante,
c.-à-d.@: tout ce qui suit la plus récente commande @code{\>},
@code{\<}, @code{\'}, @code{\\}, ou @code{\kill}, aligné à droite dans
la colonne précédente, le fer à droite étant espacé du taquet courant
d'une longueur @code{\tabbingsep}. Voir aussi @code{\`}.

@item \` @r{(@code{tabbing})}
Vous permet de placer du texte justifié à droite en face de n'importe
quel taquet, y compris le taquet 0. Les commandes @code{\`} et @code{\'}
alignent toutes deux le texte à droite, toutefois elles se distinguent
fortement par deux aspects :
@itemize
@item
Tout d'abord le texte qui est déplacé est, dans le cas de @code{\`}, le
texte qui suit la commande @code{\`} et qui va jusqu'à la fin de la
ligne tabulée, c.-à-d.@: jusqu'à @code{\\} ou @code{\end@{tabbing@}}.
Il ne doit y avoir aucune commande @code{\>} ou @code{\'} entre le
@code{\`} et la commande @code{\\} ou @code{\end@{tabbing@}} qui termine
la ligne. Dans le cas de la commande @code{\'} au contraire, c'est le
texte qui précède la commande @code{\'}.
@item
Par ailleurs, avec @code{\'} l'alignement se fait sur un taquet et avec
un espacement relatif de @code{\tabbingspace}, alors qu'avec @code{\`}
l'alignement se fait sur la marge de droite et sans espacement relatif.
@end itemize

@item \a @r{(@code{tabbing})}
@findex \a' @r{(aigu, accent dans tabbing)}
@findex \a` @r{(grave, accent dans tabbing)}
@findex \a= @r{(macron, accent dans tabbing)}
Dans un environnement @code{tabbing}, les commandes @code{\=}, @code{\'}
et @code{\`} ne produisent pas d'accents comme d'habitude
(@pxref{Accents}). À leur place, on utilise les commandes @code{\a=},
@code{\a'} et @code{\a`}.

@item \kill
Règles les taquets sans produire de texte. Fonctionne tout comme
@code{\\} à ceci près que la ligne courante est jetée au lieu de
produire une sortie. L'effet de toute commande @code{\=}, @code{\+} ou
@code{\-} dans cette ligne demeure en vigueur.

@item \poptabs
@findex \poptabs
Restaure les positions de taquets et le taquet de début de ligne
sauvegardés par le dernier @code{\pushtabs}.

@item \pushtabs
Sauvegarde dans une pile dédiée à cet effet le motif courant de taquets
de tabulation ainsi que le taquet de début de ligne. C'est utile pour
changer temporairement les positions de taquets au milieu d'un
environnement @code{tabbing}. Après un @code{\pushtabs}, on a un nouveau
motif vierge, c.-à-d.@: ne contenant qu'un seul taquet, le taquet @Num{0} à
la position de début de ligne. Pour toute commande @code{\pushtabs} il
doit y avoir une commande @code{\poptabs} avant la fin de
l'environnement, c'est à dire que la pile doit être explicitement vidée
avant le @code{end@{tabbing@}}.


@item \tabbingsep
Distance du texte déplacé par @code{\'} à la gauche du taquet courant.

@end ftable

Il est à noter que les espaces en début de ligne, où après @code{\=},
@code{\>} ou @code{\<} sont gobés, qu'il s'agisse d'espaces produits par
la macro @code{\space} ou par le caractère espace. Par contre l'espace
produit par la le caractère de contrôle espace (@code{\@w{ }}, c.-à-d.@:
une controblique suivie d'un caractère espace) n'est pas gobé.

Cet exemple compose une fonction en Pascal dans un format traditionnel :

@example
@{\ttfamily
\begin@{tabbing@}
function \= fact(n : integer) : integer;\+\\
            begin \=\+\\
                  if \= n $>$ 1 then\+\\
                        fact := n * fact(n-1)\-\\
                  else\+\\
                        fact := 1;\-\-\\
            end;\\
\end@{tabbing@}@}
@end example

@noindent
Le résultat ressemble à cela :
@example
function fact(n : integer) : integer;
         begin
               if n > 1 then
                  fact := n * fact(n-1);
               else
                  fact := 1;
         end;
@end example


Voici un autre exemple où le taquet @Num{2} est entre le taquet @Num{0} et le
taquet @Num{1} :

@example
@{\ttfamily
\begin@{tabbing@}
  12\=34\=\kill
  12345678\=9\\
  1\>2\>3\\
\end@{tabbing@}@}
@end example

Le résultat ressemble à cela :
@example
123456789
1   3   2
@end example

Voici un exemple où les taquets @Num{0} et @Num{1} sont confondus, ainsi que les
taquets @Num{2} et @Num{3}, ce qui permet de superposer le texte aux taquets
impairs sur celui au taquets pairs, par exemple pour souligner ou barrer
comme avec une machine à écrire, en superposant un caractère @code{_} ou
un caractère @code{@minus{}}. Évidemment ce n'est qu'une illustration de
la flexibilité des taquets, et non une méthode convenable pour souligner
ou barrer un mot, d'une part parce que @code{tabbing} en soi commençant
un nouveau paragraphe ne permet pas d'agir sur un seul mot, et d'autre
part, parce que le paquetage @package{soul} fait cela beaucoup mieux.
@PkgIndex{soul}

@example
@{\ttfamily
\begin@{tabbing@}
  \=souligne  \=\=\kill
  @identity{soulign}\a'e\>
  \_@{@}\_@{@}\_@{@}\_@{@}\_@{@}\_@{@}\_@{@}\_@{@}\>
  @identity{barr}\a'e\>@{--@}@{--@}@{--@}@{--@}@{--@}@{--@}\\
\end@{tabbing@}@}
@end example

@iftex
Le résultat ressemble à cela (la police utilisée dans ce document pour les exemples
n'est pas ici la mieux adaptée) :

@tex
{\def\underscore{\hbox to 0.5em{\_{}}}%
\def\line#1{\leavevmode\hbox{#1}}%
\nonfillstart\tt\setupmarkupstyle{example}%
\gobble
\line{\hbox{soulign\'e}\kern-4em%
\hbox{\underscore\underscore\underscore\underscore%
\underscore\underscore\underscore\underscore}\space\space%
\hbox{barr\'e}\kern-2.5em%
{-}{-}{-}{-}{-}}
}
@end tex
@end iftex

Finalement, voici un exemple où on a placé le taquet @Num{5} décalé d'une
longueur @code{\tabbingsep} à droite de la marge de droite.

@example
@{\ttfamily
\begin@{tabbing@}
\hspace@{1cm@}\=\hspace@{1cm@}\=\hspace@{1cm@}\=\hspace@{1cm@}\=
   \hspace@{\dimexpr\linewidth-4cm+\tabbingsep@}\=\kill
1\>2\>X\'3\>4\>5\>\a`a gauche de de la marge de droite
   avec \textbackslash'\'\\
1\>2\>X\'3\>4\>5\`\a`a gauche de de la marge de droite
   avec \textbackslash`\\
\end@{tabbing@}@}
@end example

Le résultat ressemble à cela :

@iftex
@tex
{\def\item#1{\hbox to 1cm{#1}}%
\def\itemii#1#2{\hbox to 1cm{#1\filskip#2\hskip5pt}}%
\def\line#1{\leavevmode\hbox to 13.95cm{#1}}%
\def\filskip{\hskip 0pt plus 1fil}%
\nonfillstart\tt\setupmarkupstyle{example}%
\gobble
%\line{012345678901234567890123456789012345678901234567890123456789}
\line{\item1\itemii2X\item3\item4\item5%
        \filskip\`a gauche de la marge de droite avec \backslashchar'}
\line{\item1\itemii2X\item3\item4\item5%
        \filskip\`a gauche de la marge de droite avec \backslashchar`}
}%
@end tex
@end iftex
@ifnottex
@example
@c 012345678901234567890123456789012345678901234567890123456789
1    2  X 3    4    5            à gauche de la marge de droite avec \'
1    2  X 3    4    5            à gauche de la marge de droite avec \`
@end example
@end ifnottex


@node table
@section @code{table}
@EnvIndex{table}
@cindex tableaux, créer
@cindex créer des tableaux

Synopsis :

@example
\begin@{table@}[@var{placement}]
  @var{corps-du-tableau}
  \caption[@var{titreldt}]@{@var{titre}@} % optionnel
  \label@{@var{étiquette}@}         % également opionnel
\end@{table@}
@end example

Une classe de flottants (@pxref{Floats}). Parce qu'ils ne peuvent pas
être coupés à cheval sur plusieurs pages, il ne sont pas composés en
séquence avec le texte normale, mais à la place sont « flottés » vers un
endroit convenable, tel que le sommet d'une page suivante.

Dans l'exemple suivant, l'environnement @code{table} contient un @code{tabular} :

@example
\begin@{table@}
  \centering\small
  \begin@{tabular@}@{ll@}
    \multicolumn@{1@}@{c@}@{\textit@{Auteur@}@}
      &\multicolumn@{1@}@{c@}@{\textit@{Pièce@}@}  \\ \hline
    Bach            &Suite  Numéro 1 pour violoncelle\\
    Beethoven       &Sonate Numéro 3 pour violoncelle\\
    Brahms          &Sonate Numéro 1 pour violoncelle
  \end@{tabular@}
  \caption@{Meilleures pièces pour violoncelle@}
  \label@{tab:violoncelle@}
\end@{table@}
@end example

@noindent
mais vous pouvez placer beaucoup de types différents de contenu au sein
d'une @code{table} : le @var{table body} peut contenir du texte, des
commandes @LaTeX{}, des graphiques, etc. Il est composé dans une
@code{parbox} de largeur @code{\textwidth}.

Pour les valeurs possibles de @var{placement} et leur effet sur
l'algorithme de placement des flottants, voir @ref{Floats}.

L'étiquette est optionnelle ; elle est utilisée pour les doubles renvois
(@pxref{Cross references}).
@findex \caption
La commande @code{\caption} est également optionnelle. Elle spécifie la
légende @var{titre} pour le tableau (@pxref{\caption}). La légende est
numérotée par défaut. Si @var{titreldt} est présent, il est utilisé dans
la liste des tableaux au lieu de @var{titre} (@pxref{Table of contents
etc.}).

Dans l'exemple suivant le tableau et sa légende flottent jusqu'au bas
d'une page, à moins qu'il soit repoussé jusqu'à une page de flottants à
la fin.

@example
\begin@{table@}[b]
  \centering
  \begin@{tabular@}@{r|p@{2in@}@} \hline
    Un &Le plus solitaire des nombres \\
    Deux &Peut être aussi triste que un.
         C'est le nombre le plus solitaire après le nombre un.
  \end@{tabular@}
  \caption@{Vertus cardinales@}
  \label@{tab:VertusCardinales@}
\end@{table@}
@end example


@node tabular
@section @code{tabular}
@EnvIndex{tabular}
@cindex lignes dans des tableaux
@cindex aligner du texte dans des tableaux

Synopsis :

@example
\begin@{tabular@}[@var{pos}]@{@var{cols}@}
 @var{article colonne 1} & @var{article colonne 2} ... & @var{article colonne n} \\
...
\end@{tabular@}
@end example

@noindent
ou

@example
\begin@{tabular*@}@{@var{largeur}@}[@var{pos}]@{@var{cols}@}
@var{article colonne 1} & @var{article colonne 2} ... & @var{article colonne n} \\
...
\end@{tabular*@}
@end example

Ces environnements produisent une boîte consistant d'une séquence de
lignes horizontales. Chaque ligne consiste en des articles qui sont
alignés verticalement au sein de colonnes. Ci-après une illustration de
beaucoup des caractéristiques.

@example
\begin@{tabular@}@{l|l@}
  \textit@{Nom du joueur@}  &\textit@{Coups de circuit de toute sa carrière@}  \\
  \hline
  Hank Aaron  &755 \\
  Babe Ruth   &714
\end@{tabular@}
@end example

@noindent
La sortie a deux colonnes alignées à gauche, avec une barre verticales
entre elles. Ceci est spécifié par l'argument @code{@{l|l@}} de
@code{tabular}.
@findex & @r{(pour cellules de tableau)}
On place les articles dans des colonnes différentes en les séparant avec
une esperluette @code{&}. La fin de chaque ligne est marquée avec une
double controblique, @code{\\}.  On met un filet horizontal sous une
ligne en mettant @code{\hline} après sa double controblique.
@findex \\ @r{(pour @code{tabular})}
Cette @code{\\} est optionnelle après la dernière ligne, à moins qu'une
commande @code{\hline} suive, pour mettre un filet sous le tableau.

Les arguments obligatoires et optionnels de @code{tabular} consistent
en :

@table @code
@item pos
Optionnel. Spécifie la position verticale du tableau. La valeur par
défaut est d'aligner le tableau de sorte à ce que son centre vertical
s'accorde à la ligne de base du texte autour. Il y a deux autres
alignements possibles : @code{t} aligne le tableau de sorte que la
première ligne s'accorde à la ligne de base du texte autour, et
@code{b} fait la même chose pour la dernière ligne du tableau.

Ceci n'a un effet que si il y a du texte autour de la table. Dans le cas
usuel d'un @code{tabular} seul au sein d'un environnement @code{center}
cette option ne fait aucune différence.

@item cols
Obligatoire. Spécifie le formatage des colonnes. Il consiste en une
séquence des spécificateurs suivants, correspondant à la séquence des
colonnes et de la matière inter-colonne.

@table @code
@item l
Une colonne d'articles alignés à gauche.

@item r
Une colonne d'article alignés à droite.

@item c
Une colonne d'article centrés.

@item |
Une ligne verticale s'étendant complètement sur la hauteur et profondeur
de l'environnement.

@item @@@{@var{texte ou espace}@}
Ceci insère @var{texte ou espace} à cette position dans chaque ligne. La
matière @var{texte ou espace} est composée en mode LR. Ce texte est
fragile (@pxref{\protect}).

Si entre deux spécificateurs de colonne il n'y pas d'expression en
@samp{@@@{@dots{}@}} alors les classes @code{book}, @code{article} et
@code{report} de @LaTeX{} mettent de chaque côté de chaque colonne une
gouttière (espace blanc vertical) de largeur @code{\tabcolsep}, qui par
défaut vaut 6@dmn{pt}. C'est à dire que par défaut des colonnes
adjacentes sont séparées de 12@dmn{pt} (ainsi @code{\tabcolsep} est un
nom trompeur puisque ce n'est pas la séparation entre des colonnes de
tableau). De plus, un espace de @code{\tabcolsep} vient aussi avant la
première colonne ainsi qu'après la dernière colonne, à moins que vous
placiez un @samp{@@@{@dots{}@}} à cet endroit.

Si vous l'emportez sur la valeur par défaut et utilisez une expression
en @samp{@@@{@dots{}@}} alors @LaTeX{} n'insère pas @code{\tabcolsep} et
vous devez insérer tout espace désiré vous-même, comme dans
@code{@@@{\hspace@{1em@}@}}.

Une expression vide @code{@@@{@}} élimine l'espace, y compris l'espace
au début ou à la fin, comme dans l'exemple ci-dessous où on veut que les
lignes du tableau soient alignées sur la marge de gauche.

@example
\begin@{flushleft@}
  \begin@{tabular@}@{@@@{@}l@}
    ..
  \end@{tabular@}
\end@{flushleft@}
@end example

L'exemple suivant montre du texte, une virgule de séparation décimale
entre les colonnes, arrangé de sorte que les nombres dans la table
soient alignés sur cette virgule.
@c xx TODO => siunitx fait ça mieux

@example
\begin@{tabular@}@{r@@@{$,$@}l@}
  $3$ &$14$  \\
  $9$ &$80665$
\end@{tabular@}
@end example


@anchor{\extracolsep}
@findex \extracolsep
Une commande @code{\extracolsep@{@var{lrg}@}} au sein d'une expression
en @samp{@@@{@dots{}@}} a pour effet qu'une espace supplémentaire de
largeur @var{lrg} apparaît sur la gauche de toutes les colonnes
suivantes, jusqu'à contre-ordre d'une autre commande
@code{\extracolsep}.  Contrairement aux à espace inter-colonnes
ordinaires, cette espace supplémentaire n'est pas supprimé par une
expression en @samp{@@@{@dots{}@}}. Une commande @code{\extracolsep}
peut uniquement être utilisée au sein d'une expression en
@samp{@@@{@dots{}@}} elle-même au sein de l'argument @code{cols}.
Ci-dessous, @LaTeX{} insère la quantité convenable d'espace intercolonne
our que le tableau fasse 10@dmn{cm} de large.

@example
\begin@{center@}
  \begin@{tabular*@}@{10cm@}@{l@@@{\extracolsep@{\fill@}@}l@}
    Tomber sept fois, se relever huit \ldots
    &c'est comme ça la vie !
  \end@{tabular*@}
\end@{center@}
@end example

Pour insérer des commandes qui sont automatiquement exécutées avant une
colonne donnée, charger le paquetage @code{array} et utilisez le
spécificateur @code{>@{...@}}.
@c xx should fully explain array, tabularx, and all other base packages...


@item p@{@var{lrg}@}
Chaque cellule de la colonne est composée au sein d'une parbox de
largeur @var{lrg}, comme si c'était l'argument d'une commande
@code{\parbox[t]@{@var{lrg}@}@{...@}}.

Les sauts de ligne de type double-controblique @code{\\} ne sont pas
permis au sein d'une telle cellule, sauf à l'intérieur d'un
environnement comme @code{minipage}, @code{array}, ou @code{tabular}, ou
à l'intérieur d'une @code{\parbox} explicite, ou dans la portée d'une
déclaration @code{\centering}, @code{\raggedright}, ou
@code{\raggedleft} (quand elles sont utilisées au sein d'une cellule de
colonne en @code{p} ces déclarations doivent apparaître entre accolades,
comme dans @code{@{\centering .. \\ ..@}}. Sans quoi @LaTeX{} prendra la
double controblique comme une fin de ligne de tableau. Au lieu de cela, pour
obtenir un saut de ligne dans une cellule de ce type utilisez
@code{\newline} (@pxref{\newline}).

@item *@{@var{num}@}@{@var{cols}@}
Équivalent à @var{num} copies de @var{cols}, où @var{num} est un entier
positif et @var{cols} est toute liste de spécificateurs. Ainsi
@code{\begin@{tabular@}@{|*@{3@}@{l|r@}|@}} équivaut à
@code{\begin@{tabular@}@{|l|rl|rl|r|@}}. Notez que @var{cols} peut
contenir une autre expression en @code{*@{@dots{}@}@{@dots{}@}}.

@end table

@item largeur
Obligatoire pour @code{tabular*}, non autorisé pour
@code{tabular}. Spécifie la largeur de l' environnement
@code{tabular*}. Il doit y avoir de l'espace élastique entre les
colonnes, comme avec with @code{@@@{\extracolsep@{\fill@}@}}, de sorte à
permettre au tableau de se dilater ou contracter pour faire la largeur
spécifiée, sans quoi vous aurez probablement l'avertissement
@code{Underfull \hbox (badness 10000) in alignment ..}.

@end table

Paramètres qui contrôlent le formatage :
@c xx defaults, own node (xref from array)?

@ftable @code
@item \arrayrulewidth
@anchor{tabular arrayrulewidth}
Une longueur qui est l'épaisseur du filet créé par @code{|},
@code{\hline}, et @code{\vline} au sein des environnements
@code{tabular} et @code{array}. La valeur par défaut est @samp{.4pt}. On
peut la changer comme dans
@code{\setlength@{\arrayrulewidth@}@{0.8pt@}}.

@item \arraystretch
@anchor{tabular arraystrech}
Un facteur par lequel l'espacement entre les lignes au sein des
environnements @code{tabular} et @code{array} est multiplié. La valeur
par défaut est @samp{1} pour aucune dilatation/contraction. On peut la
changer comme dans @code{\renewcommand@{\arraystretch@}@{1.2@}}.

@item \doublerulesep
@anchor{tabular doublerulesep}
Une longueur qui est la distance ente les filets verticaux produit par
le spécificateur @code{||}.
@c - vincentb1 pourquoi supprimer le texte: au sein des environnements
@c - @code{tabular} et @code{array}
La valeur par défaut est @samp{2pt}.

@item \tabcolsep
@anchor{tabular tabcolsep}
Une longueur qui est la moitié de l'espace entre les colonnes. La valeur
par défaut est @samp{6pt}. On peut la changer avec @code{\setlength}

@end ftable

Les commandes suivantes peuvent être utilisées à l'intérieur du corps
d'un environnement @code{tabular}, les deux premières au sein d'un
article, et les deux suivantes entre les lignes :

@menu
* \multicolumn:: Faire qu'un article s'étende sur plusieurs colonnes.
* \vline:: Dessiner une ligne verticale.
* \cline:: Dessiner une ligne horizontale s'étendant sur quelques colonnes.
* \hline:: Dessiner une ligne horizontale s'étendant sur toutes les colonnes.
@c - vincentb1 ce n'est pas le bon menu où mettre ça: * tabularx:: Un
@c environnement qui étend les types de colonne de @code{tabular*}.
@end menu


@node \multicolumn
@subsection @code{\multicolumn}
@findex \multicolumn

Synopsis :
@example
\multicolumn@{@var{nbrecols}@}@{@var{patron}@}@{@var{texte}@}
@end example

Fabrique une entrée de @code{array} ou @code{tabular} fusionnée sur
plusieurs colonnes. Le premier argument, @var{nbrecols} spécifie le
nombre de colonnes sur lesquelles s'étend la fusion. Le second argument,
@var{patron}, est obligatoire et spécifie le format de l'entrée ;
notamment @code{c} pour centré, @code{l} pour aligné à gauche, @code{r}
pour aligné à droite. Le troisième argument, @var{texte} spécifie le
texte à mettre dans l'entrée.

Dans l'exemple suivant les trois première colonnes sont fusionnées en le
titre unique @samp{Nom}.

@example
\begin@{tabular@}@{lccl@}
  \textit@{ID@}     &\multicolumn@{2@}@{c@}@{\textit@{Nom@}@} &\textit@{Âge@}\\ \hline % ligne 1
  978-0-393-03701-2 &O'Brian &Patrick                         &55            \\ % ligne two
    ...
\end@{tabular@}
@end example

On compte comme colonne chaque partie du patron @var{patron} de
l'environnement @code{array} ou @code{tabular} qui, à l'exception de la
première, commence par @code{l}, @code{c}, @code{r}, ou @code{p}. Ainsi
à partir de @code{\begin@{tabular@}@{|r|ccp@{4cm@}|@}} les parties sont
@code{|r|}, @code{c}, @code{c}, et @code{p@{1.5in@}|}.

L'argument @var{patron} l'emporte sur la spécification par défaut de
zone inter-colonne de l'environnement @code{array} ou @code{tabular}
contigüe à cette entrée multi-colonne. Pour affecter cette zone, cet
argument peut contenir des barres verticales @code{|} indiquant le
placement de filets verticaux, et d'expression @code{@@@{...@}}.  Ainsi
si @var{patron} est @samp{|c|} alors l'entrée multi-colonne est centrée
et un filet vertical la précède et la suit dans les espaces inter-colonne
de part et d'autre.  Ce tableau nous permet de décrire en détail le
comportement exact.

@example
\begin@{tabular@}@{|cc|c|c|@}
  \multicolumn@{1@}@{r@}@{w@}       % entrée un
    &\multicolumn@{1@}@{|r|@}@{x@}  % entrée deux
    &\multicolumn@{1@}@{|r@}@{y@}   % entrée trois
    &z                        % entrée quatre
\end@{tabular@}
@end example

Avant la première entrée il n'y a pas de filet verticale en sortie parce
que le @code{\multicolumn} a le spécificateur @samp{r} dans @var{patron}
sans barre verticales initiale.  Entre les entrées un et deux il y a un
filet vertical ; en effet bien que le premier @var{patron} ne se termine
pas par une barre verticale, le second @var{patron} en a une à son
commencement.  Entre la deuxième et la troisième entré il y a un seul
filet vertical ; bien que le @var{patron} dans les deux
@code{multicolumn} correspondant demandent un filet vertical, vous n'en
obtenez qu'un seul.  Entre les entrées trois et quatre il n'y a aucun
filet vertical ; la spécification par défaut en demande un mais le
@var{patron} dans le @code{\multicolumn} de la troisième entrée n'en
demande pas, et cela l'emporte. Finalement, à la suite de la quatrième
entrée il y a un filet vertical à cause de la spécification par défaut.

Le nombre de colonnes fusionnées @var{nbrecols} peut être 1.  En plus de
donner la possibilité de changer l'alignement horizontal, ceci est aussi
utile pour l'emporter pour l'une des lignes sur la définition
@code{tabular} par défaut de la zone inter-colonne, y compris concernant le
placement des filets verticaux.

Dans l'exemple ci-dessous, dans la définition @code{tabular} de la
première colonne on spécifie par défaut de justifier, mais au sein de la
première ligne l'entrée est centrée avec
@code{\multicolumn@{1@}@{c@}@{\textsc@{Période@}@}}.  De même au sein de
la première ligne, les deuxième et troisième colonnes sont fusionnées
entre elle avec @code{\multicolumn@{2@}@{c@}@{\textsc@{Intervalle@}@}},
l'emportant sur la spécification pour centrer ces deux colonnes sur le
trait d'union au sein de la plage de dates.

@example
\begin@{tabular@}@{l|r@@@{-@}l@}
  \multicolumn@{1@}@{c@}@{\textsc@{Période@}@}
    &\multicolumn@{2@}@{c@}@{\textsc@{Dates@}@} \\ \hline
  Baroque          &1600           &1760         \\
  Classique        &1730           &1820         \\
  Romantique       &1780           &1910         \\
  Impressioniste   &1875           &1925
\end@{tabular@}
@end example

Notez que bien que la spécification @code{tabular} par défaut place un
filet vertical entre la première et la deuxième colonne, du fait qu'il
n'y pas pas de barre verticale dans aucun des patrons @var{patron} des
commandes @code{\multicolumn} des deux premières colonne, alors aucun
filet n'apparaît sur la première ligne.


@node \vline
@subsection @code{\vline}
@findex \vline

La commande @code{\vline} dessine une ligne verticale s'étendant sur la
totalité de la hauteur et de la profondeur de sa ligne. Une commande
@code{\hfill} peut être utilisée pour déplacer cette ligne verticale
vers le bord de la colonne. La commande @code{\vline} peut aussi être
utilisée dans une expression @code{@@@{@dots{}@}}.

@c @node tabularx
@c @comment node-name, next, previous, up
@c @subsection @code{tabularx}


@node \cline
@subsection @code{\cline}
@findex \cline

Synopsis :

@example
\cline@{@var{i}-@var{j}@}
@end example

La commande @code{\cline} dessine des lignes horizontales à travers les
colonnes spécifiées en arguments obligatoires, en commençant dans la
@var{i} et finissant dans la colonne @var{j}.

@node \hline
@subsection @code{\hline}
@findex \hline

La commande @code{\hline} dessine une ligne horizontale de la largeur de
l'environnement @code{tabular} ou @code{array} susjacent. Elle est la
plupart du temps utilisée pour dessiner une ligne au sommet, bas, et
entre les lignes d'un tableau.


@node thebibliography
@section @code{thebibliography}

@EnvIndex{thebibliography}
@cindex bibliographie, créer (manuellement)

Synopsis :

@example
\begin@{thebibliography@}@{@var{étiquette-la-plus-large}@}
\bibitem[@var{étiquette}]@{@var{clef_de_cite}@}
...
\end@{thebibliography@}
@end example

L'environnement @code{thebibliography} produit une bibliographie ou une
liste de références.  Il y a deux façons de produire des listes
bibliographiques.  Cet environnement convient quand vous avez un petit
nombre de références et pouvez maintenir la liste manuellement.
@xref{Using BibTeX}, pour une approche plus sophistiquée.

L'exemple ci-dessous illustre l'environnement avec deux articles.

@example
Ce travail s'appuie sur \cite@{latexdps@}.
Et ensemble à \cite@{latexdps, texbook@}.
  ...
\begin@{thebibliography@}@{9@}
\bibitem@{latexdps@}
  Leslie Lamport.
  \textit@{\LaTeX@{@}: a document preparation system@}.
  Addison-Wesley, Reading, Massachusetts, 1993.
\bibitem@{texbook@}
  Donald Ervin Knuth.
  \textit@{Le Texbook : Composition informatique@}.
  Vuibert, 1er août 2017.\end@{thebibliography@}
@end example

@noindent
Cela formate la première référence comme @samp{[1] Leslie ...}, de sorte
que @code{... s'appuie sur \cite@{latexdps@}} produit @samp{... s'appuie
sur [1]}.  Le second @code{\cite} produit @samp{[1, 2]}.  On doit
compile le document deux fois pour que ces numéros de référence soient
résolus.

L'argument obligatoire @var{étiquette-la-plus-large} est un texte qui,
lorsqu'il est composé, est aussi large que la plus large des étiquettes
d'article produit pas les commandes @code{\bibitem}.  Traditionnellement
on utilise @code{9} pour des bibliographies de moins de 10 références,
@code{99} pour celles qui en on moins de 100, etc.

@findex \bibname
@findex \refname
La liste bibliographique a un titre de bibliographie tel que
@samp{Bibliographie}. Pour le changer il y a deux cas. Dans les classes
@file{book} et @file{report}, lorsque le niveau de rubricage le plus
élevé est @code{\chapter} et le titre par défaut @samp{Bibliographie},
ce titre est dans la macro @code{\bibname}. Pour @file{article}, lorsque
le niveau de rubricage le plus élevé est @code{\section} et que le titre
par défaut est @samp{Références}, le titre est stocké dans la macro
@code{\refname}. Pour le changer redéfinissez la commande, comme dans
@code{\renewcommand@{\refname@}@{Références citées@}}, après
@code{\begin@{document@}}.

@PkgIndex{babel}
Les paquetages de prise en charge linguistique comme @package{babel}
redéfinissent automatiquement @code{\refname} ou @code{\bibname} pour
s'adapter à la langue sélectionnée.

@xref{list}, pour les paramètres de contrôle de disposition de la liste.

@menu
* \bibitem:: Spécifier un article de bibliographie.
* \cite:: Faire référence à un article de bibliographie.
* \nocite:: Inclure un article dans la bibliographie.
* Utilisation de BibTex: Using BibTeX.  Génération automatique de bibliographies.
@end menu


@node \bibitem
@subsection @code{\bibitem}

@findex \bibitem

Synopsis :

@example
\bibitem@{@var{clef_de_cite}@}
@end example

@noindent
ou :

@example
\bibitem[@var{étiquette}]@{@var{clef_de_cite}@}
@end example

La commande @code{\bibitem} génère un article étiqueté par défaut par un
numéro généré en utilisant le compteur @code{enumi}. L'argument
@var{clef_de_cite} est une
@cindex clef de référence bibliographique
@cindex référence bibliographique, clef
@dfn{clef de référence bibliographique} consistant
en une chaîne quelconque de lettres, chiffres, et signes de
ponctuation (hormis la virgule).

@xref{thebibliography}, pour un exemple.

L'argument optionnel @var{étiquette}, lorsqu'il est présent, sert
d'étiquette et le compteur @code{enumi} n'est pas incrémenté.  Dans
l'exemple suivant :

@example
\begin@{thebibliography@}
\bibitem[Lamport 1993]@{latexdps@}
  Leslie Lamport.
  \textit@{\LaTeX@{@}: a document preparation system@}.
  Addison-Wesley, Reading, Massachusetts, 1993.
\bibitem@{texbook@}
  Donald Ervin Knuth.
  \textit@{Le Texbook : Composition informatique@}.
  Vuibert, 1er août 2017.
\end@{thebibliography@}
@end example

@noindent
le premier article est formaté comme @samp{[Lamport 1993] Leslie ...}
(la quantité d'espace horizontal que @LaTeX{} laisse pour l'étiquette
dépend de l'argument @var{étiquette-la-plus-large} de l'environnement
@code{thebibliography} ; voir @ref{thebibliography}).
De même, @code{... s'appuyant sur \cite@{latexdps@}} produit
@samp{... s'appuyant sur [Lamport 1994]}.

Si vous mélangez des articles @code{\bibitem} avec et sans
@var{étiquette}, alors @LaTeX{} numérote ces derniers séquentiellement.
Dans l'exemple ci-dessus l'article @code{texbook} apparaît comme
@samp{[1] Donald ...}, bien que ce soit le deuxième article.

Si vous utilisez la même @var{clef_de_cite} deux fois, alors vous
obtenez @samp{LaTeX Warning: There were multiply-defined labels}.

En coulisse, @LaTeX{} se souvient de l'information @var{clef_de_cite} et
@var{étiquette} parce que @code{\bibitem} écrit dans le fichier
auxiliaire @file{@var{jobname}.aux} (@pxref{Jobname}).  Par exemple dans
l'exemple ci-dessus ce fichier contient
@code{\bibcite@{latexdps@}@{Lamport, 1993@}} et
@code{\bibcite@{texbook@}@{1@}}.  Le fichier @file{.aux} est lu par la
commande @code{\begin@{document@}} et alors l'information devient
disponible pour les commandes @code{\cite}.  Ceci explique qu'il est
nécessaire d'exécuter @LaTeX{} deux fois pour que les références soient
résolues : une pour l'écrire, et une pour le relire.

À cause de cet algorithme en deux passes, quand vous ajourez un
@code{\bibitem} ou changez sa @var{clef_de_cite} vous pouvez obtenir
@samp{LaTeX Warning: Label(s) may have changed. Rerun to get
cross-references right}.  La solution est de recompiler.

@node \cite
@subsection @code{\cite}

@findex \cite

Synopsis :

@example
\cite@{@var{clefs}@}
@end example

@noindent
ou

@example
\cite[@var{subcite}]@{@var{clefs}@}
@end example


Cette commande génère en sortie une citation des références associées à
@var{clefs}.  L'argument @var{clefs} est une liste d'une ou plus de
clefs de références bibliographiques (@pxref{\bibitem}), séparées par
des virgules.


L'exemple suivant :

@example
La source ultime est \cite@{texbook@}.
  ...
\begin@{thebibliography@}
\bibitem@{texbook@}
  Donald Ervin Knuth.
  \textit@{Le Texbook : Composition informatique@}.
  Vuibert, 1er août 2017.
\end@{thebibliography@}
@end example

@noindent
produit une sortie du genre @samp{... ultime est [1]}.  (Vous pouvez
changer l'apparence de la citation et de la référence en utilisant un
style de bibliographie si vous générez automatiquement l'environnement
@code{thebibliography}.  @xref{Using BibTeX}, pour plus ample
information).

L'argument optionnel @var{subcite} est joint à la citation.  Par
exemple, @code{Voir 14.3 dans \cite[p.~314]@{texbook@}} pourrait
produire @samp{Voir 14.3 dans [1, p. 314]}.

En plus de ce qui apparaît en sortie, @code{\cite} écrit de
l'information dans le fichier auxiliaire @file{@var{jobname}.aux}
(@pxref{Jobname}).  Par exemple, @code{\cite@{latexdps@}} écrit
@samp{\citation@{latexdps@}} dans ce fichier.  Cette information est
utilisée par Bib@TeX{} pour inclure dans vos listes de référence
seulement les ouvrages que vous avez effectivement cités ; voir aussi
@ref{\nocite}.

Si @var{clefs} n'est pas dans votre information de bibliographie, alors
vous obtenez @samp{LaTeX Warning: There were undefined references}, et
en sortie la citation s'affiche comme un point d'interrogation en gras
entre crochets.  Il y a deux causes possibles.  Si vous avez fait une
faute de frappe, comme dans @code{\cite@{texbok@}} alors il n'y a qu'à
la corriger.  Si par contre vous venez juste d'ajouter ou de modifier
l'information bibliographique de sorte que le fichier @file{.aux} est
modifié (@pxref{\bibitem}) alors la solution est d'exécuter de nouveau
@LaTeX{}.


@node \nocite
@subsection @code{\nocite}
@findex \nocite

Synopsis :

@example
@code{\nocite@{@var{clefs}@}}
@end example

La commande @code{\nocite} ne produit aucun texte en sortie, mais écrit
@var{clefs} dans le fichier auxiliaire @file{@var{jobname}.aux}
(@pxref{Jobname}).

L'argument obligatoire @var{clefs} est une liste d'une ou plusieurs
clefs de référence bibliographique (@pxref{\bibitem}). Cette information
est utilisée par Bib@TeX{} pour inclure ces ouvrages dans votre liste de
références même si vous ne les avez pas cités explicitement
(@pxref{\cite}).


@node Using BibTeX
@subsection Utilisation de Bib@TeX{}

@cindex utilisation de Bib@TeX{}
@cindex bib@TeX{}, utilisation
@cindex bibliographie, créer (automatiquement)
@findex \bibliographystyle
@findex \bibliography

Comme décrit dans @code{thebibliography} (@pxref{thebibliography}), une
approche sophistiqué pour gérer les bibliographies est fournie par le
programme Bib@TeX{}.  Ceci est uniquement une introduction ; voir la
documentation complète sur le CTAN (@pxref{CTAN}).

Avec Bib@TeX{} vous n'utilisez pas l'environnement
@code{thebibliography} directement (@pxref{thebibliography}). Au lieu de
cela, vous incluez les lignes :

@example
\bibliographystyle@{@var{stylebib}@}
\bibliography@{@var{ficbib1},@var{ficbib2}, ...@}
@end example

@noindent
L'argument @var{stylebib} fait référence à un fichier
@file{@var{stylebib}.bst} définissant l'aspect que doivent avoir vos
référence bibliographique.  Les noms @var{stylebib} standards distribués
avec Bib@TeX{} sont :

@table @code
@item alpha
Les étiquettes sont formées à partir du nom de l'auteur et de l'année de
publication. Les articles bibliographiques sont classés alphabétiquement.
@item plain
Les étiquettes sont des numéros.
Les articles sont classés alphabétiquement.
@item unsrt
Comme @code{plain}, mais les entrées sont dans l'ordre où les références
y sont faites dans le texte.
@item abbrv
Comme @code{plain}, mais les étiquettes sont plus compactes.
@end table

@noindent
De très nombreux autres styles Bib@TeX{} existent, taillés sur mesure
pour satisfaire les exigences de diverses publications. Voir le sujet
@url{https://ctan.org/topic/bibtex-sty} sur le CTAN.

La commande @code{\bibliography} est ce qui produit pour de bon la
bibliographie. L'argument de @code{\bibliography} fait référence aux
fichiers nommés @file{@var{ficbib1}.bib}, @file{@var{ficbib2}.bib},
@dots{}, qui sont censés contenir votre base de données au format
Bib@TeX{}. L'exemple suivant illustre une paire typique d'entrées dans
ce format.

@example
@@book@{texbook,
  title     = @{Le @{@{\TeX@}@}book~: composition informatique@},
  author    = @{D.E. Knuth@},
  isbn      = @{2-7117-4819-7@},
  series    = @{Vuibert informatique@},
  year      = @{2003@},
  publisher = @{Vuibert@}
@}
@@book@{sexbook,
    author    = @{W.H. Masters and V.E. Johnson@},
    title     = @{Les r@{\'e@}action sexuelles@},
    year      = @{1976@},
    publisher = @{Robert Laffont@}
@}
@end example

Seules les entrées désignées par les commandes @code{\cite} ou
@code{\nocite} sont listées dans la bibliographie du document. De la
sorte, vous pouvez conserver toutes vos sources ensemble dans un
seul fichier, ou un petit nombre de fichiers, et compter sur Bib@TeX{} pour
inclure dans le document seulement celles que vous avez utilisées.

@cindex @samp{*}, pour faire @code{\nocite} sur toutes les clefs
@findex \nocite @r{@{*@}, pour toutes les clefs}
Avec Bib@TeX{}, l'argument @var{clefs} de @code{\nocite} peut aussi être
le caractère @samp{*} tout seul.  Ceci veut dire de citer implicitement
tous les articles de toutes les bibliographies données.

@menu
* messages d'erreur Bib@TeX{}: Bib@TeX{} error messages
@end menu

@node Bib@TeX{} error messages
@subsubsection Messages d'erreur de Bib@TeX{}

@cindex Bib@TeX{}, messages d'erreur
@cindex messages d'erreur de Bib@TeX{}
@findex .aux @r{fichier et commandes Bib@TeX{}}

Si vous oubliez d'utiliser @code{\bibliography} ou
@code{\bibliographystyle} dans votre document (ou, moins
vraisemblablement, faites un document sans aucune commande @code{\cite}
ni @code{\nocite}), alors Bib@TeX{} produit un message d'erreur.  Parce
que Bib@TeX{} est utilisable avec n'importe quel programme, et pas
seulement @LaTeX{}, les messages d'erreur font référence aux commandes
internes lues par Bib@TeX{} (du fichier @file{.aux}), plutôt qu'aux
commandes de niveau utilisateur décrites plus haut.

Le tableau ci-après montre les commandes internes mentionnées dans les
erreurs Bib@TeX{}, et les commandes de niveau utilisateur
correspondantes.

@ftable @code
@item \bibdata
@findex \bibliography @r{et @code{\bibdata} interne}
@code{\bibliography}

@item \bibstyle
@findex \bibliographystyle @r{et @code{\bibstyle} interne}
@code{\bibliographystyle}

@item \citation
@findex \cite @r{et @code{\citation} interne}
@findex \nocite @r{et @code{\citation} interne}
@code{\cite}, @code{\nocite}
@end ftable

Par exemple, si votre document n'a aucune commande
@code{\bibliographystyle}, Bib@TeX{} s'en plaint ainsi :

@example
I found no \bibstyle command---while reading file @var{document}.aux
@end example


@node theorem
@section @code{theorem}

@EnvIndex{theorem}
@cindex théorèmes, composition des

Synopsis :

@example
\begin@{theorem@}
  @var{corps du théorème}
\end@{theorem@}
@end example

L'environnement @code{theorem} produit « Théorème @var{n} » en gras
suivi de @var{corps du théorème}, où les possibilités de numérotation pour
@var{n} sont décrites par @code{\newtheorem} (@pxref{\newtheorem}).

@example
\newtheorem@{lem@}@{Lemme@}      % dans le préambule
\newtheorem@{thm@}@{Théorème@}
  ...
\begin@{lem@}                  % dans le corps du document
  texte du lemme
\end@{lem@}

Le résultat suivant en découle immédiatement.
\begin@{thm@}[Gauss] % place « Gauss » entre parenthèses après le titre
  texte du théorème
\end@{thm@}
@end example

@PkgIndex{amsmath}
@PkgIndex{amsthm}
La plupart des nouveaux documents utilisent les paquetages @package{amsthm}
et @package{amsmath} de l'@identity{American Mathematical Society}.  Entre autres ces
paquetages incluent un grand nombre d'options pour les environnements de
théorèmes, telles que des options de formatage.


@node titlepage
@section @code{titlepage}

@EnvIndex{titlepage}
@cindex fabriquer une page de titre
@cindex pages de titre, création

Synopsis :

@example
\begin@{titlepage@}
  ... texte et espacement ...
\end@{titlepage@}
@end example

L'environnement @code{titlepage} crée une page de titre, c'est à dire
une page sur laquelle ne sont inscrit aucun numéro de page ou libellé de
rubrique. Il entraîne aussi que la page suivante a le numéro un.


Dans l'exemple suivant tout le formatage, y compris l'espacement
vertical, est laissé à l'auteur.

@example
\begin@{titlepage@}
\vspace*@{\stretch@{1@}@}
\begin@{center@}
  @{\huge\bfseries Thèse \\[1ex]
                  titre@}                  \\[6.5ex]
  @{\large\bfseries Nom de l'auteur@}           \\
  \vspace@{4ex@}
  Thèse soumise à                    \\[5pt]
  \textit@{Nom de l'université@}                \\[2cm]
  pour obtenir le grade de \\[2cm]
  \textsc@{\Large Docteeur en@}    \\[2ex]
  \textsc@{\large Mathématiques@}             \\[12ex]
  \vfill
  Departement de Mathématiques               \\
  Adresse                                 \\
  \vfill
  \today
\end@{center@}
\vspace@{\stretch@{2@}@}
\end@{titlepage@}
@end example

Pour produire par contre une une page de titre standarde sans utiliser
l'environnement @code{titlepage}, utilisez la commande @code{\maketitle}
(@pxref{\maketitle}).


@node verbatim
@section @code{verbatim}

@EnvIndex{verbatim}
@cindex texte verbatim
@cindex simuler du texte tapuscrit
@cindex texte tapuscrit, simulation de
@cindex code source, composer du
@cindex programmes informatiques, composer du

Synopsis :

@example
\begin@{verbatim@}
@var{texte-litéral}
\end@{verbatim@}
@end example

L'environnement @code{verbatim} est un environnement qui fabrique des
paragraphes dans lequel @LaTeX{} produit exactement ce qui vous y tapez.
Par exemple au sein de @var{texte-litéral} le caractère @code{\} ne
commence pas de commande, il produit @samp{\} à l'impression, et les
retours chariot et les blancs sont pris littéralement. La sortie
apparaît dans une police genre tapuscrit (encore appelé « machine à
écrire ») à chasse fixe (@code{\tt}).

@example
\begin@{verbatim@}
Juron symbolique : %&$#?@!.
\end@{verbatim@}
@end example

La seule restriction sur @code{text-literale} est qu'il ne peut pas
inclure la chaîne @code{\end@{verbatim@}}.

@PkgIndex{cprotect}

Il est impossible d'utiliser l'environnement @code{verbatim} au sein
d'un argument de macro, par exemple dans l'argument passé à
@code{\section}. Ce n'est pas le même problème que celui des commandes
fragiles (@pxref{\protect}), mais c'est juste impossible parce que
l'environnement @code{verbatim} change le régime de catcode avant de
traiter son contenu, et le rétablit juste après, or au sein d'un argument
de macro le contenu de l'argument est déjà converti en une liste
d'unités lexicales selon le régime de catcode courant à l'appel de la
macro.  Cependant, le paquetage @package{cprotect} peut être utile dans
cette situation.

@PkgIndex{listings} @PkgIndex{minted}
Une utilisation courante d'entrée verbatim est de composer du code
informatique.  Il y a des paquetages qui améliorent l'environnement
@code{verbatim}.  Par exemple, une amélioration est de permettre
l'inclusion verbatim de fichiers externes, totalement ou en
partie. Parmi ces paquetages : @package{listings} et @package{minted}.

@PkgIndex{fancyvrb}
@PkgIndex{verbatimbox}
Un paquetage qui offre beaucoup plus d'options pour les environnements
verbatim est @package{fancyvrb}.  Un autre @package{verbatimbox}.

Pour une liste complète de tous les paquetages pertinents voir le CTAN (@pxref{CTAN}).

@menu
* \verb:: La forme macro de l'environnement @code{verbatim}.
@end menu

@node \verb
@subsection @code{\verb}

@findex \verb
@cindex texte verbatim, en-ligne

Synopsis :

@example
\verb@var{car}@var{texte-littéral}@var{car}
\verb*@var{car}@var{texte-littéral}@var{car}
@end example

La commande @code{\verb} compose @var{texte-littéral} comme il est
entré, en incluant les caractères spéciaux et les espaces, en utilisant
la police tapuscrit (@code{\tt}). Aucun espaces n'est autorisé entre
@code{\verb} ou @code{\verb*} et le délimiteur @var{car} qui marque le
début et la fin du texte verbatim. Le délimiteur ne doit pas apparaître
dans le @var{texte-littéral}.

@cindex espace visible
La forme étoilée (en @code{*}) diffère seulement en ce que les espaces
sont tapés avec un caractère « espace visible ».
@tex
(Nommément, {\tt\char`\ }).
@end tex

La sortie correspondant à ce qui suit utilise un espace visible de part
et d'autre du mot @samp{with} :

@example
Le premier argument de la commande est \verb*!filename with extension! et ...
@end example

@PkgIndex{url}
Pour composer des adresses réticulaires, appelée aussi URL, le paquetage
@package{url} est une option préférable à la commande @code{\verb}, puisque
il permet les sauts de ligne.

@PkgIndex{listings}
@PkgIndex{minted}
Pour du code informatique il y a beaucoup de paquetages plus avantageux
que @code{\verb}.  L'un est @package{listings}, un autre @package{minted}.

@PkgIndex{cprotect}
Vous ne pouvez pas utiliser @code{\verb} au sein d'un argument de macro,
par exemple dans l'argument passé à @code{\section}.  Ce n'est pas une
question que @code{\verb} serait fragile (@pxref{\protect}), mais c'est
juste impossible parce que la commande @code{\verb} change le régime de
catcode avant de lire son argument et le rétablit juste après, or au sein
d'un argument de macro le contenu de l'argument a déjà été converti en
une liste d'unités lexicales selon le régime de catcode courant l'appel
de la macro. Cependant, le paquetage @package{cprotect} peut être utile
dans cette situation.


@node verse
@section @code{verse}
@EnvIndex{verse}
@cindex poésie, un environnement pour la

Synopsis :

@example
\begin@{verse@}
  @var{line1} \\
  @var{line2} \\
...
\end@{verse@}
@end example

L'environnement @code{verse} est conçu pour la poésie.

Voici un vers tiré du @i{@identity{Cid}}  de Pierre Corneille :

@example
% dans le préambule :
\newcommand*\Role[1]@{\makebox[\linewidth][c]@{\textbf@{\textsc@{#1@}@}@}\\*@}   
...   
\begin@{verse@}
  ...

\Role@{Chimène@}
Va, je ne te hais point.\\
\Role@{Don Rodrigue@}
\phantom@{Va, je ne te hais point. @}Tu le dois.\\
\Role@{Chimène@}
\phantom@{Va, je ne te hais point. Tu le dois. @}Je ne puis.\\
   ...
\end@{verse@}
@end example

@findex \\ @r{(pour @code{verse})}
Séparez les lignes de chaque strophe avec @code{\\}, et utilisez une ou
plusieurs lignes vides pour séparer les strophes.

@example
\begin@{verse@}
\makebox[\linewidth][c]@{\textit@{De soy-même@} --- Clément Marot@}
  \\[1\baselineskip]
Plus ne suis ce que j'ai été     \\  
Et plus ne saurai jamais l'être  \\
Mon beau printemps et mon été    \\
Ont fait le saut par la fenêtre

Amour tu as été mon maître       \\
Je t'ai servi sur tous les dieux \\
Ah si je pouvais deux fois naître\\
Comme je te servirais mieux
\end@{verse@}
@end example

@noindent
En sortie, les marges sont renfoncées sur la gauche et la droite, les
paragraphes ne le sont pas, et le texte n'est pas justifié à droite.

@node Line breaking
@chapter Saut à la ligne
@cindex saut à la ligne
@cindex sauter à la ligne

La première chose que @LaTeX{} fait lorsqu'il traite du texte ordinaire
est de traduire votre fichier d'entrée en une séquence de glyphes et
d'espaces. Pour produire un document imprimé, cette séquence doit être
rompue en lignes (et ces lignes doivent être rompues en pages).

D'ordinaire @LaTeX{} effectue pour vous les sauts de ligne (et de page)
dans le corps du texte, mais dans certains environnements vous forcez
manuellement les sauts.

Un flux de production communément utilisé est d'obtenir une version
finale du contenu du document avant de faire une passe finale dessus et
de considérer le sauts de ligne (et de page). La plupart des gens ne
considèrent pas que @LaTeX{} est un traitement de texte parce qu'il
n'affiche pas instantanément la sortie. Toutefois, différer la sortie
encourage l'utilisateur à remettre jusqu'à la fin des ajustements de
format, et ainsi évite bien des va-et-vient sur des sauts susceptibles
de rechanger.

@noindent
Différer la sortie a d'autres avantages : cela permet de ne faire aucun
compromis sur la composition, ce qui assure que ce qu'on voit est
exactement ce qu'on obtient, et cela aide également les auteurs à se
concentrer soit sur écrire, soit sur se relire, plutôt que les distraire
en faisant les deux à la fois.


@menu
* \\:: Commencer une nouvelle ligne.
* \obeycr & \restorecr:: Faire que chaque ligne d'entrée commence une nouvelle ligne de sortie.
* \newline:: Sauter à la ligne
* \- (césure): \- (hyphenation). Insérer une césure explicite.
* \discretionary:: Contrôler explicitement le caractère de césure.
* \fussy & \sloppy:: Être plus ou moins exigeant sur le passage à la ligne.
* \hyphenation:: Dire à @LaTeX{} comment gérer la césure d'un mot.
* \linebreak & \nolinebreak:: Forcer & éviter les sauts à la ligne.
@end menu


@node \\
@section @code{\\}

@findex \\ @r{(force un saut de ligne)}
@cindex nouvelle ligne, commencer une
@cindex saut de ligne, forcer

Synopsis, l'un parmi :

@example
\\
\\[@var{espaceenplus}]
@end example

@noindent
ou l'un parmi :

@example
\\*
\\*[@var{espaceenplus}]
@end example

Finit la ligne courante.  L'argument optionnel @var{espaceenplus}
spécifie l'espace supplémentaire vertical à insérer avant la ligne
suivante. C'est une longueur élastique (@pxref{Lengths}) et elle peut
être négative. Le texte avant le saut est composé à sa longueur normale,
c.-à-d.@: qu'il n'est pas dilaté pour remplir la largeur de la
ligne. Cette commande est fragile (@pxref{\protect}).

@example
\title@{Mon histoire~: \\[7mm]
       un conte pathétique@}
@end example

@noindent
La forme étoilée, @code{\\*}, dit à @LaTeX{} de ne pas commencer une
nouvelle page entre les deux lignes, en émettant un @code{\nobreak}.

Les sauts de ligne explicites au sein du corps de texte sont inhabituels
en @LaTeX{}.  En particulier, ne commencez pas un nouveau paragraphe
avec @code{\\}, mais laissez une ligne à blanc pour le faire. De même,
on mettez pas une séquence de @code{\\} pour créer un espace vertical,
mais utilisez à la place @code{\vspace@{@var{longueur}@}},
@code{\leavevmode\vspace@{@var{longueur}@}}, ou
@code{\vspace*@{@var{longueur}@}} si on veut que l'espace ne soit pas
supprimé au sommet d'une nouvelle page (@pxref{\vspace}).

Cette commande est utilisée principalement en dehors du flux principal
de texte comme dans un environnement @code{tabular} ou @code{array} ou
dans un environnement d'équation.

La commande @code{\newline} est un synonyme de @code{\\}
(@pxref{\newline}) dans des circonstances ordinaires (un exemple
d'exception est la colonne de type @code{p@{...@}} dans un environnement
@code{tabular} ; @pxref{tabular}) .

@c credit: David Carlisle https://tex.stackexchange.com/a/82666
La commande @code{\\} est une macro, et sa définition change selon le
contexte, de sorte que sa définition diffère pour chaque cas selon qu'on
est dans du texte normal, ou dans un environnement @code{center}, ou
@code{flushleft}, ou @code{tabular}. Dans du texte normal quand elle
force un saut de ligne, elle est essentiellement un raccourci pour
@code{\newline}.  Elle ne termine ni le mode horizontal ni le
paragraphe, mais insère juste un ressort et une pénalité de sorte que
lorsque le paragraphe se termine un saut de ligne se produit à cet
@c xx TODO introduire le terme « ligne creuse ».
endroit, avec la ligne plus courte bourrée avec de l'espace blanc.

Vous obtenez l'erreur @samp{LaTeX Error: There's no line here to end} si
vous utilisez @code{\\} pour demander une nouvelle ligne, plutôt que
pour finir la ligne courante. Par exemple si vous avez
@code{\begin@{document@}\\} ou, plus vraisemblablement, quelque chose du
genre de :

@example
\begin@{center@}
  \begin@{minipage@}@{0.5\textwidth@}
  \\
  Dans cet espace vertical apposez votre marque.
  \end@{minipage@}
\end@{center@}
@end example

La solution est de remplacer la double controblique par quelque chose
du genre de @code{\vspace@{\baselineskip@}}.


@node \obeycr & \restorecr
@section @code{\obeycr} & @code{\restorecr}

@anchor{\obeycr}
@anchor{\restorecr}
@findex \obeycr
@findex \restorecr
@cindex saut de ligne, sortie semblable à l'entrée pour le

La commande @code{\obeycr} a pour effet qu'un retour chariot dans le
fichier d'entrée (@samp{^^M}, internement) soit traité de la même façon
que @code{\\} suivi d'un @code{\relax}. Ainsi chaque passage à la ligne
dans l'entrée est aussi un passage à la ligne dans la sortie.  La
commande @code{\restorecr} restaure le comportement normal vis à vis des
sauts de ligne.

Ceci n'est pas la façon d'afficher textuellement du texte ou du code
informatique.  Utilisez plutôt @code{verbatim} (@pxref{verbatim}).

Avec les réglages par défaut habituels de @LaTeX{}, l'exemple suivant :

@example
aaa
bbb

\obeycr
ccc
ddd
   eee

\restorecr
fff
ggg

hhh
iii
@end example

@noindent
produit en sortie quelque chose du genre de :

@example
  aaa bbb
  ccc
ddd
eee

fff ggg
  hhh iii
@end example

@noindent
où les renfoncements sont des renfoncements de paragraphes.


@node \newline
@section @code{\newline}

@findex \newline
@cindex nouvelle ligne, commencer une (mode paragraphe)
@cindex saut de ligne

Dans du texte ordinaire, cette commande termine une ligne d'une façon
qui ne la justifie pas à droite, de sorte que le texte précédent la fin
de ligne n'est pas étiré. c.-à-d.@: que, en mode paragraphe
(@pxref{Modes}), la commande @code{\newline} est équivalente à une
double-controblique (@pxref{\\}). Cette commande est fragile
(@pxref{\protect}).

Toutefois, les deux commandes diffèrent au sein d'un environnement
@code{tabular} ou @code{array}. Dans une colonne avec un spécificateur
produisant une boîte paragraphe, comme typiquement @code{p@{..@}},
@code{\newline} insère un saut de ligne au sein de la colonne, c.-à-d.@:
insère une fin de ligne à l'intérieur de la colonne, c.-à-d.@: qu'elle
ne rompt pas la ligne entière de tableau. Pour rompre la ligne entière
utilisez @code{\\} ou son équivalent @code{\tabularnewline}.

L'exemple suivant écrit @samp{Nom~:} et @samp{Adresse~:} comme deux
lignes au sein d'une seule cellule du tableau.

@example
\begin@{tabular@}@{p@{2.5cm@}@@@{\hspace@{5cm@}@}p@{2.5cm@}@}
  Nom~: \newline Adresse~: &Date~: \\ \hline
\end@{tabular@}
@end example

La @samp{Date~:} sera alignée sur la ligne de base de @samp{Nom~:}.

@node \- (hyphenation)
@section @code{\-} (césure à gré)
@findex \- @r{(césure)}
@cindex césure, forcer

La commande @code{\-} dit à @LaTeX{} qu'il peut faire une césure du mot
à cet endroit. Quand vous insérez des commandes @code{\-} dans un mot,
le mot ne pourra subir de césure qu'à ces endroits et non dans aucun des
autres points de césure que @LaTeX{} aurait pu choisir sinon.  Cette
commande est robuste (@pxref{\protect}).

@LaTeX{} est bon en ce qui concerne les césures, et il trouve la plupart
des points corrects de césure, tout en n'en utilisant presque jamais un
incorrect. La commande @code{\-} est utilisée pour les cas
exceptionnels.

Par ex., @LaTeX{} d'ordinaire ne fait pas de césure dans les mots
contenant un trait d'union. Ci-dessous le mot long et portant une césure
indique que @LaTeX{} doit insérer des espaces inacceptablement long pour
composer la colonne étroite :

@example
\begin@{tabular@}@{rp@{4.5cm@}@}
   Isaac Asimov &La tradition de
   l'anti-intellectualisme
   % l'an\-ti-in\-tel\-lec\-tu\-al\-isme
   a été une tendance constante, qui a fait son chemin dans notre vie
   politique et culturelle, nourrie par la fausse idée que la démocratie
   signifie que mon ignorance vaut autant que votre savoir.
\end@{tabular@}
@end example

@noindent
Si on met en commentaire la troisième ligne et sort de commentaire la
quatrième, alors les choses s'ajusteront bien mieux.

La commande @code{\-} ne fait qu'autoriser @LaTeX{} à faire une césure à
cet endroit, elle ne force pas la césure.  Vous pouvez forcer la césure
avec quelque chose du genre de @code{ef-\linebreak farons}.  Bien sûr,
si vous changez plus tard le texte, alors cette césure forcée pourrait
avoir l'air très étrange, c'est pourquoi cette approche demande de
l'attention.


@node \discretionary
@section @code{\discretionary} (point de césure généralisé)
@cindex césure discrétionnaire
@cindex césure à gré
@cindex à gré, césure
@cindex discrétionnaire, césure

Synopsis :

@example
\discretionary@{@var{avant-saut}@}@{@var{après-saut}@}@{@var{sans-saut}@}
@end example

Gère la modification d'un mot autour d'une césure. Cette commande est
d'un usage rare dans les documents @LaTeX{}.

Si un saut de ligne survient au point où @code{\discretionary} apparaît,
alors @TeX{} met @var{avant-saut} à la fin de la ligne courante et met
@var{après-saut} au début de la ligne suivante. S'il n'y a pas de saut à
cet endroit alors @TeX{} met @var{sans-saut}.

Dans le mot @samp{difficile} les trois lettres @code{ffi} forment une
ligature. @TeX{} peut néanmoins faire un saut entre les deux @samp{f}
avec ceci :

@example
di\discretionary@{f-@}@{fi@}@{ffi@}cile
@end example

Notez que l'utilisateur n'a pas à faire ceci. C'est typiquement géré
automatiquement par l'algorithme de césure de @TeX{}.

Les arguments de @code{\discretionary} ne peuvent contenir que des
caractères, des boîtes ou des crénages.

La commande @code{\discretionary} permet de contrôler
finement la césure dans les cas où ne suffisent ni le contrôle standard
de la césure fait l'algorithme de césure de @TeX{} et les règles de
césures données par les paquetages de gestion linguistiques, ni les
moyens de contrôle explicites offerts par les commandes
@code{\hyphenation} (@pxref{\hyphenation}) et @code{\-} (@pxref{\-
(hyphenation),\- (césure à gré)}).

L'usage typique de @code{\discretionary} est par exemple de contrôler la
césure au sein d'une formule mathématique en mode ligne (voir aussi
@ref{Math miscellany,Miscellanées mathématique (entrée \*)}). Ci-dessous
un exemple de contrôle de la césure au sein d'une adresse réticulaire,
où l'on autorise la césure sur les obliques mais en utilisant une
controblique violette en lieu de trait d'union :

@example
\documentclass@{article@}
\usepackage[T1]@{fontenc@}
\usepackage[utf8]@{inputenc@}
\usepackage@{xcolor@}
\usepackage@{hyperref@}
\usepackage@{french@}
\newcommand*\DiscrSlash@{\discretionary@{\mbox@{\textcolor
 @{purple@}@{\textbackslash@}@}@}@{/@}@{/@}@}
\begin@{document@}
Allez donc à \href@{http://une/tr\%c3\%A8s/tr\%c3\%A8s/longue%
  /mais/vraiment/tr\%c3\%A8s/longue/adresse/r\%C3\%A9ticulaire%
  /index.html@}@{http://une\DiscrSlash très\DiscrSlash très\DiscrSlash
  longue\DiscrSlash mais\DiscrSlash vraiment\DiscrSlash
  très\DiscrSlash longue\DiscrSlash adresse\DiscrSlash
  réticulaire\DiscrSlash index.html@}
\end@{document@}
@end example


@node \fussy & \sloppy
@section @code{\fussy} & @code{\sloppy}

@anchor{\fussy}
@anchor{\sloppy}
@findex \fussy
@findex \sloppy
@cindex sauts de ligne, changer

Ce sont des déclarations pour que @TeX{} fasse plus ou moins le difficile
à propos des sauts de ligne. Déclarer @code{\fussy} évite en général
trop d'espace entre les mots, au prix d'occasionnellement une boîte trop
pleine ((@samp{overfull \hbox})). Inversement @code{\sloppy} évite les
boîtes trop pleines mais en pâtissant d'un espacement inter-mot relâché.

Le réglage par défaut est @code{\fussy}.  Les sauts de ligne au sein
d'un paragraphe sont contrôlés par celle-là des deux déclarations qui
est en cours à la fin du paragraphe, c.-à-d.@: à la ligne à blanc, la
commande @code{\par} ou l'équation hors texte terminant ce
paragraphe. De sorte que pour affecter les sauts de ligne vous devez
inclure la matière qui termine le paragraphe dans la portée de la
commande.

@menu
* sloppypar::          Version environnement de la commande \sloppy.
@end menu


@node sloppypar
@subsection @code{sloppypar}
@EnvIndex{sloppypar}
@cindex @identity{sloppypar}, environnement

Synopsis :

@example
\begin@{sloppypar@}
  ... paragraphes ...
\end@{sloppypar@}
@end example

Compose les paragraphes avec @code{\sloppy} en vigueur (@pxref{\fussy &
\sloppy}).  Utilisez cela pour ajuster localement les sauts de ligne,
pour éviter les erreurs @samp{Overfull box} ou @samp{Underfull box}.

Voici un exemple simple :

@example
\begin@{sloppypar@}
   Son plan arrêté de la sorte pour la matinée, dès qu’elle eut déjeuné,
   elle prit \emph@{Udolphe@} et s’assit, décidée à rester toute à sa
   lecture jusqu’à ce que la pendule marquât une heure. Cependant, et
   sans que Catherine en fût importunée (l’habitude\ldots), des phrases
   sans suite fluaient de Mme Allen~: elle ne parlait jamais beaucoup,
   faute de penser, et, pour la même raison, n’était jamais complètement
   silencieuse. Qu’elle perdît son aiguille, cassât son fil, entendît le
   roulement d’une voiture, aperçût une petite tache sur sa robe, elle
   le disait, qu’il y eût là ou non quelqu’un pour la réplique.
\end@{sloppypar@}
@end example


@node \hyphenation
@section @code{\hyphenation}
@findex \hyphenation
@cindex césure, définir

Synopsis :

@example
\hyphenation@{@var{mot1} ...@}
@end example

La commande @code{\hyphenation} déclare les points de césure autorisés
au sein des mots donnés dans la liste. Les mots de cette liste sont
séparés par des espaces. Spécifiez les points de césure autorisés avec
le caractère tiret, @code{-}.

Utilisez des lettres en bas de casse.  @TeX{} ne fera de césure que si le
mot correspond exactement, aucune désinence n'est essayée. Des commandes
@code{\hyphenation} multiples s'accumulent.

@PkgIndex{babel}
@PkgIndex{polyglossia}
Les paquetages d'internationalisation du genre de @package{babel} ou
@package{polyglossia} chargent déjà les motifs de césure de la langue
courante, aussi on n'utilise la commande @code{\hyphenation} que pour
les mots qui n'y existent pas.

Voici un exemple :

@c cf. citations d' A. Finkelkraut
@example
\hyphenation@{rhi-no-fé-roce sex-cuse doc-tam-bule œdi-peux@}
@end example


@PkgIndex{fontenc}
Dans une langue s'écrivant avec des diacritiques, comme le français ou
le polonais, la césure ne fonctionne correctement avec le moteur
@command{pdflatex} qu'avec des codages modernes (@pxref{@TeX{}
engines}). Il faut donc charger @package{fontenc} avec un autre codage
qu'@code{OT1}, typiquement pour le français on utilise @code{T1}
(@pxref{fontenc package}).


@node \linebreak & \nolinebreak
@section @code{\linebreak} & @code{\nolinebreak}

@anchor{\linebreak}
@anchor{\nolinebreak}
@findex \linebreak
@findex \nolinebreak
@cindex sauts de ligne, forcer
@cindex sauts de ligne, empêcher

Synopsis, l'un parmi :

@example
\linebreak
\linebreak[@var{de-zéro-à-quatre}]
@end example

@noindent
ou l'un parmi :

@example
\nolinebreak
\nolinebreak[@var{de-zéro-à-quatre}]
@end example

Encourage (@code{\linebreak}) ou décourage (@code{\nolinebreak}) un saut
de ligne. L'argument optionnel @var{de-zéro-à-quatre} est un entier
compris entre 0 et 4 qui vous permet d'adoucir l'instruction. Le réglage
par défaut est 4, de sorte que sans l'argument optionnel respectivement
la commande force ou interdit le saut. Mais par exemple,
@code{\nolinebreak[1]} est une suggestion qu'il serait préférable de
faire le saut à un autre endroit. Plus le nombre est grand, et plus la
requête est insistante. Les deux commandes sont fragiles
(@pxref{\protect}).

Dans l'exemple suivant on dit à @LaTeX{} qu'un bon endroit ou faire un
saut de ligne est après le @code{\blablajuridique} :

@example
\blablajuridique@{@}\linebreak[2] Nous rappelons que le port de signes
ostentatoires d'appartenance à une communauté religieuse est interdit
parmi le personnel au contact du public.
@end example

Quand vous émettez un @code{\linebreak}, les espaces de la ligne sont
dilatés de sorte que le point du saut atteigne la marge de
droite. @xref{\\} et @ref{\newline}, pour ne pas dilater les espaces.


@node Page breaking
@chapter Saut de page
@cindex saut de page
@cindex pages, saut

@LaTeX{} commence de nouvelles pages de façon asynchrone, lorsque
suffisamment de matière a été accumulée pour remplir une
page. D'ordinaire ceci se produit automatiquement, mais parfois on peut
désirer influencer les sauts.

@menu
* \clearpage & \cleardoublepage:: Commence une nouvelle page de droite ; éjecte les flottants.
* \newpage:: Commence une nouvelle page.
* \enlargethispage:: Agrandit d'un peu la page courante.
* \pagebreak & \nopagebreak:: Forcer & éviter les sauts de page.
@end menu


@node \clearpage & \cleardoublepage
@section @code{\clearpage} & @code{\cleardoublepage}

@anchor{\clearpage}
@findex \clearpage
@cindex débourrer les flottants et commencer une page
@cindex commencer une nouvelle page et débourrer les flottants
@anchor{\cleardoublepage}
@findex \cleardoublepage
@cindex commencer une page de droite

Synopsis :

@example
\clearpage
@end example

@noindent
ou

@example
\cleardoublepage
@end example

Finit la page courante et envoie en sortie tous les flottants, tableaux
et figures (@pxref{Floats}). S'il y a trop de flottants pour tenir dans
la page, alors @LaTeX{} insère des pages supplémentaires contenant
seulement les flottants. Dans le cas d'une impression en style
@code{twoside}, @code{\cleardoublepage} fait aussi que la nouvelle page
de contenu soit une page de droite (numérotée impaire), en produisant si
nécessaire une page à blanc. La commande @code{\clearpage} est robuste
alors que @code{\cleardouble page} est fragile (@pxref{\protect}).

Les sauts de page de @LaTeX{} sont optimisés, aussi, d'ordinaire, vous
n'utilisez ces commandes que la touche finale à la dernière version d'un
document, ou au sein de commande.

@c credit: https://www.tex.ac.uk/FAQ-reallyblank.html
La commande @code{\cleardoublepage} insère une page à blanc, mais elle contient l'en-tête et le bas de page. Pour obtenir une page vraiment à blanc, utilisez cette commande :

@example
\let\origdoublepage\cleardoublepage
\newcommand@{\clearemptydoublepage@}@{%
  \clearpage
  @{\pagestyle@{empty@}\origdoublepage@}%
@}
@end example

@noindent
Si vous désirez que la commande standarde @code{\chapter} de @LaTeX{}
agisse ainsi, alors ajoutez la ligne
@code{\let\cleardoublepage\clearemptydoublepage}.

La commande @code{\newpage} (@pxref{\newpage}) finit également la page
en cours, mais sans débourrer les flottants pendants. Et, si @LaTeX{}
est en mode deux-colonnes alors @code{\newpage} finit la colonne
courante alors que @code{\clearpage} et @code{\cleardoublepage} finissent
la page courante.

@node \newpage
@section @code{\newpage}
@findex \newpage
@cindex nouvelle page, commencer
@cindex commencer une nouvelle page

Synopsis :

@example
\newpage
@end example

La commande @code{\newpage} finit la page courante. Cette commande est
robuste (@pxref{\protect}).

Les sauts de page de @LaTeX{} sont optimisés de sorte que d'ordinaire on
n'utilise cette commande dans le corps d'un document que pour les
finitions sur la version finale, ou à l'intérieur de commandes.

Alors que les commandes @code{\clearpage} et @code{\cleardoublepage}
finissent également la page courante, en plus de cela elles débourrent
les flottants pendants (@pxref{\clearpage & \cleardoublepage}).  Et, si
@LaTeX{} est en mode deux-colonnes alors @code{\clearpage} et
@code{\cleardoublepage} finissent las page courante en laissant
possiblement une colonne vide, alors que @code{\newpage} finit seulement
la colonne courante.

Contrairement à @code{\pagebreak} (@pxref{\pagebreak & \nopagebreak}),
la commande @code{\newpage} n'a pas pour effet que la nouvelle page
commence exactement là où la requête est faite.  Dans l'exemple suivant

@example
Four score and seven years ago our fathers brought forth on this
continent,
\newpage
\noindent a new nation, conceived in Liberty, and dedicated to the
proposition that all men are created equal.
@end example

@noindent
la nouvelle page commence après @samp{continent}, et la ligne où se
produit le saut n'est pas justifiée à droite.  De plus, @code{\newpage}
n'étire pas verticalement la page, contrairement à @code{\pagebreak}.


@node \enlargethispage
@section @code{\enlargethispage}
@findex \enlargethispage
@cindex agrandir la page courante

@code{\enlargethispage@{size@}}

@code{\enlargethispage*@{size@}}

Agrandit la @code{\textheight} de la page courante de la quantité
spécifiée ; par exemple @code{\enlargethispage@{\baselineskip@}} permet
d'avoir une ligne de plus.

La forme étoilée essaie de comprimer la matière sur la page autant que
possible. Ceci est normalement utilisé en même temps qu'un
@code{\pagebreak} explicite.


@node \pagebreak & \nopagebreak
@section @code{\pagebreak} & @code{\nopagebreak}

@anchor{\pagebreak}
@anchor{\nopagebreak}
@findex \pagebreak
@findex \nopagebreak
@cindex saut de page, forcer
@cindex saut de page, empêcher

Synopsis :

@example
\pagebreak[@var{priorité}]
\nopagebreak[@var{priorité}]
@end example

Par défaut, la commande @code{\pagebreak} (@code{\nopagebreak}) force
(empêche) un saut de page à la position courante. Avec
@code{\pagebreak}, l'espace verticale sur la page est dilatée où c'est
possible de sorte à s'étendre jusqu'à la marge inférieure normale.

Avec l'argument optionnel @var{priorité}, vous pouvez convertir la
commande @code{\pagebreak} d'une demande à une exigence. Le nombre doit
être compris entre 0 et 4. Plus grand est le nombre, et plus insistant
est l'exigence.


@node Footnotes
@chapter Notes en bas de page
@cindex note en bas de page, créer
@cindex bas de page, créer des notes

Mettez une note en bas de la page courante avec la commande
@code{\footnote}, comme ci-dessous.

@example
Noël Coward a dit plaisamment que lire une note en bas de page, c'est
comme devoir descendre répondre à la porte d'entrée alors qu'on est en
train de faire l'amour\footnote@{Je n'en sais rien, je ne lis pas les
notes en bas de page.@}
@end example

Vous pouvez placer beaucoup de notes en bas de page dans une page. Si le
texte devient trop long alors il est continué sur la page suivante.

Vous pouvez aussi produire des notes en bas de page en combinant les
commandes @code{\footnotemark} et @code{\footnotetext}, ce qui est
utiles dans des circonstances spéciales.

Pour faire que les références bibliographiques sortent comme des notes
en bas de page vous devez inclure un style bibliographique avec ce
comportement (@pxref{Using BibTeX}).

@menu
* \footnote:: Insérer une note en bas de page.
* \footnotemark:: Insérer la marque seulement d'une note en bas de page.
* \footnotetext:: Insérer le texte seulement d'une note en bas de page.
* Notes en bas de page dans les titres de rubriques: Footnotes in section headings.  Titre de chapitre ou de rubrique.
* Notes dans un tableau: Footnotes in a table. Notes de tableau.
* Footnotes of footnotes::   Classes multiples de notes en bas de page.  
* Paramètres des notes en bas de page: Footnote parameters. Les paramètres pour formater les notes en bas de page.
@end menu


@node \footnote
@section @code{\footnote}

@findex \footnote

Synopsis :

@example
\footnote[@var{numéro}]@{@var{texte}@}
@end example

Place en bas de la page courante une note @var{texte} numérotée.

@example
Il y a plus d'un millier de notes en bas de page dans \textit@{Histoire
Du Déclin Et De La Chute De L'empire Romain@}\footnote@{Après la lecture
d'une version préléminaire, David Hume s'est plaint, « On souffre d'un
fléau avec ces notes, selon la méthode actuelle d'imprimer le livre » et
il suggera qu'elles « ne soient seulement imprimée dans la marge ou en
bas de page »@} d'Édouard Gibbon.
@end example

L'argument optionnel @var{numéro} vous permet de spécifier le numéro de
la note. Le compteur @code{footnote} donnant le numéro de la note n'est
pas incrémenté si vous utilisez cette option, mais l'est dans le cas
contraire.

@cindex note en bas de page, symboles au lieu de numéros
@findex \fnsymbol@r{, et note en bas de page}
@findex \@@fnsymbol
Changez l'aspect que @LaTeX{} donne au compteur de note en bas de page
avec quelque chose du genre de
@code{\renewcommand@{\thefootnote@}@{\fnsymbol@{footnote@}@}}, ce qui
utilise une séquence de symboles (@pxref{\alph \Alph \arabic \roman
\Roman \fnsymbol}).  Pour rendre ce changement global mettez cela dans
le préambule.  Si vous faites ce changement local alors vous désirerez
sans doute réinitialiser le compteur avec
@code{\setcounter@{footnote@}@{0@}}.  Par défaut @LaTeX{} utilise des
nombres arabes.


@c - @node Symbolic footnotes
@c - @section Note en bas de page symboliques
@c -
@c - @cindex notes en bas de page, symboliques au lieu de numérotées
@c - Si vous voulez utiliser des symboles pour les notes en bas de page,
@c - plutôt que des numéros croissants, redéfinissez @code{\thefootnote}
@c - comme ceci :
@c -
@c - @example
@c - \renewcommand@{\thefootnote@}@{\fnsymbol@{footnote@}@}
@c - @end example
@c -
@c - @findex \fnsymbol@r{, et les notes en bas de page}
@c - @findex \@@fnsymbol
@c - La commande @code{\fnsymbol} produit une série prédéfinie de symboles
@c - (@pxref{\alph \Alph \arabic \roman \Roman \fnsymbol}). Si vous voulez
@c - utiliser un symbol différent comme marque de note en bas de page, il
@c - vous faut aussi redéfinir @code{\@@fnsymbol}.
@c - @c vincentb1: why ``also'' (aussi), isn't that sufficient to redefine \@fnsymbol ?

Le comportement par défaut de @LaTeX{} met beaucoup de restrictions sur
l'endroit où l'on peut utiliser une @code{\footnote} ; par exemple, vous
ne pouvez pas l'utiliser dans l'argument d'une commande de rubricage
telle que @code{\chapter} (elle ne peut être utilisée qu'en mode
paragraphe externe ; @pxref{Modes}).  Il y a des contournements ; voir
les rubriques suivantes.
@c xx mention packages that fix this

@cindex notes en bas de page, au sein d'une minipage
@cindex mpfootnote, compteur
Au sein d'un environnement @code{minipage} la commande @code{\footnote}
utilise le compteur @code{mpfootnote} au lieu de @code{footnote}, de
sorte que les notes sont numérotées indépendemment.  Elles apparaissent
au bas de l'environnement, et non au bas de la page.  Et par défaut
elles apparaissent alphabétiquement. @xref{minipage}.


@node \footnotemark
@section @code{\footnotemark}

@findex \footnotemark

Synopsis, l'un parmi :

@example
\footnotemark
\footnotemark[@var{numéro}]
@end example

Place dans le texte la marque de la note courante. Pour spécifier le
texte associé de la note voir @ref{\footnotetext}. L'argument optionnel
@var{numéro} a pour effet que la commande utilise ce numéro pour
déterminer la marque de note en bas de page. Cette commande peut être
utilisée en mode paragraphe interne (@pxref{Modes}).

Si vous utilisez @code{\footnotemark} sans l'argument optionnel alors
elle incrémente le compteur @code{footnote}, mais si vous utilisez
l'argument optionnel @var{numéro}, alors elle ne l'incrémente
pas. L'exemple suivant produit plusieurs marques de note en bas de page
faisant référence à la même note :

@example
Le premier théorème \footnote@{Dû à Gauss.@}
et le deuxième théorème\footnotemark[\value@{footnote@}]
ainis que le troisième théorème\footnotemark[\value@{footnote@}].
@end example

S'il y a d'autres notes entre celles-ci, alors vous devez mémoriser la
valeur du numéro de la marque commune. L'exemple suivant l'illustre :

@c xx aligner l'anglais
@example
\title@{Un traité sur le théorème du binôme@}
\newcounter@{sauvenumnote@}
...
\setcounter@{sauvenumnote@}@{\value@{footnote@}@}
\author@{J Moriarty\thanks@{University of Leeds@} 
  \and A C Doyle\thanks@{Durham University@} 
  \and S Holmes\footnotemark[\value@{sauvenumnote@}]@}
\begin@{document@}
\maketitle
@end example 


@node \footnotetext
@section @code{\footnotetext}
@findex \footnotetext

Synopsis, l'un des deux :

@example
\footnotetext@{@var{texte}@}
\footnotetext[@var{numéro}]@{@var{texte}@}
@end example

Place @var{texte} au bas de la page comme une note en bas de page. Cette
commande fait équipe avec @code{\footnotemark} (@pxref{\footnotemark})
et peut apparaître n'importe où après cette commande-là, mais doit
apparaître en mode paragraphe externe (@pxref{Modes}).  L'argument
optionnel @var{numéro} change le numéro de note affiché.

@xref{\footnotemark} et @ref{Footnotes in a table}, pour des exemples
d'utilisation.



@node Footnotes in section headings
@section Note en bas de page dont le renvoi est au sein d'un titre de rubrique

@cindex notes en bas de page, dans les titres de rubrique
@cindex table des matières, éviter les notes en bas de page
Mettre une note en bas de page depuis un titre de rubrique, comme dans :

@example
\section@{Les ensembles complets\protect\footnote@{Ce texte est dû à ...@}@}
@end example

@PkgIndex{footmisc}
@cindex @code{stable}, option du paquetage @package{footmisc}
@cindex option @code{stable} du paquetage @package{footmisc}
@noindent
a pour effet que la note en bas de page apparaît à la fois en bas de la
page où la rubrique commence, et de celle où son titre apparaît dans la
table des matières, ce qui vraisemblablement n'est pas voulu.  Pour
qu'elle n'apparaisse pas sur la table des matières utilisez le paquetage
@package{footmisc} avec l'option @code{stable}.

@example
\usepackage[stable]@{footmisc@}
 ..
\begin@{document@}
 ..
\section@{Les ensembles complets\footnote@{Ce texte est dû à R~Jones.@}@}
@end example

Notez que le @code{\protect} a disparu ; l'inclure aurait pour effet que
la note en bas de page apparaîtrait de nouveau dans la table des
matières.


@node Footnotes in a table
@section Notes en bas de page dans un tableau

@cindex Notes en bas de page, dans un tableau

Au sein d'un environnement @code{tabular} ou @code{array} la commande
@code{\footnote} ne fonctionne pas ; on obtient une marque de note dans
la cellule du tableau mais le texte de la note n'apparaît pas. La
solution est d'utiliser un environnement @code{minipage}, comme ci-après
(@pxref{minipage}).



@example
\begin@{center@}
  \begin@{minipage@}@{\textwidth@} \centering
     \begin@{tabular@}@{l|l@}
     \textsc@{Navire@}  &\textsc@{Roman@} \\ \hline
     \textit@{HMS Sophie@}     &Maître à bord  \\
     \textit@{HMS @identity{Polychrest}@} &Capitaine de vaisseau  \\
     \textit@{HMS @identity{Lively}@}     &Capitaine de vaisseau \\
     \textit@{HMS Surprise@}   &Plusieurs romans\footnote@{Le premier étant
                                \textit@{La Surprise@}.@}
     \end@{tabular@}
  \end@{minipage@}                              
\end@{center@}
@end example

Au sein d'une @code{minipage}, les marques de note sont des lettres en
bas de casse. On peut changer cela avec quelque chose du genre de
@code{\renewcommand@{\thempfootnote@}@{\arabic@{mpfootnote@}@}}
(@pxref{\alph \Alph \arabic \roman \Roman \fnsymbol}).

Les notes du premier exemple apparaissent en bas de la
@code{minipage}. Pour qu'elles apparaissent en bas de la page principale
et fassent partie de la séquence normales des notes en bas de page,
utilisez la pair @code{\footnotemark} et @code{\footnotetext} ainsi
qu'une instanciation de compteur.

@example
\newcounter@{sauvegardeLaValeurDeMpFootnote@}
\begin@{center@}
  \begin@{minipage@}@{\textwidth@}
    \setcounter@{sauvegardeLaValeurDeMpFootnote@}@{\value@{footnote@}@} \centering
     \begin@{tabular@}@{l|l@}
       \textsc@{Femme@}             &\textsc@{Relation@} \\ \hline 
       Mona                       &Liaison\footnotemark  \\ 
       Diana Villiers             &Épouse, à la fin\\  
       Christine Hatherleigh Wood &Fiancée\footnotemark 
     \end@{tabular@}
  \end@{minipage@}%  le signe pourcent permet de garder roches le texte de la note
  %  et la minipage
  \stepcounter@{sauvegardeLaValeurDeMpFootnote@}%
    \footnotetext[\value@{sauvegardeLaValeurDeMpFootnote@}]@{%
      Les circonstances de sa mort sont peu connues.@}%
  \stepcounter@{sauvegardeLaValeurDeMpFootnote@}%
    \footnotetext[\value@{sauvegardeLaValeurDeMpFootnote@}]@{%
      Leur relation n'aboutit pas dans le tome XXI.@}
\end@{center@}
@end example

@PkgIndex{tablefootnote}
Pour un environnement flottant @code{table} (@pxref{table}) utilisez le
paquetage @package{tablefootnote}.

@example
\usepackage@{tablefootnote@}  % dans le préambule
   ...
\begin@{table@}
  \centering
     \begin@{tabular@}@{l|l@}
     \textsc@{Date@}  &\textsc@{Campagne@} \\ \hline
     1862           &Fort Donelson \\
     1863           &Vicksburg     \\
     1865           &Armée de Virginie du Nord\tablefootnote@{Fin de la
                     guerre.@}
     \end@{tabular@}
    \caption@{Forces capturées par le général Grant@}
\end@{table@}
@end example

@noindent
La note apparaîtra en bas de la page et sera numérotée dans la même
séquence que les autres notes en bas de page.


@node Footnotes of footnotes
@section Notes en bas de page sur d'autres notes

@cindex note en bas de page portant sur une autre note
@cindex note en bas de page, récursivement

@PkgIndex{bigfoot}

En particulier dans les sciences humaines, les auteurs peuvent avoir
plusieurs classes de notes en bas de pages, y compris une note en bas de
page qui porte sur une autre note en bas de page.  Le paquetage
@package{bigfoot} étend le mécanisme de note en bas de page par défaut
de @LaTeX{} de bien des manières, y compris pour permettre de faire les
deux notes de l'exemple ci-dessous :

@example
\usepackage@{bigfoot@}              % dans le préambule
\DeclareNewFootnote@{Default@}
\DeclareNewFootnote@{from@}[alph]   % crée la classe \footnotefrom@{@}
 ...
Le troisième théorème est une réciproque partielle du second.\footnotefrom@{%
  Remarqué par Wilson.\footnote@{Deuxième édition seulement.@}@}
@end example


@node Footnote parameters
@section Paramètres des notes en bas de page
@cindex notes en bas de page, paramètres
@cindex paramètres, pour notes en bas de page

@ftable @code
@item \footnoterule
Produit le filet de séparation entre texte principal sur une page et les
notes en bas de cette page. Les dimensions par défaut : épaisseur (ou
largeur) @code{0.4pt}, et longueur @code{0.4\columnwidth} dans les
classes standard de document (à l'exception @code{slide}, où elle
n'apparaît pas).

@item \footnotesep
@anchor{footnote footnotesep}
@cindex étai
La hauteur de l'étai placé au début de la note en bas de page. Par
défaut, c'est réglé à l'étai normal pour des polices de taille
@code{\footnotesize} (@pxref{Font sizes}), donc il n'y a pas d'espace
supplémentaire entre les notes. Cela vaut @samp{6.65pt} pour des polices
à @samp{10pt}, @samp{7.7pt} pour @samp{11pt}, et @samp{8.4pt} pour
@samp{12pt}.

@end ftable


@node Definitions
@chapter Définitions
@cindex définitions

@LaTeX{} prend en charges la fabrication de nouvelles commandes de bien
des genres.

@c xx everything in this chapter needs exemples.
@c xx Add DeclareRobustCommand (see clsguide.pdf)

@menu
* \newcommand & \renewcommand:: (Re)définir une nouvelle commande.
* \providecommand::  Définir une commande, si le nom n'est pas utilisé.
* \makeatletter et \makeatother: \makeatletter & \makeatother. Change la catégorie du caractère arobe.
* \@@ifstar:: Définir vos propres commandes étoilées.
* \newcounter:: Définir un nouveau compteur.
* \newlength:: Définir une nouvelle longueur.
* \newsavebox:: Définir une nouvelle boîte.
* \newenvironment & \renewenvironment:: Définir un nouvel environnement.
* \newtheorem:: Définir un nouvel environnement de semblable à @code{theorem}.
* \newfont:: Définir un nouveau nom de police.
* \protect:: Utiliser des commandes fragiles.
* \ignorespaces & \ignorespacesafterend:: Supprimer des espaces superflus.
* xspace@comma{}, paquetage: xspace package. Espace après une macros, conditionnellement.
@end menu

@node \newcommand & \renewcommand
@section @code{\newcommand} & @code{\renewcommand}

@anchor{\newcommand}
@anchor{\renewcommand}
@findex \newcommand
@findex \renewcommand
@cindex commandes, en définir de nouvelles
@cindex commandes, redéfinir
@cindex définir une nouvelle commande
@cindex redéfinir une commande
@cindex nouvelle commandes, définir

Synopsis, l'un parmi (trois formes ordinaires, trois formes étoilées) :

@example
\newcommand@{\@var{cmd}@}@{@var{défn}@}
\newcommand@{\@var{cmd}@}[@var{nargs}]@{@var{défn}@}
\newcommand@{\@var{cmd}@}[@var{nargs}][@var{optargdéfaut}]@{@var{défn}@}
\newcommand*@{\@var{cmd}@}@{@var{défn}@}
\newcommand*@{\@var{cmd}@}[@var{nargs}]@{@var{défn}@}
\newcommand*@{\@var{cmd}@}[@var{nargs}][@var{optargdéfaut}]@{@var{défn}@}
@end example

@noindent
ou toutes les mêmes possibilités avec @code{\renewcommand} au lieu de
@code{\newcommand} :

@example
\renewcommand@{\@var{cmd}@}@{@var{défn}@}
\renewcommand@{\@var{cmd}@}[@var{nargs}]@{@var{défn}@}
\renewcommand@{\@var{cmd}@}[@var{nargs}][@var{optargdéfaut}]@{@var{défn}@}
\renewcommand*@{\@var{cmd}@}@{@var{défn}@}
\renewcommand*@{\@var{cmd}@}[@var{nargs}]@{@var{défn}@}
\renewcommand*@{\@var{cmd}@}[@var{nargs}][@var{optargdéfaut}]@{@var{défn}@}
@end example

Définit ou redéfinit une commande (voir aussi
@code{\DeclareRobustCommand} dans @ref{Class and package commands}).


@cindex forme en *, définir de nouvelles commandes
@cindex forme étoilée, définir de nouvelles commandes
@findex \long
La forme étoilée (en @code{*}) de ces commandes interdit que les
arguments contiennent une multiplicité de paragraphes de texte (la
commande n'est pas @code{\long}, dans la terminologie de
@value{PlainTeX}).  Avec la forme par défaut, il est possible qu'un
argument soit une multiplicité de paragraphes.

Description des paramètres (des exemples suivront) :

@table @var
@item cmd
Obligatoire ; @code{\@var{cmd}} est le nom de la commande. Il doit
commencer par une controblique, @code{\}, et ne doit pas commencer avec
la chaîne de 4 caractères @code{\end}. Pour @code{\newcommand}, il ne
doit pas être déjà défini et ne doit pas commencer avec @code{\end} ;
pour @code{\renewcommand}, il doit être déjà défini.

@item nargs
Optionnel ; un entier compris entre 1 et 9 spécifiant le nombre
d'arguments que la commande prend, y compris un éventuel argument
optionnel. Si cet argument n'est pas présent, alors la spécification par
défaut est que la commande ne prend aucun argument. Lorsque on redéfinit
une commande, la nouvelle version peut prendre un nombre différent
d'arguments par rapport à l'ancienne.

@item optargdéfaut
@cindex optionnels, arguments, définir et utiliser
@cindex arguments optionnels, définir et utiliser
Optionnel ; si cet argument est présent, alors le premier argument de la
commande @code{\@var{cmd}} en définition est optionnel, et sa valeur par
défaut est @var{optargdéfaut} (qui peut être une chaîne vide). Si cet
argument n'est pas présent, alors @code{\@var{cmd}} ne prend pas
d'argument optionnel.

C'est à dire que si @code{\@var{cmd}} est appelée avec à la suite un
argument entre crochets, comme dans @code{\@var{cmd}[@var{valopt}]},
alors au sein de @var{défn} le paramètre @code{#1} est réglé à
@var{valopt}. Par contre si @code{\@var{cmd}} est appelé sans crochet à
la suite, alors au sein de @var{défn} le paramètre @code{#1} est réglé à
@var{optargdéfaut}. Dans les deux cas, les arguments obligatoires
commencent par @code{#2}.

Omettre @code{[@var{optargdéfaut}]} d'une définition est très différent
de mettre des crochets vides, comme dans @code{[]}. Dans le premier cas
on dit que la commande ainsi définie ne prend pas d'argument optionnel,
de sorte que @code{#1} est le premier argument obligatoire (à supposer
que @math{@var{nargs} @geq{} 1}) ; dans le second cas on règle
l'argument optionnel @code{#1} à être une chaîne vide par défaut,
c.-à-d.@: si aucun argument optionnel n'est donné à l'appel.

De même, omettre @code{[@var{valopt}]} d'un appel est également très
différent que de donner des crochets vides, comme dans @code{[]}.  Dans
le premier cas on règle @code{#1} à la valeur de @var{valopt} (à
supposer que la commande a été définie pour prendre un argument
optionnel) ; alors que dans le second on règle @code{#1} à la chaîne
vide, comme on le ferait pour n'importe quelle autre valeur.

Si une commande n'est pas définie pour prendre un argument optionnel,
mais qu'elle est appelée avec un argument optionnel, les résultats sont
imprévisibles : il peut y avoir une erreur @LaTeX{}, une sortie
incorrectement composée, ou les deux.

@item défn
@cindex paramètres, substitution
Obligatoire ; le texte par lequel substituer chaque occurrence de
@code{\@var{cmd}}. Les paramètres @code{#1}, @code{#2}, @dots{},
@code{#@var{nargs}} sont remplacés par les valeurs fournies en appelant
la commande (ou par @var{optargdéfaut} dans le cas d'un argument
optionnel non spécifié dans l'appel, comme cela vient d'être expliqué).

@end table

@cindex blancs, après une séquence de contrôle
@TeX{} ignore les blancs dans le code source à la suite d'un mot de
contrôle (@pxref{Control sequences}), comme dans @samp{\cmd }. Si vous
désirez une espace réellement à cet endroit, une solution est de taper
@code{@{@}} après la commande (@samp{\cmd@{@} }), et une autre est
d'utiliser un espace de contrôle explicite (@samp{\cmd\ }).

Un exemple simple de définition d'une nouvelle commande :
@code{\newcommand@{\JM@}@{Jean Martin@}} a pour effet le remplacement de
@code{\JM} par le texte plus long de la définition.  La redéfinition
d'une commande existante est similaire :
@code{\renewcommand@{\symbolecqfd@}@{@{\small CQFD@}@}}.

Si vous utilisez @code{\newcommand} et que le nom de commande a déjà été
utilisé alors vous obtenez quelque chose du genre de @samp{LaTeX Error:
Command \fred already defined. Or name \end... illegal, see p.192 of the
manual}.  Si vous utilisez @code{\renewcommand} et que le nom de
commande n'a pas encore été utilisé alors vous obtenez quelque chose du
genre de @samp{LaTeX Error: \hank undefined}.

Dans l'exemple suivant la première définition crée une commande sans
argument, et la seconde, une commande avec un argument obligatoire :

@example
\newcommand@{\etudiant@}@{Melle~O'Leary@}
\newcommand@{\defref@}[1]@{Définition~\ref@{#1@}@}
@end example

@noindent
Utilisez la première commande comme dans @code{Je confie \etudiant@{@} à
vos bons soins}.  La seconde commande a un argument variable, de sorte
que @code{\defref@{def:base@}} se développe en
@code{Definition~\ref@{def:base@}}, ce qui en fin de compte se développera en
quelque chose du genre de @samp{Définition~3.14}.

Un exemple avec deux arguments obligatoires :
@code{\newcommand@{\nbym@}[2]@{$#1 \times #2$@}} est invoqué comme
@code{\nbym@{2@}@{k@}}.

Un exemple avec un argument optionnel :

@example
\newcommand@{\salutation@}[1][Madame, Monsieur]@{#1,@}
@end example

@noindent Alors, @code{\salutation} donne @samp{Madame, Monsieur,} alors
@code{\salutation[Cher Jean]} donne @samp{Cher Jean,}.  Et
@code{\salutation[]} donne @samp{,}.

Cet exemple a un argument optionnel et deux arguments obligatoires.

@example
\newcommand@{\avocats@}[3][cie]@{#2, #3, et~#1@}
J'emploie \avocats[Odette]@{Devoie@}@{Trichou@}.
@end example

@noindent
En sortie on a @samp{J'emploie Devoie, Trichou, et Odette}.  L'argument
optionnel, c.-à-d.@: @code{Odette}, est associé à @code{#1}, alors que
@code{Devoie} et @code{Trichou} le sont à @code{#2} et @code{#3}.  À
cause de l'argument optionnel, @code{\avocats@{Devoie@}@{Trichou@}}
donne en sortie @samp{J'emploie Devoie, Trichou, et cie}.

Les accolades autour de @var{défn} ne définissent pas un groupe,
c.-à-d.@: qu'elle ne délimitent pas la portée du résultat du
développement de @var{défn}.  Ainsi la définition
@code{\newcommand@{\nomnavire@}[1]@{\it #1@}} est problématique dans
cette phrase :

@example
Le \nomnavire@{Monitor@} rencontra le \nomnavire@{Merrimac@}.
@end example

@noindent
les mots @samp{rencontra le}, et le point, sont mis incorrectement en
italique. La solution est de mettre une paire supplémentaire d'accolades
au sein de la définition : @code{\newcommand@{\nomnavire@}[1]@{@{\it
#1@}@}}.

@menu
* Control sequences:: Séquence de contrôle, mot de contrôle et symbole de contrôle.
@end menu

@node Control sequences
@subsection Séquence de contrôle, mot de contrôle et symbole de contrôle

@cindex séquences de contrôle

En lisant l'entrée @TeX{} convertit le flux des caractères lus en une
séquence d'@dfn{unités lexicales}, encore appelées
@dfn{lexèmes}@footnote{En anglais c'est le terme jeton ---
@identity{token} --- qui est utilisé.}. Lorsque @TeX{} voit une
controblique @code{\}, il gère les caractères suivants d'une manière
spéciale de sorte à former une unité lexicale @dfn{séquence de
contrôle}.

Les séquences de contrôle peuvent être classées en deux catégories :

@itemize
@item
@cindex mot de contrôle, défini
Les @dfn{mots de contrôle}, quand la séquence de contrôle est formée à
partir d'une @code{\} suivie par au moins une lettre ASCII (@code{A-Z}
et @code{a-z}), suivie par au moins une non-lettre.

@item
@cindex symboles de contrôle, défini
Les @dfn{symboles de contrôle}, quand la séquence de contrôle est formée
à partir d'une @code{\} suivi d'un unique caractère non-lettre.
@end itemize

La séquence des caractères ainsi trouvés après le @code{\} est aussi
appelé le @dfn{nom de la séquence de contrôle}.

Les blancs suivant un mot de contrôle sont ignorés et ne produisent
aucun espace blanc en sortie (@pxref{\newcommand & \renewcommand} et
@ref{\(SPACE)}).

Étant donné que la commande @code{\relax} ne fait rien, l'exemple
suivant imprime simplement @samp{Bonjour !}@inlinefmt{tex, on a utilisé
des espaces visible @samp{@visiblespace{}} au lieu de
blancs}@inlinefmt{info, (si vous utilisez la visionneuse info
d'Emacs@comma{} activez le mode mineur @code{whitespace-mode} pour voir les
espaces de traîne)} :

@example
Bon\relax@visiblespace{}@visiblespace{}@visiblespace{}
@visiblespace{}@visiblespace{}@visiblespace{}jour !
@end example

@noindent
Ceci parce que les blancs suivant @code{\relax}, y compris le caractère
saut-de-ligne, sont ignorés, et que les blancs en début de ligne sont
aussi ignorés (@pxref{Leading blanks}).


@node \providecommand
@section @code{\providecommand}

@findex \providecommand
@cindex commandes, définir de nouvelles
@cindex définir une nouvelle commande
@cindex nouvelles commandes, définir

Synopsis, l'un parmi :

@example
\providecommand@{\@var{cmd}@}@{@var{défn}@}
\providecommand@{\@var{cmd}@}[@var{nargs}]@{@var{défn}@}
\providecommand@{\@var{cmd}@}[@var{nargs}][@var{optargdéfaut}]@{@var{défn}@}
\providecommand*@{\@var{cmd}@}@{@var{défn}@}
\providecommand*@{\@var{cmd}@}[@var{nargs}]@{@var{défn}@}
\providecommand*@{\@var{cmd}@}[@var{nargs}][@var{optargdéfaut}]@{@var{défn}@}
@end example

Définit une commande, du moment qu'aucune commande de même nom n'existe
déjà.  Si aucune commande de ce nom n'existe alors ceci a le même effet
que @code{\newcommand} (@pxref{\newcommand & \renewcommand}).  Si une
commande de ce nom existe déjà alors cette définition est sans
effet. Ceci est particulièrement utile dans tout fichier susceptible
d'être chargé plus d'une fois, tel qu'un fichier de style.
@xref{\newcommand & \renewcommand}, pour la description des arguments.

Dans l'exemple suivant :

@example
\providecommand@{\monaffiliation@}@{Saint Michael's College@}
\providecommand@{\monaffiliation@}@{Lycée Henri IV@}
Depuis \monaffiliation.
@end example

@noindent
on a en sortie @samp{Depuis Saint Michael's College}.  Contrairement à
@code{\newcommand}, l'utilisation répétée de @code{\providecommand} pour
(essayer de) définir @code{\monaffiliation} ne produit pas d'erreur.


@node \makeatletter & \makeatother
@section @code{\makeatletter} et @code{\makeatother}

@anchor{\makeatletter}
@anchor{\makeatother}
@findex \makeatother
@findex \makeatother

Synopsis :

@example
\makeatletter
  ... définition de commande comprenant @@ dans leur nom ..
\makeatother
@end example

Utilisez cette paire de commandes quand vous redéfinissez les commandes
@LaTeX{} dont le nom comprend un caractère arobe @samp{@code{@@}}.  La
déclaration @code{\makeatletter} a pour effet que le caractère arobe ait
le code de catégorie des lettres, c.-à-d.@: le code 11. La déclaration
@code{\makeatother} règle de code de catégorie de l'arobe au code 12, sa
valeur d'origine.

À mesure que chaque caractère est lu par @TeX{}, un code de catégorie
lui est assigné. On appelle aussi ce code
@cindex catcode
@cindex code de catégorie de caractère
@cindex catégorie, code de caractère
@dfn{catcode} pour faire court.  Par exemple, la controblique @code{\}
reçoit le catcode 0. Les noms de commande consistent en un caractère de
catégorie 0, d'ordinaire une controblique, suivi par des lettres,
c.-à-d.@: des caractères de catégorie 11  (à ceci près qu'une commande
peut également consister en un caractère de catégorie 0 suivi d'un
unique caractère qui n'est pas une lettre).

Le code source de @LaTeX{} suit la convention que certaines commandes
utilisent @code{@@} dans leur nom. Ces commandes sont principalement
destinées aux auteurs de paquetages ou de classes. Cette convention
empêche les auteurs qui sont juste utilisateurs d'un paquetage ou d'une
classe de remplacer accidentellement une telle commande par une commande
définie par eux, puisque par défaut l'arobe a le catcode 12 (other).

Utilisez la paire @code{\makeatletter} et @code{\makeatother} au sein
d'un fichier @file{.tex}, typiquement dans le préambule, quand vous
définissez ou redéfinissez des commandes dont le nom comprend @code{@@},
en entourant votre définition par elles.  Ne les utilisez pas au sein de
fichiers @file{.sty} ou @file{.cls} puisque les commandes
@code{\usepackage} et @code{\documentclass} font déjà le nécessaire pour
que l'arobe ait le catcode d'une lettre, à savoir 11.

@PkgIndex{macros2e}
Pour une liste complète des macros contenant une arobe dans leur nom,
voir le document @url{http://ctan.org/pkg/macros2e}.
@c xx pourquoi est-ce que ceci a été enlevé :
@c xx Ces macros sont surtout à l'intention des auteurs de classes et de
@c xx paquetages.

Dans l'exemple suivant une commande @code{\these@@nomuniversite} se
trouve dans le fichier de classe, et l'utilisateur veut changer sa
définition. Pour cela, il suffit d'insérer les trois lignes suivantes
dans le préambule, avant le @code{\begin@{document@}} :

@example
\makeatletter
\renewcommand@{\these@@nomuniversite@}@{Université Lyon III Jean Moulin@}
\makeatother
@end example


@node \@@ifstar
@section @code{\@@ifstar}

@findex \@@ifstar
@cindex commandes, variantes étoilées
@cindex étoilées, variantes de commandes

Synopsis :

@example
\newcommand@{\macmd@}@{\@@ifstar@{\macmd@@star@}@{\macmd@@nostar@}@}
\newcommand@{\macmd@@nostar@}[@var{nostar-nbre-args}]@{@var{nostar-corps}@}
\newcommand@{\macmd@@star@}[@var{star-nbre-args}]@{@var{star-corps}@}
@end example

@c Inpirée des trucs & astuces de Manuel Pégourié-Gonnard
@c (https://elzevir.fr/imj/latex/tips.html#stared)

Vous l'avez sans doute remarqué, beaucoup d'environnements ou commandes
standards de @LaTeX{} existent sous une variante avec le même nom mais
finissant avec le caractère étoile @code{*}, un astérisque. Par exemple
c'est le cas des environnements @code{table} et @code{table*}, et des
commandes @code{\section} et @code{\section*}.

Lorsque on définit un environnement, cela est facile puisque
@code{\newenvironment} et @code{\renewenvironment} autorisent que le nom
de l'environnement contienne un astérisque.  Il vous suffit donc
d'écrire @code{\newenvironment@{@var{monenv}@}} ou
@code{\newenvironment@{@var{monenv}*@}} et de continuer la définition
comme d'habitude.  Pour les commandes, c'est plus compliqué car l'étoile
n'étant pas une lettre ne peut pas faire partie du nom de la
commande. Comme dans le synopsis ci-dessus, on a donc une commande
utilisateur, donnée ci-dessus comme @code{\macmd}, qui doit être capable
de regarder si elle est ou non suivie d'une étoile. Par exemple,
@LaTeX{} n'a pas réellement une commande @code{\section*} ; au lieu de
cela la commande @code{\section} regarde ce qui la suit. Cette première
commande n'accepte d'argument, mais au lieu de cela se développe en
l'une de deux commandes qui elle accepte des arguments. Dans le synopsis
ces commandes sont @code{\macmd@@nostar} et @code{\macmd@@star}.  Elles
peuvent prendre le même nombre d'arguments ou un nombre différent, ou
pas d'argument du tout.  Comme d'habitude, dans un document @LaTeX{} une
commande utilisant l'arobe @code{@@} dans son nom doit être comprise au
sein d'un bloc @code{\makeatletter ... \makeatother}
(@pxref{\makeatletter & \makeatother}).

Dans cet exemple, on définit @code{\ciel} comme une commande avec un
argument obligatoire et admettant une variante étoilée @code{\ciel*}
également avec un argument obligatoire. Ainsi, @code{\ciel@{bleu@}}
composera « ciel bleu non étoilé » tandis que @code{\ciel*@{nocturne@}}
composera « ciel nocturne étoilé ».

@example
\makeatletter
\newcommand*\ciel@@starred[1]@{ciel #1 étoilé@}
\newcommand*\ciel@@unstarred[1]@{ciel #1 non étoilé@}
\newcommand\ciel@{\@@ifstar@{\ciel@@starred@}@{\ciel@@unstarred@}@}
\makeatother
@end example


Voici un autre exemple, où la variante étoilée prend un nombre
d'arguments différent de la non étoilée. Avec cette définition, la
célèbre réplique de l'agent 007 « @code{Mon nom est
\agentsecret*@{Bond@}, \agentsecret@{James@}@{Bond@}}. » est équivalente
à saisir les commandes « @code{Je m'appelle \textsc@{Bond@}, \textit@{James@}
textsc@{Bond@}.} »

@example
\makeatletter
\newcommand*\agentsecret@@starred[1]@{\textsc@{#1@}@}
\newcommand*\agentsecret@@unstarred[2]@{\textit@{#1@} \textsc@{#2@}@}
\newcommand\agentsecret@{\@@ifstar@{\agentsecret@@starred@}@{\agentsecret@@unstarred@}@}
\makeatother
@end example

Après le nom d'une commande, l'étoile est traitée d'une manière
similaire à un argument optionnel.  (Ceci est différent des noms
d'environnement, où l'étoile fait partie du nom lui-même, et peut donc
être à n'importe quelle position).  D'un point de vue purement technique
il est donc possible de mettre un nombre indéfini d'espaces entre la
commande et l'étoile. Ainsi @code{\agentsecret*@{Bond@}} et
@code{\agentsecret@w{ *}@{Bond@}} sont équivalents. Toutefois, la
pratique normale est de ne pas insérer de tels espaces.

@PkgIndex{suffix}
@PkgIndex{xparse}

Il y a deux manières pouvant être plus commodes d'accomplir la même
tâche que @code{\@@ifstar}.  Le paquetage @package{suffix} permet la
construction @code{\newcommand\macommande@{@var{variante-non-étoilée}@}}
suivie de
@code{\WithSuffix\newcommand\macommande*@{@var{variante-étoilée}@}}.  Et
@LaTeX{}3 a le paquetage @package{xparse} qui permet ce code.

@example
\NewDocumentCommand\toto@{s@}@{\IfBooleanTF#1
  @{@var{variante-étoilée}@}%
  @{@var{variante-non-étoilée}@}%
  @}
@end example

@node \newcounter
@section @code{\newcounter} : allouer un compteur
@findex \newcounter
@cindex compteurs, définir de nouveaux

Synopsis :

@example
\newcounter@{@var{nomcompteur}@}
\newcounter@{@var{nomcompteur}@}[@var{super}]
@end example

La commande @code{\newcounter} définit un nouveau compteur nommé @var{nomcompteur}.
Le nouveau compteur est initialisé à zéro.

Quand l'argument optionnel @code{[@var{super}]} est fourni, le compteur
@var{nomcompteur} est réinitialisé à chaque incrémentation du compteur
nommé @var{super}.

@xref{Counters}, pour plus d'information à propos des compteurs.


@node \newlength
@section @code{\newlength}
@findex \newlength
@cindex longueurs, allouer de nouvelles
@cindex longueurs élastiques, définir de nouvelles
@cindex élastiques, définir de nouvelles longueurs
@cindex pas, registre de, @value{PlainTeX}
@cindex ressort, registre de, @value{PlainTeX}

Synopsis :

@example
\newlength@{\@var{longueur}@}
@end example

Alloue un nouveau registre de longueur (@pxref{Lengths}). L'argument
obligatoire @code{\@var{longueur}} doit être une séquence de contrôle
(@pxref{Control sequences}), et donc commencer par une controblique
@code{\} dans les circonstances normales. Le nouveau registre détient
des longueurs (élastiques) telles que @code{72.27pt} ou @code{1in
plus.2in minus.1in} (un registre de longueur @LaTeX{} est ce que
@value{PlainTeX} appelle un registre @code{skip}, ou registre de
pas). Le registre est créé avec une valeur initiale de zéro. La séquence
de contrôle @code{\@var{longueur}} doit ne pas être déjà définie.

Voici une exemple :

@example
\newlength@{\graphichgt@}
@end example

Si vous oubliez la controblique alors vous obtenez l'erreur
@samp{Missing control sequence inserted}.  Si la séquence de contrôle
existe déjà alors vous obtenez quelque chose du genre de @samp{LaTeX
Error: Command \graphichgt already defined.  Or name \end... illegal,
see p.192 of the manual}.

@node \newsavebox
@section @code{\newsavebox} : allouer une boîte

@findex \newsavebox
@cindex boîte, allouer une nouvelle

Alloue un « baquet » pour détenir une boîte. Synopsis :

@example
\newsavebox@{\@var{cmd}@}
@end example

Définit @code{\@var{cmd}} pour se référer à un nouveau baquet pour stocker
des boîtes. Une telle boîte sert à détenir de la matière composée, pour
l'utiliser plusieurs fois (@pxref{Boxes}) ou pour le mesurer ou le
manipuler. Le nom @code{\@var{cmd}} doit commencer par une
controblique, et ne doit pas être déjà défini.

L'allocation d'une boîte est globale. Cette commande est fragile
(@pxref{\protect}).


@node \newenvironment & \renewenvironment
@section @code{\newenvironment} & @code{\renewenvironment}

@anchor{\newenvironment}
@anchor{\renewenvironment}
@findex \newenvironment
@findex \renewenvironment
@cindex environnements, définir
@cindex définir de nouveaux environnements
@cindex redéfinir des environnements

Ces commandes définissent ou redéfinissent un environnement @var{env},
c.-à-d., @code{\begin@{@var{env}@} @var{corps} \end@{@var{env}@}}.

Synopsis :

@example
  \newenvironment@{@var{env}@}[@var{nargs}][@var{argoptdéfaut}]@{@var{défdébut}@}@{@var{déffin}@}
  \newenvironment*@{@var{env}@}[@var{nargs}][@var{argoptdéfaut}]@{@var{défdébut}@}@{@var{déffin}@}
\renewenvironment@{@var{env}@}[@var{nargs}]@{@var{défdébut}@}@{@var{déffin}@}
\renewenvironment*@{@var{env}@}[@var{nargs}]@{@var{défdébut}@}@{@var{déffin}@}
@end example

@cindex forme étoilée des commandes d'environnement
@cindex forme en * des commandes d'environnement
La forme étoilée de ces commandes exige que les arguments (à ne pas
confondre avec le corps de l'environnement) ne contiennent pas de
paragraphes de texte.

@table @var
@item env
Obligatoire ; le nom de l'environnement. Il est constitué seulement de
lettres ou du caractère astérisque @code{*}, et donc ne commence pas par
une controblique @code{\}. Il ne doit pas commencer par la chaîne
@code{end}. Pour @code{\newenvironment}, @var{env} ne doit pas être le
nom d'un environnement déjà existant, et la commande @code{\@var{env}}
ne doit pas être définie. Pour @code{\renewenvironment}, @var{env} doit
être le nom d'un environnement déjà existant.

@item nargs
Optionnel ; un entier de 0 à 9 indiquant le nombre d'arguments que
l'environnement attend. Quand l'environnement est utilisé, ces arguments
apparaissent après le @code{\begin}, comme dans
@code{\begin@{@var{env}@}@{@var{arg1}@}@dots{}@{@var{argn}@}}.  Si cet
argument n'est pas présent, alors par défaut l'environnement n'attend pas
d'argument. Lorsqu'on redéfinit un environnement, la nouvelle version peut
prendre un nombre différent d'arguments que la précédente.

@item argoptdéfaut
Optionnel ; si cet argument est présent alors le premier argument de
l'environnement en définition est optionnel, et sa valeur par défaut est
@var{argoptdéfaut} (éventuellement une chaîne vide). Si cet argument
n'est pas présent alors l'environnement ne prend pas d'argument
optionnel.

c.-à-d.@: que si @code{[@var{argoptdéfaut}]} est présent dans la
définition de l'environnement alors vous pouvez commencer
l'environnement avec des crochets, comme dans
@code{\begin@{@var{env}@}[@var{valopt}]@{...@} ... \end@{@var{env}@}}.
Dans ce cas, au sein de @var{défdébut}, le paramètre @code{#1} est réglé
à la valeur de @var{valopt}. Si par contre @code{\begin@{@var{env}@}}
est appelé sans être suivi de crochet, alors, au sein de @var{défdébut},
le paramètre @code{#1} est réglé à la valeur par défaut
@var{optargdéfaut}.  Dans les deux cas, le premier paramètre
obligatoire, s'il en est, est @code{#2}.

Omettre @code{[@var{valopt}]} dans l'appel est différent d'avoir des
crochets sans contenu, comme dans @code{[]}. Dans le premier cas
@code{#1} se développe en @var{argoptdéfaut}, et dans le second en une
chaîne vide.

@item défdébut
Obligatoire ; le texte qui est développé à toute occurrence de
@code{\begin@{@var{env}@}} ; au sein de @var{défdébut}, le @var{n}ième
paramètre positionnel, (c.-à-d.@: @code{#@var{n}}), est remplacé au sein
de @var{défdébut} par le texte du @var{n}ième argument.

@item déffin
Obligatoire ; le texte développé à toute occurrence de
@code{\end@{@var{env}@}}. Il ne doit contenir aucun paramètre
positionnel, ainsi @code{#@var{n}} ne peut pas être utilisé ici (mais
voyez l'exemple final ci-après).

@end table

Tous les environnements, c'est à dire le code de @var{défdébut}, le
corps de l'environnement, et le code @var{déffin}, sont traités au sein
d'un groupe.  Ainsi, dans le premier exemple ci-dessous, l'effet de
@code{\small} est limité à la citation et ne s'étend pas à la matière qui
suit l'environnement.

Cet exemple dont un environnement semblable à @code{quotation} de
@LaTeX{} à ceci près qu'il sera composé dans une taille de police plus
petite :

@example
\newenvironment@{smallquote@}@{%
  \small\begin@{quotation@}
@}@{%
  \end@{quotation@}
@}
@end example

Celui-ci montre l'utilisation des arguments ; cela donne un environnement de
citation qui affiche l'auteur :

@example
\newenvironment@{citequote@}[1][Corneille]@{%
  \begin@{quotation@}
  \noindent\textit@{#1@}:
@}@{%
  \end@{quotation@}
@}
@end example

@noindent Le nom de l'auteur est optionnel, et vaut par défaut @samp{Corneille}.
Dans le document, utilisez l'environnement comme ceci :

@example
\begin@{citequote@}[Clovis, roi des Francs]
  ...
\end@{citequote@}
@end example

Ce dernier exemple montre comment sauvegarder la valeur d'un argument
pour l'utiliser dans @var{déffin}, dans ce cas dans une boîte
(@pxref{\sbox & \savebox}).

@example
\newsavebox@{\quoteauthor@}
\newenvironment@{citequote@}[1][Corneille]@{%
  \sbox\quoteauthor@{#1@}%
  \begin@{quotation@}
@}@{%
  \hspace@{1em plus 1fill@}---\usebox@{\quoteauthor@}
  \end@{quotation@}
@}
@end example


@node \newtheorem
@section @code{\newtheorem}
@findex \newtheorem
@cindex théorèmes, définition
@cindex définir de nouveaux théorèmes

@cindex théorème, environnement simili-
@cindex environnement simili-théorème

Synopsis :

@example
\newtheorem@{@var{nom}@}@{@var{titre}@}
\newtheorem@{@var{nom}@}@{@var{titre}@}[@var{numéroté_au_sein_de}]
\newtheorem@{@var{nom}@}[@var{numéroté_comme}]@{@var{titre}@}
@end example

Définit un nouvel @dfn{environnement simili-théorème}. Vous pouvez
spécifier l'un seul de @var{numéroté_au_sein_de} ou
@var{numéroté_comme}, ou ni l'un ni l'autre, mais non les deux à la
fois.

La première forme, @code{\newtheorem@{@var{nom}@}@{@var{titre}@}}, crée
un environnement qui sera étiqueté avec @var{titre} ; voir le premier
exemple ci-dessous.

La seconde forme,
@code{\newtheorem@{@var{nom}@}@{@var{titre}@}}[@var{numéroté_au_sein_de}],
crée un environnement dont le compteur est subordonné au compteur déjà
existant @var{numéroté_au_sein_de}, c.-à-d.@: qui est réinitialisé à
chaque réinitialisation de @var{numéroté_au_sein_de}. Voir le second
exemple ci-dessous.

La troisième forme
@code{\newtheorem@{@var{nom}@}[@var{numéroté_comme}]@{@var{titre}@}},
avec l'argument optionnel entre les deux arguments obligatoires, crée un
environnement dont le compteur partage le compteur déjà défini
@var{numéroté_comme}.  Voir le troisième exemple.

Cette déclaration est globale. Elle est fragile (@pxref{\protect}).

@c xx pourquoi a-t-on supprimé cette info, cf. rev 483.
@ignore
Cette commande crée un compteur nommé @var{name}.  De plus, à moins que
l'argument optionnel @var{numéroté_comme} soit utilisé, la valeur
courante de @code{\ref} est celle de
@code{\the@var{numéroté_au_sein_de}} (@pxref{\ref}).
@end ignore

Arguments :

@table @var
@item nom
Le nom de l'environnement. C'est une chaîne de lettres. Il ne doit pas
commencer avec une controblique (@samp{\}). Il ne doit pas être le nom
d'un environnement déjà existant ; en fait le nom de commande
@code{\@var{nom}} ne doit pas être déjà défini de quelque façon que ce
soit.

@item titre
Le texte imprimé au début de l'environnement, avant le numéro. Par
exemple, @samp{Théorème}.

@item numéroté_au_sein_de
Optionnel ; le nom d'un compteur déjà défini, d'ordinaire une unité
sectionnelle telle que @code{chapter} ou @code{section}. Lorsque le
compteur @var{numéroté_au_sein_de} est réinitialisé, alors le compteur
de l'environnement @var{nom} l'est aussi.

Si cet argument optionnel est omis alors la commande
@code{\the@var{nom}} est définie comme @code{\arabic@{@var{nom}@}}.

@item numéroté_comme
Optionnel ; le nom d'un environnement simili-théorème déjà défini. Le
nouvel environnement se numérote en séquence avec @var{numéroté_comme}.

@end table

En l'absence des arguments optionnels les environnements sont numérotés
en séquence. L'exemple suivant a une déclaration dans le préambule qui
résulte en @samp{Définition 1} et @samp{Définition 2} en
sortie.

@example
\newtheorem@{defn@}@{Définition@}
\begin@{document@}
\section@{...@}
\begin@{defn@}
  Première déf.
\end@{defn@}

\section@{...@}
\begin@{defn@}
  Seconde déf.
\end@{defn@}
@end example

L'exemple suivant reprend le même corps de document que l'exemple
précédent. Mais ici l'argument optionnel @var{numéroté_au_sein_de} de
@code{\newtheorem} est spécifié comme @code{section}, aussi la sortie
est du genre de @samp{Définition 1.1} et @samp{Définition 2.1}.

@example
\newtheorem@{defn@}@{Definition@}[section]
\begin@{document@}
\section@{...@}
\begin@{defn@}
  Première déf.
\end@{defn@}

\section@{...@}
\begin@{defn@}
  Seconde déf.
\end@{defn@}
@end example

Dans l'exemple suivant il y a deux déclarations dans le préambule, la
seconde desquelles appelle le nouvel environnement @code{thm} pour
utiliser le même compteur que @code{defn}.  Cela donne
@samp{Définition 1.1}, suivi de @samp{Théorème 2.1} et @samp{Définition 2.2}.

@example
\newtheorem@{defn@}@{Définition@}[section]
\newtheorem@{thm@}[defn]@{Théorème@}
\begin@{document@}
\section@{...@}
\begin@{defn@}
  Première déf.
\end@{defn@}

\section@{...@}
\begin@{thm@}
  Premier théorème
\end@{thm@}

\begin@{defn@}
  Seconde déf.
\end@{defn@}
\section@{...@}
@end example


@node \newfont
@section @code{\newfont}: définit une nouvelle police (obsolète)
@findex \newfont
@cindex polices, commandes pour déclarer de nouvelles
@cindex définir de nouvelles polices


@code{\newfont}, désormais obsolète, définit une commande qui commute la
police de caractère. Synopsis :

@example
\newfont@{\@var{cmd}@}@{@var{description_police}@}
@end example

Ceci définit une séquence de contrôle @code{\@var{cmd}} qui change la
police courante.  @LaTeX{} cherche sur votre système un fichier nommé
@file{@var{nompolice}.tfm}.  La séquence de contrôle ne doit pas être
déjà définie.  Elle doit commencer par une controblique (@samp{\}).



@findex .fd @r{fichier}
Cette commande est obsolète.  c'est une commande de bas niveau pour
mettre en place une police individuelle. De nos jours, les polices sont
pratiquement toujours définies en familles (ce qui vous permet, par
exemple, d'associer un gras et un romain) au travers de ce qu'il est
convenu de nommer le « Nouveau Plan de Sélection de Polices de
caractère », soit en utilisant des fichiers @file{.fd} ou à travers
l'utilisation d'un moteur qui sait accéder au système de polices de
caractère, tel que Xe@LaTeX{} (@pxref{@TeX{} engines,Les moteurs
@TeX{}}).
@c xx explain nfss somewhere


@cindex clause at, au sein d'une définition de police
@cindex taille de conception, au sein d'une définition de police
Mais puisque cela fait partie de @LaTeX{}, voici l'explication : le
paramètre @var{description_police} consiste en un @var{nompolice} et une
@dfn{clause at} optionnelle ; celle-ci peut avoir soit la forme @code{at
@var{dimen}} ou @code{scaled @var{facteur}}, où un @var{facteur} de
@samp{1000} signifie aucune dilatation/contraction.  Pour l'usage de
@LaTeX{}, tout ce que ceci fait est de dilater ou contracter le
caractère et les autres dimensions relatives à la taille de conception de
la police, ce qui est une valeur définie dans le fichier en @file{.tfm}.

Cet exemple définit deux polices équivalentes et compose quelques
caractères dans chacune d'elles :

@example
\newfont@{\testpoliceat@}@{cmb10 at 11pt@}
\newfont@{\testpolicedilatee@}@{cmb10 scaled 1100@}
\testpoliceat abc
\testpolicedilatee abc
@end example


@node \protect
@section @code{\protect}
@findex \protect

@cindex commandes fragiles
@cindex commandes robustes
@cindex fragile, commande
@cindex robuste, commande

Toutes les commandes de @LaTeX{} sont soit @dfn{fragiles} soit
@dfn{robustes}. Les notes en bas de page, les sauts de ligne, toute
commande prenant un argument optionnel, et bien d'autres, sont
fragiles. Une commande fragile peut se disloquer et causer une erreur
lorsque elle est utilisée au sein de l'argument de certaines
commandes. Pour empêcher la dislocation de ces commandes l'une des
solutions est de les précéder de la commande @code{\protect}.

Par exemple, lorsque @LaTeX{} exécute la commande
@code{\section@{@var{nom-rubrique}@}} il écrit le texte
@var{nom-rubrique} dans le fichier auxiliaire @file{.aux}, de sorte à
pouvoir le tirer de là pour l'utiliser dans d'autres parties du document
comme la table des matières. On appelle
@cindex arguments mouvants
@dfn{argument mouvant} tout argument qui est développé en interne par
@LaTeX{} sans être directement composé en sortie. Une commande est dite
fragile si elle se développe pendant ce processus en un code @TeX{} non
valide. Certains exemples d'arguments mouvants sont ceux qui apparaissent
au sein des commandes @code{\caption@{...@}} (@pxref{figure}), dans la
commande @code{\thanks@{...@}} (@pxref{\maketitle}), et dans les
expressions en @@ des environnements @code{tabular} et @code{array}
(@pxref{tabular}).

Si vous obtenez des erreurs étranges de commandes utilisées au sein
d'arguments mouvants, essayez des les précéder d'un @code{\protect}. Il
faut un @code{\protect} pour chacune des commandes fragiles.

Bien qu'en général la commande @code{\protect} ne fait pas de mal, les
commandes de gestion de longueurs sont robustes et ne devraient pas être
précédées d'une commande @code{\protect}. Une commande @code{\protect}
ne peut pas non plus être utilisée au sein de l'argument d'une commande
@ref{\addtocounter,@code{\addtocounter}} ou
@ref{\setcounter,@code{\setcounter}}.

Dans l'exemple qui suit la commande @code{\caption} produit une erreur
mystérieuse

@example
\begin@{figure@}
  ...
  \caption@{Company headquarters of A\raisebox@{1pt@}@{B@}\raisebox@{-1pt@}@{C@}@}
\end@{figure@}
@end example

Dans l'exemple suivant la commande @code{\tableofcontents} produit une
erreur à cause du @code{\(..\)} dans le titre de section qui se
développe en code  incorrect @TeX{} dans le fichier @file{.toc}.  Vous
pouvez résoudre ceci en remplaçant  @code{\(..\)}
par @code{\protect\(..\protect\)}.

@example
\begin@{document@}
\tableofcontents
...
\section@{Einstein's \( e=mc^2 \)@}
...
@end example


@node \ignorespaces & \ignorespacesafterend
@section @code{\ignorespaces & \ignorespacesafterend}

@anchor{\ignorespaces}
@anchor{\ignorespacesafterend}
@findex \ignorespaces
@findex \ignorespacesafterend
@cindex espaces, ignorer au voisinage d'une commande
@cindex commandes, ignorer les espaces

Synopsis :

@example
\ignorespaces
@end example

@noindent
ou

@example
\ignorespacesafterend
@end example

Les deux commandes ont pour effet que @LaTeX{} ignore l'espace blanc
après la commande et jusqu'à rencontrer une boîte ou un caractère non
blanc.  La première commande est une commande primitive de @TeX{}, et la
seconde est spécifique à @LaTeX{}.

La commande @code{\ignorespaces} est souvent utilisée quand on définit
des commandes au moyen de @code{\newcommand}, ou @code{\newenvironment},
ou @code{\def}. Ceci est illustré par l'exemple plus bas. Il permet à un
utilisateur d'afficher dans la marge combien de points rapporte chaque
questions d'un questionnaire, mais il est malcommode parce que, comme
illustré dans la liste @code{enumerate}, l'utilisateur ne doit pas
mettre d'espace entre la commande et le texte de la question.

@example
\newcommand@{\points@}[1]@{\makebox[0pt]@{\makebox[10em][l]@{#1~pts@}@}
\begin@{enumerate@}
  \item\points@{10@}aucun espace superflu inséré ici
  \item\points@{15@} ici un espace superflu entre le nombre et le mot « ici »
\end@{enumerate@}
@end example

@noindent
La solution est de modifier comme ci-dessous :

@example
\newcommand@{\points@}[1]@{%
  \makebox[0pt]@{\makebox[10em][l]@{#1~pts@}@}\ignorespaces@}
@end example

Dans le second exemple on illustre comment l'espace blanc est enlevé de
devant le texte. Les commandes ci-dessous permettent à utilisateur
d'attacher uniformément une civilité à un nom. Mais si, quand il est
donné, une civilité commence accidentellement par un espace alors
@code{\nomcomplet} le reproduira.

@example
\newcommand@{\honorific@}[1]@{\def\honorific@{#1@}@} % mémorise le titre
\newcommand@{\fullname@}[1]@{\honorific~#1@}   % met le titre devant le nom

\begin@{tabular@}@{|l|@}
\honorific@{M./Mme@}  \fullname@{Jean@} \\  % sans espace superflu
\honorific@{ M./Mme@} \fullname@{Jean@}     % espace superflu devant la civilité
\end@{tabular@}
@end example

@noindent
Pour réparer cela, modifier le en
@code{\newcommand@{\fullname@}[1]@{\ignorespaces\honorific~#1@}}.

Le @code{\ignorespaces} est aussi souvent utilisé dans un
@code{\newenvironment} à la fin de la clause @var{begin}, comme dans
@code{\begin@{newenvironment@}@{@var{env
name}@}@{... \ignorespaces@}@{...@}}.

Pour enlever l'espace blanc venant immédiatement après un environnement
utilisez @code{\ignorespacesafterend}.  Dans l'exemple ci-dessous on
affiche un espace vertical bien plus grand entre le premier et
le deuxième environnements qu'entre le deuxième et le troisième.

@example
\newenvironment@{eq@}@{\begin@{equation@}@}@{\end@{equation@}@}
\begin@{eq@}
e=mc^2
\end@{eq@}
\begin@{equation@}
F=ma
\end@{equation@}
\begin@{equation@}
E=IR
\end@{equation@}
@end example

On peut faire disparaître l'espace vertical en mettant un
caractère @code{%} de commentaire immédiatement après le
@code{\end@{eq@}}, mais cela est malcommode.  La solution est de
modifier en
@code{\newenvironment@{eq@}@{\begin@{equation@}@}@{\end@{equation@}\ignorespacesafterend@}}.


@node xspace package
@section xspace package

@findex \xspace
@PkgIndex{xspace}
@cindex espaces, ignorer autour des commandes
@cindex commandes, ignorer les espaces

Synopsis :

@example
\usepackage@{xspace@}
  ...
\newcommand@{...@}@{...\xspace@}
@end example

La macro @code{\xspace}, quand utilisée à la fin de la définition d'une
commande, ajoute une espace à moins que la commande soit suivie de
certains caractères de ponctuation.

Après la séquence de contrôle d'une commande qui est un mot de contrôle
(@pxref{Control sequences}, contrairement aux symboles de contrôle tels
que @code{\$}), @TeX{} avale les caractères blancs. Ainsi, dans la
première phrase ci-dessous, en sortie on a @samp{Provence} placé
parfaitement contre le point, sans espace entre les deux.

@example
\newcommand@{\PR@}@{Provence@}
Notre école est en \PR .
Les étés en \PR@{@} sont agréables.
@end example

Mais à cause de l'avalement, la seconde phrase a besoin de l'adjonction
d'accolades vides @code{@{@}}, sans quoi il n'y aurait pas d'espace
entre @samp{Provence} et @samp{sont}.  (Beaucoup d'auteurs utilisent
plutôt un @code{\ } pour cela.  @xref{\(SPACE)}.)

Le paquetage @package{xspace} fournit la commande @code{\xspace}.  Elle
sert à écrire des commandes conçues pour être utilisées essentiellement
dans du texte. Elle doit être placée à la toute fin de la définition de
ces commandes. Elle insère un espace après la commande à moins que ce qui
la suive immédiatement soit dans une liste d'exceptions.  Dans l'exemple
suivant, on peut se passer de l'adjonction d'accolades vides.

@example
\newcommand@{\PR@}@{Provence\xspace@}
Notre école est en \PR .
Les étés en \PR@{@} sont agréables.
@end example

La liste d'exceptions par défaut contient les caractères
@code{,.'/?;:!~-)}, ainsi que l'accolade ouvrante, la commande
controblique-espace discutée plus haut, et les commandes
@code{\footnote} ou @code{\footnotemark}.  On peut ajouter des éléments
à cette liste comme avec @code{\xspaceaddexceptions@{\manotebdpi
\manotebdpii@}} qui rajoute les séquences de contrôle @code{\manotebdpi}
et @code{\manotebdpii} à la liste, et retrancher un élément de la liste
comme avec @code{\xspaceremoveexception@{!@}}.

@c David Carlisle https://tex.stackexchange.com/a/86620/339
Comment : nombre d'experts préfèrent ne pas utiliser @code{\xspace}.  La
mettre dans une définition signifie que la commande sera en général
suivie du bon espacement. Mais il n'est pas aisé de prédire quand
ajouter les accolades vides @code{@{@}} parce que @code{\xspace} se sera
trompé, comme lorsque elle est suivie d'une autre commande, et donc
@code{\xspace} peut rendre l'édition d'une matière plus difficile et
plus faillible que de mettre systématiquement les accolades vides.


@node Counters
@chapter Compteurs
@cindex compteurs, une liste de
@cindex variables, une liste de

Tout ce que @LaTeX{} numérote pour vous a un compteur associé avec
soi. Le nom du compteur est le même que le nom de l'environnement ou de
la commande qui produit le numéro, sauf qu'il ne pas de @code{\}.
(@code{enumi}--@code{enumiv} sont utilisés pour les environnements
@code{enumerate} imbriqués). Ci-dessous se trouve une liste des
compteurs utilisée dans les classes standardes de documents @LaTeX{}
pour contrôler la numérotation.

@findex @identity{part}, compteur 
@findex @identity{chapter}, compteur 
@findex @identity{section}, compteur 
@findex @identity{subsection}, compteur 
@findex @identity{subsubsection}, compteur 
@findex @identity{paragraph}, compteur 
@findex @identity{subparagraph}, compteur 
@findex @identity{page}, compteur 
@findex @identity{equation}, compteur 
@findex @identity{figure}, compteur 
@findex @identity{table}, compteur 
@findex @identity{footnote}, compteur 
@findex @identity{mpfootnote}, compteur 
@findex @identity{enumi}, compteur 
@findex @identity{enumii}, compteur 
@findex @identity{enumiii}, compteur 
@findex @identity{enumiv}, compteur 
@example
part          paragraph    figure     enumi
chapter       subparagraph table      enumii
section       page         footnote   enumiii
subsection    equation     mpfootnote enumiv
subsubsection
@end example

@menu
* \alph \Alph \arabic \roman \Roman \fnsymbol:: Taper la valeur d'un compteur.
* \usecounter:: Utiliser un  compteur spécifié dans un environnement de liste.
* \value:: Utiliser la valeur d'un compteur dans une expression.
* \setcounter:: Régler la valeur d'un compteur.
* \addtocounter:: Ajouter une quantité à un compteur.
* \refstepcounter:: Ajouter au compteur, réinitialiser les compteurs subsidiaires.
* \stepcounter:: Ajouter au compteur, réinitialiser les compteurs subsidiaires.
* \day & \month & \year:: Valeur de date numériques.
@end menu


@node \alph \Alph \arabic \roman \Roman \fnsymbol
@section @code{\alph \Alph \arabic \roman \Roman \fnsymbol}: Taper des compteurs

Toutes ces commandes prennent un unique compteur en argument, par
exemple, @code{\alph@{enumi@}}.

@ftable @code
@item \alph
tape @var{compteur} en utilisant des lettres en bas de casse : `a', `b', @enddots{}

@item \Alph
Utilise des lettres capitales : `A', `B', @enddots{}

@item \arabic
Utilise des numéros en chiffres arabes : `1', `2', @enddots{}

@item \roman
Utilise des nombres romains en bas de casse : `i', `ii', @enddots{}

@item \Roman
Utilise des nombres romains en capitales : `I', `II', @enddots{}

@item \fnsymbol
Tape la valeur de @var{compteur} dans une séquence spécifique de neuf
symboles (utilisés par convention pour la numérotation des notes en bas
de page). La valeur de @var{compteur} doit être comprise entre 1
et 9 inclus.

Voici ces symboles :

@multitable  @columnfractions .33 .33 .33
@headitem Nom@tab Commande@tab@iftexthenelse{Symbole,Équivalent Unicode}
@item
astérisque@tab@code{\ast}@tab@BES{*,\ast}
@item
obèle@tab@code{\dagger}@tab@BES{†,\dagger}
@item
double-obèle@tab@code{\ddagger}@tab@BES{‡,\ddagger}
@item
marque-de-section@tab@code{\S}@tab@BES{§,\S}
@item
marque-de-paragraphe@tab@code{\P}@tab@BES{¶,\P}
@item
parallèle@tab@code{\parallel}@tab@BES{‖,\parallel}
@item
astérisque-double@tab@code{\ast\ast}@tab@BES{**,\ast\ast}
@item
obèle-double@tab@code{\dagger\dagger}@tab@BES{††,\dagger\dagger}
@item
double-obèle-double@tab@code{\ddagger\ddagger}@tab@BES{‡‡,\ddagger\ddagger}
@end multitable

@end ftable


@node \usecounter
@section @code{\usecounter@{@var{compteur}@}}
@findex \usecounter
@cindex article d'une liste, compteur spécifiant
@cindex articles numérotés, compteur spécifiant

Synopsis :

@example
\usecounter@{@var{compteur}@}
@end example

La commande @code{\usecounter} est utilisée dans le second argument de
l'environnement @code{list} pour spécifier le @var{compteur} à utiliser
pour numéroter les articles de la liste.


@node \value
@section @code{\value@{@var{compteur}@}}
@findex \value
@cindex compteurs, obtenir la valeur d'un

Synopsis :

@example
\value@{@var{compteur}@}
@end example

Cette commande se développe en la valeur de @var{compteur}. Elle est
souvent utilisé dans @code{\setcounter} ou @code{\addtocoutner}, mais
@code{\value} peut être utilisé partout là où @LaTeX{} attend un
nombre. Elle ne doit pas être précédée par @code{\protect}
(@pxref{\protect}).

La commande @code{\value} n'est pas utiliser pour composer la valeur du
compteur. @xref{\alph \Alph \arabic \roman \Roman \fnsymbol}.

Cet exemple produit en sortie @samp{Le compteur essai vaut 6. Le
compteur autre vaut 5}.

@example
\newcounter@{essai@} \setcounter@{essai@}@{5@}
\newcounter@{autre@} \setcounter@{autre@}@{\value@{essai@}@}
\addtocounter@{essai@}@{1@}

Le compteur essai vaut \arabic@{essai@}.
Le compteur autre vaut \arabic@{autre@}.
@end example

Cet exemple insère @code{\hspace@{4\parindent@}}.

@example
\setcounter@{moncptr@}@{3@} \addtocounter@{moncptr@}@{1@}
\hspace@{\value@{moncptr@}\parindent@}
@end example


@node \setcounter
@section @code{\setcounter@{@var{compteur}@}@{@var{value}@}}
@findex \setcounter
@cindex compteurs, réglage
@cindex réglage de compteurs

Synopsis :

@example
\setcounter@{@var{compteur}@}@{@var{value}@}
@end example

La commande @code{\setcounter} règle la valeur de @var{compteur} à
l'argument @var{value}.


@node \addtocounter
@section @code{\addtocounter@{@var{compteur}@}@{@var{valeur}@}}
@findex \addtocounter

La commande @code{\addtocounter} incrémente @var{compteur} de la
quantité spécifiée par l'argument @var{valeur}, qui peut être négatif.


@node \refstepcounter
@section @code{\refstepcounter@{@var{compteur}@}}
@findex \refstepcounter

La commande @code{\refstepcounter} fonctionne de la même façon que
@code{\stepcounter} @xref{\stepcounter}, à ceci près qu'elle définit
également la valeur courante de @code{\ref} comme le résultat de
@code{\thecounter}.


@node \stepcounter
@section @code{\stepcounter@{@var{compteur}@}}
@findex \stepcounter

La commande @code{\stepcounter} ajoute un à @var{compteur} et
réinitialise tous les compteurs subsidiaires.


@node \day & \month & \year
@section @code{\day} & @code{\month} & @code{\year}

@anchor{\day}
@anchor{\month}
@anchor{\year}
@findex \day
@findex \month
@findex \year

@LaTeX{} définit des compteurs pour @code{\day} le quantième du mois
(nominalement avec une valeur entre 1 et 31), @code{\month} pour le
mois de l'année (nominalement avec une valeur entre 1 et 12), et
@code{\year} pour l'année.  Quand @TeX{} démarre, ils sont mis à la
valeur courante du système sur lequel @TeX{} s'exécute.  En relation
avec ces compteurs, la commande @code{\today} produit une chaîne
représentant le jour courant (@pxref{\today}).

Ils ne sont pas remis à jour pendant que le traitement par @TeX{}
progresse, ainsi en principe ils pourraient être incorrect à la fin. De
plus, @TeX{} n'effectue aucun contrôle sanitaire :

@example
\day=-2 \month=13 \year=-4 \today
@end example

@noindent
ne produit ni erreur ni avertissement, et le résultat est en sortie
@samp{-2, -4} (la valeur de mois erronée ne produit rien en sortie).

@xref{Command line input}, pour forcer la date à une valeur donnée sur
la ligne de commande.

@node Lengths
@chapter Longueurs
@cindex longueurs, définir et utiliser

Une @dfn{longueur} est une mesure de distance. Beaucoup de commandes
@LaTeX{} prennent une longueur en argument.

@cindex rigides, longueurs
@cindex élastiques, longueurs
@cindex dimen @r{@value{PlainTeX}}
@cindex skip @r{@value{PlainTeX}}
@cindex glue @r{@value{PlainTeX}}
Il y a deux types de longueur.  Une @dfn{longueur rigide} telle que
@code{10pt} ne contient pas de composante en @code{plus} ou
@code{minus}.  (En @value{PlainTeX} on appelle cela une @dfn{dimen}).
Une @dfn{longueur élastique} (ce qu'en @value{PlainTeX} on appel un
@dfn{skip} ou une @dfn{glue}) telle que dans @code{1cm plus0.05cm
minus0.01cm} peut contenir l'un ou l'autre de ces composantes ou les
deux.  Dans cette longueur élastique, le @code{1cm} est la @dfn{longueur
naturelle} alors que les deux autres, les composantes en @code{plus} et
@code{minus}, permette à @TeX{} à dilater ou contracter la longueur pour
optimiser la disposition.

Les exemples qui suivent utilisent ces deux commandes.

@example
% Fait une barre noire de 10pt de haut et #1 de large
\newcommand@{\blackbar@}[1]@{\rule@{#1@}@{10pt@}@}

% Fait une boîte autour de #2 qui est #1 de large (sans la bordure)
\newcommand@{\showhbox@}[2]@{%
  \fboxsep=0pt\fbox@{\hbox to #1@{#2@}@}@}
@end example

@noindent
Cet exemple utilise ces commandes pour afficher une barre noire de
100 points de long entre @samp{XXX} et @samp{YYY}. Cette longueur est
rigide.

@example
XXX\showhbox@{100pt@}@{\blackbar@{100pt@}@}YYY
@end example

Quant au longueur élastiques, la contraction est le plus simple des
deux : avec @code{1cm minus 0.05cm}, la longueur naturelle est 1@dmn{cm}
mais @TeX{} peut la contracter jusqu'à 0,95@dmn{cm}.  @TeX{} refuse de
contracter plus que cela.  Ainsi, ci-dessous le premier @code{\showhbox}
fonctionne bien, un espace de 98 points étant produit entre les deux
barres.

@example
XXX\showhbox@{300pt@}@{%
  \blackbar@{101pt@}\hspace@{100pt minus 2pt@}\blackbar@{101pt@}@}YYY

XXX\showhbox@{300pt@}@{%
  \blackbar@{105pt@}\hspace@{100pt minus 1pt@}\blackbar@{105pt@}@}YYY
@end example

@noindent
Mais le second produit un avertissement du genre de @samp{Overfull
\hbox (1.0pt too wide) detected at line 17}.  En sortie le premier
@samp{Y} est écrasé par la fin de la barre noire, parce que la matière
contenue par la boîte est plus large que les 300@dmn{pt} alloués, et que
@TeX{} a refusé de contracter le total en deçà de 309 points.

Dilater est similaire à contracter, à ceci près que si @TeX{} doit
dilater plus que la quantité disponible, alors il le fait.  Ci-dessous
la première ligne fonctionne bien, et produit un espace de 110 points
entre les barres.

@example
XXX\showhbox@{300pt@}@{%
  \blackbar@{95pt@}\hspace@{100pt plus 10pt@}\blackbar@{95pt@}@}YYY

XXX\showhbox@{300pt@}@{%
  \blackbar@{95pt@}\hspace@{100pt plus 1pt@}\blackbar@{95pt@}@}YYY
@end example

@noindent
Dans la seconde ligne @TeX{} a besoin de dilater de 10 points alors que
seulement 1 point a été spécifié.  @TeX{} dilate l'espace jusqu'à la
longueur requise mais il produit un avertissement du genre de
@samp{Underfull \hbox (badness 10000) detected at line 22}.  (On ne
discute pas ici de ce que signifie « @identity{badness} »).

Il est possible de mettre à la fois de la dilatation et de la
contraction dans la même longueur, comme dans @code{1ex plus 0.05ex
minus 0.02ex}.

Si @TeX{} ajuste plus d'une longueur élastique alors il alloue la
dilatation ou la contraction proportionnellement.

@example
XXX\showhbox@{300pt@}@{%
  \blackbar@{100pt@}%  gauche
  \hspace@{0pt plus 50pt@}\blackbar@{80pt@}\hspace@{0pt plus 10pt@}%  milieu
  \blackbar@{100pt@}@}YYY  % droite
@end example

@noindent
Les barres de gauche et de droite prennent 100 points, de sorte que celle
du milieu a besoin également de 100. La barre du milieu fait 80 points
et donc les deux @code{\hspace} doivent se dilater de 20 points.
Comme les deux sont @code{plus 50pt} et @code{plus 10pt}, @TeX{} obtient
5/6 de la dilatation du premier espace et 1/6 du second.

La composante @code{plus} ou @code{minus} d'une longueur élastique peut
contenir un composante en @dfn{@identity{fill}}, comme dans @code{1in plus2fill}.
Cela donne à la longueur une dilatabilité ou contractibilité infinie de
sorte que @TeX{} puisse l'ajuster à n'importe quelle distance.  Dans
l'exemple suivant les deux figures sont également espacées
horizontalement sur la page.

@example
\begin@{minipage@}@{\linewidth@}
  \hspace@{0pt plus 1fill@}\includegraphics@{godel.png@}%
  \hspace@{0pt plus 1fill@}\includegraphics@{einstein.png@}%
  \hspace@{0pt plus 1fill@}
\end@{minipage@}
@end example

@TeX{} a trois niveaux d'infinité pour les composantes élastiques :
@code{fil}, @code{fill}, et @code{filll} dans l'ordre d'infinité
croissante. D'ordinaire les auteurs de documents n'utilisent que celle
du milieu (@pxref{\hfill} et @pxref{\vfill}).

Multiplier une longueur élastique par un nombre la transforme en une
longueur rigide, de sorte qu'après @code{\setlength@{\ylength@}@{2.5cm
plus 0.5cm@}} et @code{\setlength@{\zlength@}@{3\ylength@}} alors la
valeur de @code{\zlength} est @code{2.5cm}.


@menu
* Unités de longueur: Units of length. Les unités que @LaTeX{} connaît.
* \setlength:: Règle la valeur d'une longueur.
* \addtolength:: Ajoute une quantité à une longueur.
* \settodepth:: Assigne à une longueur la profondeur de quelque chose.
* \settoheight:: Assigne à une longueur la hauteur de quelque chose.
* \settowidth:: Assigne à une longueur la largeur de quelque chose.
* Expressions::         Calculer avec des longueurs et des entiers.
@c * Longueurs prédéfinies: Predefined lengths. Les longueurs qui sont, en quelque sorte, prédéfinies.
@end menu

@node Units of length
@section Unités de longueur

@cindex unités, de longueur

@TeX{} et @LaTeX{} connaissent ces unités aussi bien en mode
mathématique qu'en dehors de celui-ci.

@ftable @code
@item pt
@cindex point
@anchor{units of length pt}
Point (1/72,27)@dmn{pouce}.  La conversion (approximative) en unités
métriques est 1@dmn{point} = 0,35146@dmn{mm} = 0,035146@dmn{cm}.

@item pc
@cindex pica
@anchor{units of length pc}
Pica, 12@dmn{pt}

@item in
@cindex pouce (inch)
@anchor{units of length in}
Pouce, 72,27@dmn{pt}

@item  bp
@cindex big point
@cindex point PostScript
@anchor{units of length bp}
Big point, 1/72 pouce.  Cette longueur est la définition d'un point en
PostScript et dans beaucoup d'autres systèmes bureautiques d'éditique
(@identity{PAO}).

@item mm
@cindex millimètre
@anchor{units of length mm}
Millimètre, 2,845@dmn{pt}

@item cm
@cindex centimètre
@anchor{units of length cm}
Centimètre, 10@dmn{mm}

@item dd
@cindex point Didot
@anchor{units of length dd}
Point Didot, 1,07@dmn{pt}

@item cc
@cindex cicéro
@cindex douze
@anchor{units of length cc}
Cicéro, 12@dmn{dd}, encore appelé @dfn{douze}.

@item sp
@cindex point proportionné (scaled point)
@anchor{units of length sp}
Point proportionné, (1/65536)@dmn{pt}

@end ftable

Trois autres unités sont définies en fonction de la fonte courante,
plutôt que comme des dimensions absolues.

@ftable @code
@item ex
@cindex x, hauteur d'un
@cindex ex
@anchor{Lengths/ex}
@anchor{units of length ex}
La hauteur @dfn{ex} d'un x de la fonte courante , traditionnellement la
hauteur de la lettre x en bas de casse, est souvent utilisée pour les
longueurs verticales.

@item em
@cindex cadratin
@cindex m, largeur d'un
@cindex em
@anchor{Lengths/em}
@anchor{units of length em}

De même le @dfn{em}, traditionnellement la largeur de la lettre M
capitale, est souvent utilisée pour les longueurs horizontales. C'est
également souvent la taille de la fonte en cours, par exemple une fonte
nominalement en 10@dmn{pt} a 1@dmn{em} = 10@dmn{pt}. @LaTeX{} a
plusieurs commandes pour produire de l'espace horizontal basé sur le em
(@pxref{\enspace & \quad & \qquad}).

@item mu
@cindex mu, unité mathématique
@anchor{unit of length mu}
Finalement, en mode mathématique, beaucoup de définitions sont exprimées dans
l'unité mathématique @dfn{mu} donnée par 1@dmn{em} = 18@dmn{mu}, où le
em est pris de la famille courante des symboles mathématiques.
@xref{Spacing in math mode}.

@end ftable

 L'utilisation de ces unités peut aider améliorer le fonctionnement
d'une définition lors des changements de fonte. Par exemple, il est plus
probable qu'une définition de l'espace verticale entre les articles
d'une liste donnée comme @code{\setlength@{\itemsep@}@{1ex plus 0.05ex
minus 0.01ex@}} reste raisonnable si la fonte est changée que si elle
était exprimée en points.

@node \setlength
@section @code{\setlength}
@findex \setlength
@cindex longueur, régler une

Synopsis :

@example
\setlength@{\@var{longueur}@}@{@var{quantité}@}
@end example

La commande @code{\setlength} règle la longueur \@var{longueur} à
@var{quantité}. Le nom @code{\@var{longueur}} doit être une séquence de
contrôle (@pxref{Control sequences}), et donc commencer par une
controblique @code{\} dans les circonstances normales. La
@var{quantité} peut être une longueur élastique (@pxref{Lengths}). Elle
peut être positive, négative ou nulle, et peut être exprimée dans
n'importe quelle unité comprise par @LaTeX{} (@pxref{Units of length}).

Ci-dessous, avec les réglages par défaut de @LaTeX{} le premier
paragraphe est renfoncé alors que le second ne l'est pas.

@example
J'ai dit au docteur que je m'étais cassé la jambe à deux endroits.

\setlength@{\parindent@}@{0em@}
Il me répondit d'arrêter d'aller à ces endroits.
@end example

Si vous n'avez pas déclaré \@var{longueur} avec @code{\newlength}, par
exemple si vous faites une faute de frappe dessus comme dans
@code{\newlength@{\specparindent@}\setlength@{\sepcparindent@}@{...@}},
alors vous obtiendrez une erreur du genre de @samp{Undefined control
sequence. <argument> \sepcindent}.  Si vous oubliez la controblique au
début du nom de la longueur alors vous obtiendrez une erreur du genre de
@samp{Missing number, treated as zero.}.

@node \addtolength
@section @code{\addtolength}
@findex \addtolength
@cindex longueur, ajouter à une

Synopsis :

@example
\addtolength@{\@var{longueur}@}@{@var{quantité}@}
@end example

Incrémente la longueur @code{\@var{longueur}} par @var{quantité}. Le nom
@code{\@var{longueur}} doit être une séquence de contrôle
(@pxref{Control sequences}), et donc commencer par une controblique
@code{\} dans les circonstances normales. La @var{quantité} peut être
une longueur élastique (@pxref{Lengths}). Elle peut être positive,
négative ou nulle, et peut être exprimée dans n'importe quelle unité
comprise par @LaTeX{} (@pxref{Units of length}).

Dans l'exemple ci-dessous, si @code{\parskip} commence avec la valeur
@code{0pt plus 1pt}

@example
Docteur : comment va le garçon qui a avalé une monnaie en argent ?
\addtolength@{\parskip@}@{1pt@}

Infirmière : aucun changement.
@end example

@noindent
alors il a la valeur @code{1pt plus 1pt} pour le second paragraphe.

Si vous n'avez pas déclaré la longueur \@var{longueur} avec
@code{\newlength}, par exemple si vous faites une faute de frappe dessus
comme dans
@code{\newlength@{\specparindent@}\addtolength@{\sepcparindent@}@{...@}},
alors vous obtiendrez une erreur du genre de @samp{Undefined control
sequence. <argument> \sepcindent}. Si c'est la @var{quantité} qui
utilise une longueur qui n'a pas été déclarée, par exemple si vous
faites la faute de frappe comme cela
@code{\addtolength@{\specparindent@}@{0.6\praindent@}}, alors vous
obtenez une erreur du genre de @samp{Undefined control
sequence. <argument> \praindent}.  Si vous oubliez la controblique au
début du nom de la longueur, comme dans
@code{\addtolength@{parindent@}@{1pt@}}, alors vous obtiendrez
quelque chose du genre de @samp{You can't use `the letter p' after
\advance}.

@node \settodepth
@section @code{\settodepth}
@findex \settodepth

Synopsis :

@example
\settodepth@{\@var{longueur}@}@{@var{texte}@}
@end example

La commande @code{\settodepth} règle la longueur @code{\@var{longueur}}
à la profondeur de la boîte que @LaTeX{} obtient en composant l'argument
@code{texte}. Le nom @code{\@var{longueur}} doit être une séquence de
contrôle (@pxref{Control sequences}), et donc commencer par une
controblique @code{\} dans les circonstances normales.

L'exemple ci-dessous imprime la profondeur maximale des descendantes de
l'alphabet :

@example
\newlength@{\alphabetdepth@}
\settodepth@{\alphabetdepth@}@{abcdefghijklmnopqrstuvwxyz@}
\the\alphabetdepth
@end example

Si vous n'avez pas déclaré la longueur \@var{longueur} avec
@code{\newlength}, par exemple si vous faites une faute de frappe dans
l'exemple ci-dessus comme dans
@code{\settodepth@{\aplhabetdepth@}@{abc...@}}, alors vous obtiendrez
quelque chose du genre de @samp{Undefined control sequence. <argument>
\aplhabetdepth}.  Si vous oubliez la controblique au début du nom de la
longueur, comme dans @code{\settodepth@{alphabetdepth@}@{...@}} alors
vous obtiendrez quelque chose du genre de @samp{Missing number, treated
as zero. <to be read again> \setbox}.

@node \settoheight
@section @code{\settoheight}
@findex \settoheight

Synopsis :

@example
\settoheight@{\@var{longueur}@}@{@var{texte}@}
@end example

La commande @code{\settoheight} règle la longueur @code{\@var{longueur}}
à la hauteur de la boîte que @LaTeX{} obtient en composant l'argument
@code{texte}. Le nom @code{\@var{longueur}} doit être une séquence de
contrôle (@pxref{Control sequences}), et donc commencer par une
controblique @code{\} dans les circonstances normales.

L'exemple suivant imprime la hauteur maximale des ascendantes de
l'alphabet ASCII bas de casse :

@example
\newlength@{\alphabetheight@}
\settoheight@{\alphabetheight@}@{abcdefghijklmnopqrstuvwxyz@}
\the\alphabetheight
@end example

Si vous n'avez pas déclaré la longueur \@var{longueur} avec
@code{\newlength}, par exemple si vous faites une faute de frappe dans
l'exemple ci-dessus comme dans
@code{\settoheight@{\aplhabetheight@}@{abc...@}}, alors vous obtiendrez
quelque chose du genre de @samp{Undefined control sequence. <argument>
\aplhabetdepth}.  Si vous oubliez la controblique au début de
\@var{longueur}, comme dans @code{\settoheight@{alphabetheight@}@{...@}}
alors vous obtiendrez quelque chose du genre de @samp{Missing number,
treated as zero. <to be read again> \setbox}.


@node \settowidth
@section @code{\settowidth}
@findex \settowidth

Synopsis :

@example
\settowidth@{\@var{longueur}@}@{@var{texte}@}
@end example


La commande @code{\settowidth} règle la longueur @code{\@var{longueur}}
à la largeur de la boîte que @LaTeX{} obtient en composant l'argument
@code{texte}. Le nom @code{\@var{longueur}} doit être une séquence de
contrôle (@pxref{Control sequences}), et donc commencer par une
controblique @code{\} dans les circonstances normales.

L'exemple suivant imprime la largeur de l'alphabet ASCII bas de casse :

@example
\newlength@{\alphabetwidth@}
\settowidth@{\alphabetwidth@}@{abcdefghijklmnopqrstuvwxyz@}
\the\alphabetwidth
@end example

Si vous n'avez pas déclaré la longueur \@var{longueur} avec
@code{\newlength}, par exemple si vous faites une faute de frappe dans
l'exemple ci-dessus comme dans
@code{\settowidth@{\aplhabetwidth@}@{abc...@}}, alors vous obtiendrez
quelque chose du genre de @samp{Undefined control sequence. <argument>
\aplhabetwidth}.  Si vous oubliez la controblique au début de
\@var{longueur}, comme dans @code{\settowidth@{alphabetwidth@}@{...@}}
alors vous obtiendrez quelque chose du genre de @samp{Missing number,
treated as zero. <to be read again> \setbox}.

@node Expressions
@section Expressions

@findex expressions

@c Much from Joseph Wright's https://tex.stackexchange.com/a/245663/339
Synopsis, l'un parmi :

@example
\numexpr @var{expression}
\dimexpr @var{expression}
\glueexpr @var{expression}
\muglue @var{expression}
@end example

En tout lieu où vous pourriez écrire un entier, une dimen, une muglue ou
une glue de @TeX{}, vous pouvez à la place écrire une expression pour
écrire ce genre de quantité.

Un exemple est que @code{\the\dimexpr\linewidth-4pt\relax} produit en
sortie la longueur égale à quatre points de moins que la largeur de la
ligne (le seul usage de @code{\the} est d'afficher le résultat dans le
document).  De même, @code{\romannumeral\numexpr6+3\relax} produit
@samp{ix}, et @code{\the\glueexpr 5pt plus 1pt * 2 \relax} produit
@samp{10.0pt plus 2.0pt}.

Une commodité ici par rapport à effectuer les calculs en allouant des
registres et en utilisant @code{\advance}, etc., est que l'évaluation
d'expression n'implique par d'affectations et peut donc être effectuée à
des endroits où les affectations ne sont pas autorisées. L'exemple suivant
calcule la largeur de la @code{\parbox}.

@example
\newlength@{\offset@}\setlength@{\offset@}@{2em@}
\begin@{center@}
\parbox@{\dimexpr\linewidth-\offset*3@}@{Sans animosité envers
quiconque, charitables envers tous, et sûrs de notre droit en tant que
Dieu nous en accorde conscience, mettons-nous à l'œuvre afin d'achever
la tâche qui nous occupe, de panser les blessures de notre nation, de
porter soin à l'homme qui a affronté le combat et soulagement à sa veuve
et à son orphelin, enfin de faire tout pour réaliser et honorer une paix
juste et durable entre nous et avec toutes les nations.  --- Abraham
Lincoln, second discours d'investiture, inscrit dans le mémorial
Lincoln@}
\end@{center@}
@end example

L'@var{expression} consiste en un ou plusieurs termes du même type
(entier, dimension, etc.) qui sont ajoutés ou soustraits.  Un terme est
un type de nombre, dimension, etc., et consiste en un facteur de ce
type, optionnellement multiplié ou divisé par des facteurs.  Un facteur
d'un type est soit une quantité de ce type ou une sous-expression
parenthésés.  L'expression produit un résultat du type donné, de sorte
que @code{\numexpr} produit un entier, @code{\dimexpr} produit une
dimension dimension, etc.

Dans l'exemple de citation donné plus haut, changer l'expression en
@code{\dimexpr\linewidth-3*\offset} produit l'erreur @code{Illegal unit
of measure (pt inserted)}. La raison en est que pour @code{\dimexpr} et
@code{\glueexpr}, l'entrée consiste en une valeur de dimension ou de
glue suivie par un facteur multiplicatif optionnel, et non
l'inverse. Ainsi @code{\the\dimexpr 1pt*10\relax} est valide et produit
@samp{10.0pt}, mais @code{\the\dimexpr 10*1pt\relax} produit l'erreur
@code{Illegal unit}.

Les expressions absorbent les unités lexicales et effectuent les
opérations mathématiques appropriées jusqu'à ce qu'un @code{\relax} (qui
est absorbé), ou jusqu'à ce que la première unité lexicale non valide
soit rencontrée.  Ainsi, @code{\the\numexpr2+3px} imprime @samp{5px},
parce que @LaTeX{} lit le @code{\numexpr2+3}, ce qui est composé de
nombres, et ensuite trouve la lettre @code{p}, qui ne peut pas faire
partie d'un nombre. Il termine alors l'expression et produit le @samp{5},
suivi par le texte ordinaire @samp{px}.

Ce comportement de terminaison est utile dans les comparaisons. Dans
@code{\ifnum\numexpr\parindent*2 < 10pt Oui\else Non\fi}, le signe
inférieur à termine l'expression et le résultat est @samp{Non} (dans un
document de classe @LaTeX{} standarde article).

Les expressions peuvent utiliser les opérateurs @code{+}, @code{-},
@code{*} et @code{/} ainsi que les parenthèses pour les
sous-expressions, @code{(...)}.  Dans les expressions glue les parties
en @code{plus} et @code{minus} ne nécessitent pas de parenthèses pour
être affectés par un facteur. Ainsi le résultat de @code{\the\glueexpr
5pt plus 1pt * 2 \relax} est @samp{10pt plus 2pt}.

@TeX{} convertit les autres types numériques de la même façon que
lorsqu'il fait une affectation à un registre. Ainsi le résultat de
@code{\the\numexpr\dimexpr 1pt\relax\relax} est @samp{65536}, ce qui est
@code{1pt} exprimé en points proportionnés (@pxref{units of length
sp,@code{sp}}, l'unité interne de @TeX{}) et ensuite converti en entier.
Si ça avait été une @code{\glueexpr}, on aurait laissé tomber la
dilatation et la contraction. Dans l'autre sens, une @code{\numexpr} au
sein d'une @code{\dimexpr} ou d'une @code{\glueexpr} nécessite l'ajout
d'unité appropriées, comme dans @code{\the\dimexpr\numexpr 1 + 2\relax
pt\relax}, ce qui produit @samp{3.0pt}.

Voici les détails de l'arithmétique : chaque facteur est vérifié comme
étant compris dans l'intervalle autorisé, les nombres doivent être
inférieurs à @math{2^{31}} en valeur absolue, et les composantes de
dimensions ou glues doivent être inférieures à @math{2^{14}} points, ou
@code{mu}, ou @code{fil}, etc.  Les opérations arithmétiques sont
effectuées individuellement, sauf pour les opérations de dilatation (une
multiplication immédiatement suivie d'une division) qui sont faites
comme une opération combinée avec un produit sur 64-bit comme valeur
intermédiaire. Le résultat de chaque opération est de nouveau vérifié
comme appartenant à l'intervalle autorisé.

Finalement, on notera que les divisions et dilatations sont faites avec
un arrondi au plus proche (contrairement à l'opération @code{\divide} de
@TeX{} qui prend un arrondi vers zéro).  Ainsi @code{\the\dimexpr
5pt*(3/2)\relax} met @samp{10.0pt} dans le document, parce qu'il arrondit
@code{3/2} en @code{2}, tandis que @code{\the\dimexpr 5pt*(4/3)\relax}
produit @samp{5.0pt}.


@c @node Predefined lengths
@c @section Longueurs prédéfinies
@c @cindex longueurs prédéfinies
@c @cindex prédéfinies, longueurs
@c 
@c @code{\width}
@c @findex \width
@c 
@c @code{\height}
@c @findex \height
@c 
@c @code{\depth}
@c @findex \depth
@c 
@c @code{\totalheight}
@c @findex \totalheight
@c 
@c Ces paramètres de longueur peuvent être utilisés au sein des arguments
@c des commandes de fabrication de boîte (@pxref{Boxes}). Il spécifient la
@c largeur naturelle, etc., du texte dans la boîte. @code{\totalheight}
@c vaut @math{@code{@backslashchar{}height} +
@c @code{@backslashchar{}depth}}. Pour fabriquer une boîte dont le texte
@c est dilaté au double de sa taille naturelle, écrivez par ex.@: :
@c 
@c @example
@c \makebox[2\width]@{Dilatez moi@}
@c @end example
@c 
@c 
@node Making paragraphs
@chapter Faire des paragraphes
@cindex Faire des paragraphes
@cindex paragraphes

Pour démarrer un paragraphe, tapez juste du texte. Pour finir le
paragraphe courant, mettez une ligne vide.  Dans l'exemple ci-dessous on
a trois paragraphes, dont la séparation est assurée par deux lignes
vides :

@example
C'est une vérité universellement reconnue qu'un célibataire pourvu d'une
belle fortune doit avoir envie de se marier, et si peu que l'on sache de
son sentiment à cet égard, lorsqu'il arrive dans une nouvelle résidence,
cette idée est si bien fixée dans l'esprit de ses voisins qu'ils le
considère sur-le-champ comme la propriété légitime de l'une ou l'autre
de leurs filles.

« Savez-vous mon cher ami, dit un jour Mrs Bennet à son mari, que
Netherfield Park est enfin loué ? »

Mr Bennet répondit qu'il l'ignorait.
@end example

Le séparateur de paragraphe peut consister en une séquence quelconque
d'au moins une ligne à blanc, dans laquelle au moins une ligne n'est pas
terminée par un commentaire. Une ligne à blanc est une ligne qui est
vide ou ne contient que des caractères blancs tel que l'espace ou la
tabulation. Les commentaires dans le code source sont démarrés par un
@code{%} et s'étendent jusqu'à la fin de la ligne. Dans l'exemple
suivant les deux colonnes sont identiques :


@example
\documentclass[twocolumn]@{article@}
\begin@{document@}
First paragraph.

Second paragraph.
\newpage
First paragraph.
@w{      }
  % les lignes de séparation peuvent contenir des blancs.
@w{  	}
Second paragraph.
\end@{document@}
@end example

Une fois que @LaTeX{} a rassemblé tout le contenu d'un paragraphe il
divise le paragraphe en lignes d'une manière qui est optimisée sur
l'entièreté du paragraphe (@pxref{Line breaking}).

Il y a des endroits où un nouveau paragraphe n'a pas le droit de
commencer. Ne mettez pas de lignes à blanc en mode math
(@pxref{Modes}) ; dans l'exemple suivant la ligne à blanc précédent
@code{\end@{equation@}}

@example
\begin@{equation@}
  2^@{|S|@} > |S|

\end@{equation@}
@end example

@noindent
produit l'erreur @samp{Missing $ inserted}.  De même, la ligne à blanc au sein de l'argument de ce @code{\section} :

@example
\section@{aaa

bbb@}
@end example

@noindent
produit l'erreur @samp{Runaway argument? @{aaa ! Paragraph ended before
\@@sect was complete}.

@menu
* \par::     Terminer le paragraphe en cours.
* \indent & \noindent:: Passer en mode horizontal, possiblement avec un
  renfoncement.
* \parindent & \parskip::    L'espace ajouté avant les paragraphes.
* Notes en marge: Marginal notes. Mettre des remarques dans la marge.
@end menu


@node \par
@section @code{\par}

@findex \par
@cindex paragraphe, terminaison

Synopsis (notez que, alors qu'il lit l'entrée, @TeX{} convertit toute
séquence d'au moins une ligne à blanc en un @code{\par}, voir
@ref{Making paragraphs}) :

@example
\par
@end example

Termine le paragraphe en cours.  La manière habituelle de séparer les
paragraphes est avec une ligne à blanc, mais la commande @code{\par} est
entièrement équivalente.  Cette commande est robuste (@pxref{\protect}).

L'exemple suivant utilise @code{\par} plutôt qu'une ligne à blanc
simplement pour la lisibilité.

@example
\newcommand@{\coursEnJargonLegal@}@{%
  \CeQuEstLaTricherie\par\CeQuiTArriveQuandOnTAttrape@}
@end example

En mode LR la commande @code{\par} ne fait rien et est ignorée.  En mode
paragraphe la commande @code{\par} termine le mode paragraphe, et commute
@LaTeX{} vers le mode vertical (@pxref{Modes}).

Vous ne pouvez pas utiliser la commande @code{\par} en mode
mathématique.  Vous ne pouvez pas non plus l'utiliser au sein de
l'argument de beaucoup de commandes, telles que les commandes de
rubricage, par ex.@: @code{\section} (@pxref{Making paragraphs} et
@ref{\newcommand & \renewcommand}).

La commande @code{\par} ne fait pas la même chose que la commande
@code{\paragraph}. Cette dernière, comme @code{\section} ou
@code{\subsection}, est une commande de rubricage utilisée par les
classes standardes de document @LaTeX{} (@pxref{\subsubsection &
\paragraph & \subparagraph}).

La commande @code{\par} ne fait pas la même chose que @code{\newline} ou
que le saut de ligne en double controblique, @code{\\}.  La différence
c'est que @code{\par} termine le paragraphe, et non pas seulement la
ligne, et ajoute également de l'espace vertical inter-paragraphe
@code{\parskip} (@pxref{\parindent & \parskip}).

En sortie de l'exemple suivant

@example
xyz

\setlength@{\parindent@}@{8cm@}
\setlength@{\parskip@}@{13cm@}
\noindent test\indent test1\par test2
@end example

@noindent
on a : après @samp{xyz} il y a un saut vertical de 13@dmn{cm} et ensuite
@samp{test} apparaît, aligné sur la marge de gauche. Sur la même ligne
on a un espace horizontal vide de 8@dmn{cm} et ensuite @samp{test1}
apparaît.  Finalement. il y a un espace vertical de 13@dmn{cm}, suivi par
un nouveau paragraphe avec un renfoncement de 8@dmn{cm}, et ensuite
@LaTeX{} met le texte @samp{test2}.


@node \indent & \noindent
@section @code{\indent} & @code{\noindent}

@anchor{\indent}
@anchor{\noindent}
@findex \indent
@findex \noindent
@cindex renfoncement, forcer

Synopsis:

@example
\indent
@end example

@noindent ou

@example
\noindent
@end example

Passe en mode horizontal (@pxref{Modes}). La commande @code{\indent}
commence par produire une boîte vide dont la largeur est
@code{\parindent}. Ces commandes sont robustes (@pxref{\protect}).

D'ordinaire on crée un nouveau paragraphe en insérant une ligne à
blanc. @xref{\par}, pour la différence entre cette commande et
@code{\par}. Pour commencer un paragraphe sans renfoncement, ou pour
continuer un paragraphe interrompu, utiliser @code{\noindent}.

Au milieu d'un paragraphe la commande @code{\noindent} est sans effet,
parce que @LaTeX{} y est déjà en mode horizontal. La commande
@code{\indent} n'a pour seul effet que de produire une espace en sortie.

L'exemple suivant démarre un nouveau paragraphe.

@example
... fin du paragraphe précédent.

\noindent Ce paragraphe n'est pas renfoncé.
@end example

@noindent
et cet exemple-là continue un paragraphe interrompu :

@example
Les données

\begin@{center@}
  \begin@{tabular@}@{rl@} ... \end@{tabular@}
\end@{center@}

\noindent montrent clairement ceci.
@end example

@findex \parindent
Pour éliminer le renfoncement de paragraphe dans tout un document,
mettez @code{\setlength@{\parindent@}@{0pt@}} dans le préambule. Si vous
faites cela, vous désirerez peut-être régler également la longueur des
espaces inter-paragraphes, @code{\parskip} (@pxref{\parindent &
\parskip}).

@PkgIndex{indentfirst}
Les styles @LaTeX{} par défaut ont le premier paragraphe suivant une
rubrique qui n'est pas renfoncé, comme cela est traditionnel en
typographie anglo-saxonne.  Pour changer cela, chercher sur le CTAN le
paquetage @package{indentfirst}.


@node \parindent & \parskip
@section @code{\parindent} & @code{\parskip}

@anchor{\parindent}
@anchor{\parskip}
@findex \parindent
@findex \parskip
@cindex renfoncement d'un paragraphe
@cindex retrait d'un paragraphe
@cindex horizontal, renfoncement d'un paragraphe
@cindex espace vertical avant les paragraphes

Synopsis :

@example
\setlength@{\parindent@}@{@var{longueur-horizontale}@}
\setlength@{\parskip@}@{@var{longueur-verticale}@}
@end example

Toutes deux sont des longueurs élastiques (@pxref{Lengths}).  Elles
affectent respectivement le renfoncement des paragraphes ordinaires, non
des paragraphes au sein de minipages (@pxref{minipage}), et l'espace
vertical entre les paragraphes, respectivement.

Par exemple, si ce qui suit est mis dans le préambule :

@example
\setlength@{\parindent@}@{0em@}
\setlength@{\parskip@}@{1ex@}
@end example

@noindent
Alors le document aura des paragraphes qui ne sont pas renfoncés, mais
par contre qui sont verticalement séparés d'environ la hauteur d'un
@samp{x} bas-de-casse.

Dans les documents de classes @LaTeX{} standardes, la valeur par défaut
de @code{\parindent} pour les documents à une colonne est @code{15pt}
quand la taille par défaut du texte est @code{10pt}, @code{17pt} pour
@code{11pt}, et @code{1.5em} pour @code{12pt}.  Dans les documents en
deux-colonnes c'est @code{1em}.  (Ces valeurs sont réglées avant que
@LaTeX{} appelle @code{\normalfont} de sorte que @code{em} est dérivé de
la fonte par défaut, Computer Modern.  Si vous utilisez une fonte
différente alors pour régler @code{\parindent} à 1@dmn{em} en accord
avec cette fonte, mettez dans votre préambule
@code{\AtBeginDocument@{\setlength@{\parindent@}@{1em@}@}}).

La valeur par défaut de @code{\parskip} dans les documents de classes
standardes @LaTeX{} est @code{0pt plus1pt}.


@node Marginal notes
@section Notes en marge
@cindex Notes en marge
@cindex notes dans la marge
@cindex remarques dans la marge
@findex \marginpar

Synopsis, l'un parmi :

@example
\marginpar@{@var{droite}@}
\marginpar[@var{gauche}]@{@var{droite}@}
@end example

La commande @code{\marginpar} crée une note dans la marge. La première
ligne de la note a la même ligne de base que la ligne dans le texte où le
@code{\marginpar} se trouve.

Lorsque vous spécifiez seulement l'argument obligatoire @var{droite}, le texte
est placé

@itemize  @value{ITEM_BULLET1}
@item
dans la marge de droite pour une disposition en recto simple (option
@code{oneside}, voir @ref{Document class options}) ;
@item
dans la marge extérieure pour une disposition en recto-verso  (option
@code{twoside}, voir @ref{Document class options}) ;
@item
dans la plus proche pour une disposition à deux-colonnes
(option @code{twocolumn}, voir @ref{Document class options}).
@end itemize

@findex \reversemarginpar
@findex \normalmarginpar
La commande @code{\reversemarginpar} place les notes en marge suivante
sur la marge  opposée (interne). @code{\normalmarginpar} les replace
dans la  position par défaut.

Lorsque vous spécifier les deux arguments, @var{gauche} est utilisé pour
is used la marge de gauche, et @var{droite} est utilisé pour la marge de
is used droite.

Le premier mot doit normalement ne pas être sujet à une césure ; Vous
pouvez activer la césure à cet endroit en commençant le nœud avec
@code{\hspace@{0pt@}}.

Ces paramètres affectent le formatage de la note :

@ftable @code
@item \marginparpush
Espace verticale minimale entre les notes ; par défaut @samp{7pt} pour
des  documents à @samp{12pt}, @samp{5pt} sinon.

@item \marginparsep
Espace horizontale entre le texte principal et la note ; par défaut
@samp{11pt} pour des documents à @samp{10pt}, @samp{10pt} sinon.

@item \marginparwidth
Largeur de la note même ; la valeur par défaut est @samp{90pt} pour un
document en recto simple et à @samp{10pt} , @samp{83pt} pour
@samp{11pt}, et @samp{68pt} pour @samp{12pt} ; @samp{17pt} de plus dans
chacun de ces cas pour un document recto-verso.  En mode deux-colonnes,
la valeur par défaut est @samp{48pt}.

@end ftable

La routine standarde de @LaTeX{} pour les notes en marge n'empêche pas
les notes de déborder hors du bas de la page.
@c @TeX{} FAQ entry on this topic (xx when there):
@c @url{http://www.tex.ac.uk/cgi-bin/texfaq2html?label=marginparside}.
@c (+marginfix)


@node Math formulas
@chapter Formules mathématiques

@cindex formules mathématiques
@cindex formules, math
@cindex mode mathématique, entrer
@EnvIndex{math}
@EnvIndex{displaymath}
@EnvIndex{equation}

On produit du texte mathématique en mettant @LaTeX{} en mode math ou
mode math d'affichage (@pxref{Modes}). L'exemple qui suit illustre les
deux :

@example
L'équation d'onde de \( u \) est :
\begin@{displaymath@}
  \frac@{\partial^2u@}@{\partial t^2@} = c^2\nabla^2u
\end@{displaymath@}
où \( \nabla^2 \) est le Laplacien spatial et \( c \) une constante.
@end example

@c xx TODO, ajouter « Notez qu'on n'a pas besoin de @code{\noindent} après @code{\end@{displaymath@}} (@pxref{\indent & \noindent}). »
@noindent
Le mode math est pour des mathématiques en ligne dans le texte. Dans
l'exemple ci-dessus il est invoqué pour démarrer avec le @code{\(} et
pour finir avec le @code{\)} correspondant. Le mode math d'affichage est
pour des équations hors texte et il est ici invoqué par l'environnement
@code{displaymath}.  Notez que tout texte mathématique, y compris
@c xx TODO préciser mode math = mode math en ligne ou d'affichage.
consistant d'un seul caractère, est géré en mode math.

Quand il est en math mode ou mode math d'affichage, @LaTeX{} gère
beaucoup d'aspects du texte que vous entrez différemment que dans les
autres mode texte.  Par exemple,

@example
comparez x+y et \( x+y \)
@end example

@noindent
en mode math les lettres sont en italique et l'espacement autour du
signe plus est différent.

Il y a trois manières de mettre @LaTeX{} en mode math pour fabriquer des
formules en ligne dans le texte :

@example
\( @var{matière mathématique} \)
$ @var{matière mathématique} $
\begin@{math@} @var{matière mathématique} \end@{math@}
@end example

@noindent
La première forme est préférée et la deuxième est assez fréquente, mais
la troisième est rarement utilisée.
@c xx TODO texte à revoir, ce n'est pas une bonne pratique de mélanger,
@c et expliquer la valeur ajoutée de \(…\) par rapport à $…$
Vous pouvez utiliser n'importe laquelle des trois, comme dans
@code{\(x\) and $y$}.  Vous pouvez les utiliser en mode paragraphe ou en
mode LR (@pxref{Modes}).

Pour fabriquer des formules hors texte, faites passer @LaTeX{} en mode
math d'affichage avec l'un des deux environnements suivants :

@example
\begin@{displaymath@}
  @var{matière mathématique}
\end@{displaymath@}
@end example

@noindent ou

@example
\begin@{equation@}
  @var{matière mathématique}
\end@{equation@}
@end example

@noindent
(@pxref{displaymath}, @pxref{equation}).  La seule différence est
qu'avec l'environnement @code{equation}, @LaTeX{} place un numéro de
formule sur le côté de la formule.
@c xxx TODO pourquoi ne pas présenter les trois constructions d'un coup,
@c comme pour les formules en ligne
La construction @code{\[ @var{math} \]} est équivalente à
@code{\begin@{displaymath@} @var{math} \end@{displaymath@}}.  Ces
environnements ne peuvent être utilisés qu'en mode paragraphe
(@pxref{Modes}).

@PkgIndex{amsmath}
@PkgIndex{amsfonts}
@PkgIndex{mathtools}
La @identity{American Mathematical Society} a publié un ensemble de
paquetages libres d'accès qui étendent largement vos possibilités pour
écrire des mathématiques, @package{amsmath} et @package{amssymb} (et
notez également le paquetage @package{mathtools} qui est une extension
d'@package{amsmath} et le charge).  Les nouveaux documents contenant du
texte mathématique devraient utiliser ces paquetages.  Une description
des ces paquetages est hors du champ d'application de ce document ; se
référer à leur documentation sur le CTAN.

@menu
* Indices inférieurs & supérieurs: Subscripts & superscripts. Également connus comme exposants ou indices.
* Symboles mathématiques: Math symbols. Gribouillis mathématiques divers.
* Fonction mathématiques: Math functions. Nom de fonctions mathématiques comme sin et exp.
* Accents en math: Math accents. Accents en math.
* Sur- et @identity{sous-ligner}: Over- and Underlining. Choses au-dessous ou au-dessous d'une formule.
* Espacement en mode mathématique: Spacing in math mode. Espaces épaisses, moyennes, fines, et négatives.
* Styles mathématiques: Math styles. Détermine la taille des choses.
* Miscellanées mathématiques: Math miscellany. Tout ce qu'on n'a pas pu caser ailleurs.
@end menu


@node Subscripts & superscripts
@section Indices inférieurs & supérieurs

@anchor{superscript}
@anchor{subscript}
@cindex indice supérieur
@cindex indice inférieur
@findex ^ @r{indice supérieur}
@findex _ @r{indice inférieur}
@cindex exposant

Synopsis (en mode math en ligne ou d'affichage), l'un parmi :

@example
@var{base}^@var{exp}
@var{base}^@{@var{exp}@}
@end example

@noindent
ou, l'un parmi :

@example
@var{base}_@var{exp}
@var{base}_@{@var{exp}@}
@end example 

Met @var{exp} en indice supérieur de @var{base} (avec le caractère
caret @code{^}) ou inférieur (avec le tiret bas @code{_}).

Dans cet exemple le @code{0} et le @code{1} apparaissent comme indices
inférieurs alors que le @code{2} est un indice supérieur.

@example
\( (x_0+x_1)^2 \leq (x_0)^2+(x_1)^2 \)
@end example

Pour avoir plus d'un caractère au sein de l'indice inférieur ou
supérieur @var{exp}, entourez l'expression @var{exp} par des des
accolades comme dans @code{e^@{-2x@}}.  La quatrième ligne de l'exemple
suivant illustre l'utilisation d'accolades pour grouper une expression
pour l'indice supérieur.

@example
\begin@{displaymath@}
  (3^3)^3=27^3=19\,683
  \qquad
  3^@{(3^3)@}=3^@{27@}=7\,625\,597\,484\,987
\end@{displaymath@}
@end example

@LaTeX{} sait gérer un indice supérieur sur un indice inférieur, ou
inférieur sur inférieur, ou supérieur sur inférieur, ou inférieur sur
supérieur. Ainsi des expressions telles que @code{e^@{x^2@}} et
@code{x_@{a_0@}} seront composées comme il faut. Notez l'utilisation
d'accolade pour donner à @var{base} un indice @var{exp} déterminé. Si
vous saisissez @code{\(3^3^3\)}, c'est interprété comme
@code{\(3^@{3@}^@{3@}\)} et vous obtiendrez l'erreur @TeX{} @samp{Double
superscript}.

@LaTeX{} fait ce qu'il faut quand quelque chose a à la fois un indice
 inférieur et un indice supérieur. Dans cet exemple l'intégrale a les
 deux, ils sont rendus à la bonne place sans intervention de l'auteur.

@example
\begin@{displaymath@}
  \int_@{x=a@}^b f'(x)\,dx = f(b)-f(a)
\end@{displaymath@}
@end example

@noindent
Notez les accolades autour de @code{x=a} pour faire de toute
l'expression un indice inférieur.

Vous pouvez mettre un indice supérieur ou inférieur avant un symbole
avec une construction telle que @code{@{@}_t K^2}.  Les accolades vides
@code{@{@}} donnent à l'indice inférieur quelque chose sur quoi
s'attacher et l'empêchent d'être attaché par accident à quelque symbole
qui le précède dans l'expression.

En dehors du mode math, ou math d'affichage, l'utilisation d'un indice
inférieur ou supérieur, comme dans @code{l'expression x^2}, vous vaudra
l'erreur @TeX{} @samp{Missing $ inserted}.

@PkgIndex{mhchem}
Une raison usuelle de désirer des indices inférieurs hors d'un mode math
est de composer des formules chimiques. Il y a des paquetages spécialisés
pour cela, tels que @package{mhchem} ; voir le CTAN.
@c xx display mode


@node Math symbols
@section Symboles mathématiques
@cindex symboles mathématiques
@cindex Lettre grecques

@PkgIndex{comprehensive}
@LaTeX{} fournit presque tout symbole mathématique dont vous êtes
susceptible d'avoir besoin. Par exemple, si vous incluez @code{$\pi$}
dans votre code source, alors vous obtenez le symbole pi @BES{π,\pi}.
Voir le paquetage « Comprehensive @LaTeX{} Symbol List »,
@url{https://ctan.org/pkg/comprehensive}.

Ci-dessous se trouve une liste de symboles usuels. Ce n'est en aucun cas
une liste exhaustive. Chaque symbole y est décrit brièvement et avec sa
classe de symbole (qui détermine l'espacement autour de lui) qui est
donnée entre parenthèses. Les commandes pour ces symboles peuvent, sauf
mention contraire, être utilisées seulement en mode mathématique.  Pour
redéfinir une commande de sorte à pouvoir l'utiliser quel que soit le
mode, voir @ref{\ensuremath}.

@c xx Add Negation: @code{} for negations of relevant symbols
@c Useful: http://www.w3.org/TR/WD-math-970515/section6.html
@ftable @code
@item \|
@BES{∥,\|} Parallèle (relation). Synonyme : @code{\parallel}.

@item \aleph
@BES{ℵ,\aleph} Aleph, cardinal transfini (ordinaire).

@item \alpha
@BES{α,\alpha} Lettre grecque en bas de casse  alpha (ordinaire).

@item \amalg
@BES{⨿,\amalg} Union disjointe (binaire)

@item \angle
@BES{∠,\angle} Angle géométrique (ordinaire). Similaire :
signe inférieur-à @code{<} et chevron @code{\langle}.

@item \approx
@BES{≈,\approx} Presque égal à (relation).

@item \ast
@BES{∗,\ast} Opérateur astérisque, convolution, à six branches
(binaire). Synonyme : @code{*}, ce qui est souvent un indice
supérieur ou inférieur, comme dans l'étoile de
Kleene. Similaire : @code{\star}, qui est à cinq branches, et est
quelquefois utilisée comme une opération binaire générale, et
quelquefois réservée pour la corrélation croisée.

@item \asymp
@BES{≍,\asymp} Équivalent asymptotiquement (relation).

@item \backslash
\ controblique (ordinaire).  Similaire : soustraction
d'ensemble @code{\setminus}, et @code{\textbackslash} pour une
controblique en dehors du mode mathématique.

@item \beta
@BES{β,\beta} Lettre grecque en bas de casse  bêta (ordinaire).

@item \bigcap
@BES{⋂,\bigcap} De taille Variable, ou n-aire, intersection (opérateur). Similaire :
intersection binaire @code{\cap}.

@item \bigcirc
@BES{⚪,\bigcirc} Cercle, plus grand (binaire).  Similaire : composition de
fonction @code{\circ}.
@c bb Best unicode symbol for this?

@item \bigcup
@BES{⋃,\bigcup} De taille variable, ou n-aire, union (opérateur). Similaire : union
binaire @code{\cup}.

@item \bigodot
@BES{⨀,\bigodot} De taille variable, ou n-aire,  opérateur point encerclé (opérateur).

@item \bigoplus
@BES{⨁,\bigoplus} De taille variable, ou n-aire, opérateur plus encerclé (opérateur).

@item \bigotimes
@BES{⨂,\bigotimes} De taille variable, ou n-aire, opérateur multiplié encerclé (opérateur).

@item \bigtriangledown
@BES{▽,\bigtriangledown} De taille variable, ou n-aire, triangle ouvert
pointant vers le bas(opérateur).

@item \bigtriangleup
@BES{△,\bigtriangleup} De taille variable, ou n-aire, triangle ouvert
pointant vers le haut (opérateur).

@item \bigsqcup
@BES{⨆,\bigsqcup} De taille variable, ou n-aire, union carrée (opérateur).

@item \biguplus
@BES{⨄,\biguplus} De taille variable, ou n-aire, opérateur union avec un plus
(opérateur).  (Notez que le nom a juste un p.)

@item \bigvee
@BES{⋁,\bigvee} De taille variable, ou n-aire, ou-logique (opérateur).

@item \bigwedge
@BES{⋀,\bigwedge} De taille variable, ou n-aire, et-logique (opérateur).

@item \bot
@BESU{⊥,bot} Taquet vers le haut, minimum, plus petit élément d'un ensemble
partiellement ordonné, ou une contradiction
(ordinaire).  Voir aussi @code{\top}.

@item \bowtie
@BES{⋈,\bowtie} Jonction naturelle de deux relations (relation).

@item \Box
@BESU{□,Box} Opérateur modal pour la nécessité ; boîte ouverte carrée
(ordinaire).  @value{NeedsAMSSymb}
@c bb Best Unicode equivalent?

@item \bullet
@cindex symbole puce
@BES{•,\bullet} Puce (binaire).  Similaire : point de
multiplication @code{\cdot}.

@item \cap
@BES{∩,\cap} Intersection de deux ensembles (binaire).  Similaire :
opérateur de taille variable @code{\bigcap}.

@item \cdot
@BES{⋅,\cdot} Multiplication (binaire).  Similaire : Point
puce @code{\bullet}.

@item \chi
@BES{χ,\chi} Lettre grecque en bas de casse  chi (ordinaire).

@item \circ
@BES{∘,\circ} Composition de fonctions, opérateur rond (binaire).  Similaire :
opérateur de taille variable @code{\bigcirc}.

@item \clubsuit
@BES{♣,\clubsuit} Trèfle de carte à jouer (ordinaire).

@item \complement
@BESU{∁,complement} Complément d'ensemble, utilisée en indice supérieur
comme dans @code{$S^\complement$} (ordinaire).  @value{NeedsAMSSymb} On utilise aussi : @code{$S^@{\mathsf@{c@}@}$}
ou @code{$\bar@{S@}$}.

@item \cong
@BES{≅,\cong} Congruent (relation).

@item \coprod
@BES{∐,\coprod} Coproduit (opérateur).

@item \cup
@BES{∪,\cup} Réunion de deux ensembles (binaire).  opérateur de taille
variable @code{\bigcup}.

@item \dagger
@BES{†,\dagger} Relation obèle (binaire).

@item \dashv
@BES{⊣,\dashv} Taquet gauche, tiret avec barre verticale à droite,
tourniquet pour gauchers (relation).  Similaire : taquet droit,
tourniquet @code{\vdash}.

@item \ddagger
@BES{‡,\ddagger} Relation double obèle (binaire).

@item \Delta
@BES{Δ,\Delta} Delta grec capital, utilisé pour indiquer une
incrémentation (ordinaire).

@item \delta
@BES{δ,\delta} Delta grec bas-de-casse (ordinaire).

@item \Diamond
@BESU{◇,Diamond} Opérateur grand carreau (ordinaire).  @value{NeedsAMSSymb}
@c bb Best Unicode equivalent?

@item \diamond
@BES{⋄,\diamond} Opérateur Carreau, ou puce carreau (binaire).  Similaire : grand
carreau @code{\Diamond}, puce disque @code{\bullet}.

@item \diamondsuit
@BES{♢,\diamondsuit} Carreau de carte à jouer (ordinaire).

@item \div
@BES{÷,\div} Signe de division, obélus (binaire).

@item \doteq
@BES{≐,\doteq} Approche la limite (relation).  Similaire :
géométriquement égal à @code{\Doteq}.

@item \downarrow
@BES{↓,\downarrow} Flèche vers le bas, converge (relation).  Similaire :
flèche à ligne double vers le bas @code{\Downarrow}.

@item \Downarrow
@BES{⇓,\Downarrow} Flèche à ligne double vers le bas (relation).
Similaire : flèche à ligne simple vers le bas @code{\downarrow}.

@item \ell
@BES{ℓ,\ell} Lettre l bas de casse cursive (ordinaire).

@item \emptyset
@BES{∅,\emptyset} Symbole ensemble vide (ordinaire).  La forme en
variante est @code{\varnothing}.
@c bb Why Unicode has \revemptyset but no \emptyset?

@item \epsilon
@BES{ϵ,\epsilon} Lettre grecque bas de casse epsilon lunaire
(ordinaire).  Semblable à la lettre en texte grec. En mathématiques on
utilise plus fréquemment l'epsilon minuscule de ronde
@code{\varepsilon} @BES{ε,\varepsilon}. En relation avec : la relation
ensembliste « appartenir à » @code{\in} @BES{∈,\in}.
@c src: David Carlisle http://tex.stackexchange.com/a/98018/339 and
@c Unicode referenced there asserts varepsilon is much more widely used.

@item \equiv
@BES{≡,\equiv} Équivalence (relation).

@item \eta
@BES{η,\eta} Lettre grecque en bas de casse  (ordinaire).

@item \exists
@BES{∃,\exists} Quanteur « Il existe » (ordinaire).

@item \flat
@BES{♭,\flat} Bémol (ordinaire).

@item \forall
@BES{∀,\forall} Quanteur « Pour tout » (ordinaire).

@item \frown
@BES{⌢,\frown} Moue (ordinaire).

@item \Gamma
@BES{Γ,\Gamma} Lettre grecque en capitale (ordinaire).

@item \gamma
@BES{γ,\gamma} Lettre grecque en bas de casse  (ordinaire).

@item \ge
@BES{≥,\ge} Supérieur ou égal à (relation).  Synonyme : @code{\geq}.

@item \geq
@BES{≥,\geq} Supérieur ou égal à (relation).  Synonyme : @code{\ge}.

@item \gets
@BES{←,\gets} Auquel est assignée la valeur (relation).
Synonyme : @code{\leftarrow}.

@item \gg
@BES{≫,\gg} Beaucoup plus grand que (relation).  Similaire : Beaucoup
plus petit que @code{\ll}.

@item \hbar
@BES{ℏ,\hbar} Constante de Planck sur deux pi (ordinaire).

@item \heartsuit
@BES{♡,\heartsuit} Cœur de carte jouer (ordinaire).

@item \hookleftarrow
@BES{↩,\hookleftarrow} Flèche vers la gauche avec crochet (relation).

@item \hookrightarrow
@BES{↪,\hookrightarrow} Flèche vers la gauche avec crochet (relation).

@item \iff
@BES{⟷,\iff} Si et seulement si (relation).  C'est un  @code{\Longleftrightarrow}
avec un @code{\thickmuskip} de chaque côté.

@item \Im
@BES{ℑ,\Im} Partie imaginaire (ordinaire).  Voir aussi : partie réelle @code{\Re}.

@item \imath
@cindex sans point, i, math
@cindex i sans point en math
i sans point ; utilisé quand on place un accent sur un i (@pxref{Math
accents}).

@item \in
@BES{∈,\in} Appartient à (relation).  Voir aussi : lettre grecque bas de
casse epsilon lunaire @code{\epsilon} @BES{ϵ,\epsilon} et l'epsilon
minuscule de ronde @code{\varepsilon}.

@item \infty
@BES{∞,\infty} Infini (ordinaire).

@item \int
@BES{∫,\int} Intégrale (opérateur).

@item \iota
@BES{ι,\iota} Lettre grecque en bas de casse  (ordinaire).

@item \Join
@BESU{⨝,Join} Symbole jointure condensé (relation).  @value{NotInPlainTeX}

@item \jmath
@cindex sans point, j, math
@cindex j sans point en math
j sans point ; utilisé quand on place un accent sur un j (@pxref{Math
accents}).

@item \kappa
@BES{κ,\kappa} Lettre grecque en bas de casse  (ordinaire).

@item \Lambda
@BES{Λ,\Lambda} Lettre grecque en capitale (ordinaire).

@item \lambda
@BES{λ,\lambda} Lettre grecque en bas de casse  (ordinaire).

@item \land
@BES{∧,\land} Et logique (binaire).  Synonyme : @code{\wedge}.
Voir aussi ou-logique @code{\lor}.

@item \langle
@BES{⟨,\langle} Chevron mathématique gauche, ou séquence, crochet
(ouvrant).  Similaire : inférieur à @code{<}. Correspond
à @code{\rangle}.

@item \lbrace
@BES{@lbracechar{},\lbrace} Accolade gauche
(ouvrant). Synonyme : @code{\@{}. Correspond à @code{\rbrace}.

@item \lbrack
@BES{[,\lbrack} Crochet gauche (ouvrant).
Synonyme : @code{[}. Correspond à @code{\rbrack}.

@item \lceil
@BES{⌈,\lceil} Plafond à gauche, ressemble à un crochet mais avec le
pied coupé (ouvrant). Correspond à @code{\rceil}.

@item \le
@BES{≤,\le} Inférieur ou égal à (relation).  C'est un synonyme
de @code{\leq}.

@item \leadsto
@BESU{⇝,leadsto} flèche vers la droite en tire-bouchon (relation).  @value{NeedsAMSSymb}

@item \Leftarrow
@BES{⇐,\Leftarrow} Est impliqué par, flèche vers la gauche à
double-ligne (relation).  Similaire : flèche vers la gauche à simple
ligne @code{\leftarrow}.

@item \leftarrow
@BES{←,\leftarrow} Flèche vers la gauche à simple ligne (relation).
Synonyme : @code{\gets}. Similaire : Flèche vers la gauche à
double-ligne @code{\Leftarrow}.

@item \leftharpoondown
@BES{↽,\leftharpoondown} Harpon vers la gauche à simple ligne avec
crochet vers le bas (relation).

@item \leftharpoonup
@BES{↼,\leftharpoonup} Harpon vers la gauche à simple ligne avec
crochet vers le haut (relation).

@item \Leftrightarrow
@BES{⇔,\Leftrightarrow} Bi-implication ; double flèche bilatérale
(relation).  Similaire : flèche bilatérale @code{\leftrightarrow}.

@item \leftrightarrow
@BES{↔,\leftrightarrow} Flèche bilatérale (relation).  Similaire :
double flèche bilatérale @code{\Leftrightarrow}.

@item \leq
@BES{≤,\leq} Inférieur ou égal à (relation).  Synonyme : @code{\le}.

@item \lfloor
@BES{⌊,\lfloor} Plancher à gauche (ouvrant). Correspond à :
@code{\rfloor}.

@item \lhd
@BESU{◁,lhd} Pointe de flèche, c.-à-d.@: triangle pointant vers la
gauche (binaire).  Pour le symbole normal de sous-groupe on doit charger
@package{amssymb} et utiliser @code{\vartriangleleft} (qui est une relation et
ainsi donne un meilleur espacement).

@item \ll
@BES{≪,\ll} Beaucoup plus petit que (relation).  Similaire : Beaucoup
plus grand que @code{\gg}.

@item \lnot
@BES{¬,\lnot} Négation logique (ordinaire). Synonyme : @code{\neg}.

@item \longleftarrow
@BES{⟵,\longleftarrow} Longue flèche vers  la gauche à ligne simple (relation).
Similaire : longue flèche gauche à ligne double @code{\Longleftarrow}.

@item \longleftrightarrow
@BES{⟷,\longleftrightarrow} Longue flèche bilatérale à ligne simple
(relation).  Similaire : longue flèche bilatérale à ligne
double @code{\Longleftrightarrow}.

@item \longmapsto
@BES{⟼,\longmapsto} Longue flèche d'un taquet vers la droite à ligne
simple (relation).  Similaire : version courte @code{\mapsto}.

@item \longrightarrow
@BES{⟶,\longrightarrow} Longue flèche vers la droite à ligne simple
(relation).  Similaire : longue flèche vers la droite à ligne
double @code{\Longrightarrow}.

@item \lor
@BES{∨,\lor} Ou-logique (binaire).  Synonyme : @code{\vee}. Voir aussi et-logique @code{\land}.

@item \mapsto
@BES{↦,\mapsto} Flèche d'un taquet vers la droite (relation).
  Similaire : version longue @code{\longmapsto}.

@item \mho
@BESU{℧,mho} Conductance, symbole Ohm culbuté (ordinaire).  @value{NeedsAMSSymb}

@item \mid
@BES{∣,\mid} Barre verticale à ligne simple (relation). une utilisation
typique de @code{\mid} est pour un ensemble @code{\@{\, x \mid x\geq 5
\,\@}}.

Similaire : @code{\vert} et @code{|} produisent le même symbole de barre
verticale à ligne simple mais sans aucun espacement (on les classe comme
« ordinaires ») et vous ne devriez pas les utiliser comme symbole de
relation mais seulement comme des ordinaux, c.-à-d.@: comme des symboles
de note en bas de page. Pour dénoter une valeur absolue, voir l'entrée
de @code{\vert} et pour une norme voir l'entrée de @code{\Vert}.

@item \models
@BES{⊨,\models} inclut ; portillon/tourniquet à double barre, barre
verticale et double tiret court (relation).  Similaire : barre verticale
et double tiret long @code{\vDash}.

@item \mp
@BES{∓,\mp} Moins ou plus (relation).

@item \mu
@BES{μ,\mu} Lettre grecque en bas de casse  (ordinaire).

@item \nabla
@BES{∇,\nabla} @identity{Del} de @identity{Hamilton}, ou
@identity{nabla}, ou différentiel, opérateur (ordinaire).

@item \natural
@BES{♮,\natural} Bécarre (ordinaire).

@item \ne
@BES{≠,\ne} Non égal (relation). Synonyme : @code{\neq}.

@item \nearrow
@BES{↗,\nearrow} Flèche nord-est (relation).

@item \neg
@BES{¬,\neg} Négation logique (ordinaire).
Synonyme : @code{\lnot}. Utilisé parfois au lieu du symbole de
négation: @code{\sim}.

@item \neq
@BES{≠,\neq} Non égal (relation). Synonyme : @code{\ne}.

@item \ni
@BES{∋,\ni} Signe d'appartenance réfléchi ; « contient comme élément »
(relation). Synonyme : @code{\owns}. Similaire : « appartient
à » @code{\in}.

@item \not
@BES{ ,\not}@BES{ ,}@BES{̸,} Barre oblique longue utilisée pour rayer un
 opérateur la suivant (relation).
@c Need blank space for it to overstrike

Beaucoup opérateurs en négation qui n'ont pas besoin de @code{\not} sont
disponibles, en particulier avec le paquetage @file{amssymb}. Par
exemple, @code{\notin} est sans doute préférable à @code{\not\in} d'un
point de vue typographique.

@item \notin
@BES{∉,\notin} N'appartient pas à (relation).  Similaire : non contenu
dans @code{\nsubseteq}.

@item \nu
@BES{ν,\nu} Lettre grecque en bas de casse  (ordinaire).

@item \nwarrow
@BES{↖,\nwarrow} Flèche nord-ouest (relation).

@item \odot
@BES{⊙,\odot} Point cerclé (binaire).  Similaire : opérateur de taille
variable @code{\bigodot}.

@item \oint
@BES{∮,\oint} Intégrale de contour, intégrale avec un cercle au milieu (opérateur).

@item \Omega
@BES{Ω,\Omega} Lettre grecque en capitale (ordinaire).

@item \omega
@BES{ω,\omega} Lettre grecque en bas de casse  (ordinaire).

@item \ominus
@BES{⊖,\ominus} Signe moins, ou tiret, cerclé (binaire).

@item \oplus
@BES{⊕,\oplus} Signe plus cerclé (binaire).  Similaire : opérateur de
taille variable @code{\bigoplus}.

@item \oslash
@BES{⊘,\oslash} Barre de fraction, ou barre oblique, cerclée (binaire).

@item \otimes
@BES{⊗,\otimes} Signe de multiplication, ou croix, cerclé (binaire).  Similaire :
opérateur de taille variable @code{\bigotimes}.

@item \owns
@BES{∋,\owns} Epsilon d'appartenance réfléchi ; « contient comme
élément » (relation). Synonyme : @code{\ni}. Similaire : appartient
à @code{\in}.

@item \parallel
@BES{∥,\parallel} Parallèle (relation). Synonyme : @code{\|}.

@item \partial
@BES{∂,\partial} Différentielle partielle (ordinaire).

@item \perp
@BES{⟂,\perp} Perpendiculaire (relation).  Similaire : @code{\bot}
utilise le même glyphe mais l'espacement est différent parce qu'il est
dans la classe ordinaire.

@item \Phi
@BES{Φ,\Phi} Lettre grecque capitale (ordinaire).

@item \phi
@BES{ϕ,\phi} Lettre grecque en bas de casse  (ordinaire).  La forme en variante est
@code{\varphi} @BES{φ,\varphi}.

@item \Pi
@BES{Π,\Pi} Lettre grecque en capitale (ordinaire).

@item \pi
@BES{π,\pi} Lettre grecque en bas de casse  (ordinaire).  La forme en variante est
@code{\varpi} @BES{ϖ,\varpi}.

@item \pm
@BES{±,\pm} Plus or minus (binaire).

@item \prec
@BES{≺,\prec} Précède (relation). Similaire : inférieur à @code{<}.

@item \preceq
@BES{⪯,\preceq} Précède ou égal, précède par-dessus signe égal à une
ligne (relation). Similaire : inférieur ou égal @code{\leq}.

@item \prime
@BES{′,\prime} Prime, ou minute au sein d'une expression temporelle
(ordinaire).  Typiquement utilisé en indice supérieur @code{$A^\prime$}.
Il est à noter que @code{$f^\prime$} et @code{$f'$} produisent le même
résultat.  Un avantage de la seconde forme est que @code{$f'''$} produit
le symbole désiré, c.-à-d.@: le même résultat que
@code{$f^@{\prime\prime\prime@}$}, mais en nécessitant moins de
saisie. Il est à noter que vous ne pouvez utiliser @code{\prime} qu'en
mode mathématique.  Utiliser le quote @code{'} en mode texte produit un
caractère différent (apostrophe ou guillemet anglais simple de droite).

@item \prod
@BES{∏,\prod} Produit (opérateur).

@item \propto
@BES{∝,\propto} Proportionnel à (relation)

@item \Psi
@BES{Ψ,\Psi} Lettre grecque en capitale (ordinaire).

@item \psi
@BES{ψ,\psi} Lettre grecque en bas de casse  (ordinaire).

@item \rangle
@BES{⟩,\rangle} Chevron mathématique droit, ou séquence, crochet
(fermant). Similaire : supérieur à @code{>}.  Correspond
à @code{\langle}.

@item \rbrace
@BES{@rbracechar{},\rbrace} Accolade de droite
(fermante). Synonyme : @code{\@}}. Correspond à @code{\lbrace}.

@item \rbrack
@BES{],\rbrack} Crochet droit (fermant). Synonyme : @code{]}. Correspond
à @code{\lbrack}.

@item \rceil
@BES{⌉,\rceil} Plafond droit (fermant). Correspond à @code{\lceil}.

@item \Re
@BES{ℜ,\Re} Partie réelle, nombres réels, R capital gothique
(ordinaire). En relation avec : R majuscule ajouré, ou gras de tableau
d'école @code{\mathbb@{R@}} ; pour accéder à cela charger le paquetage
@file{amsfonts}.

@item \restriction
@BESU{↾,restriction} Restriction d'une fonction
(relation). Synonyme : @code{\upharpoonright}.  @value{NeedsAMSSymb}

@item \revemptyset
@BESU{⦰,revemptyset} Symbole ensemble vide inversé (ordinaire).
En relation avec : @code{\varnothing}. @value{NeedsSTIX}

@item \rfloor
@BES{⌋,\rfloor} Plancher droit, un crochet droit avec la dent du haut
coupée (fermant). Correspond à @code{\lfloor}.

@item \rhd
@BESU{◁,rhd} Pointe de flèche, c.-à-d.@: u triangle pointant vers la
droite (binaire).  @value{NeedsAMSSymb} Pour le symbole
normal de sous-groupe vous devriez plutôt charger @file{amssymb} et
utiliser @code{\vartriangleright} (qui est une relation et ainsi donne
un meilleur espacement).

@item \rho
@BES{ρ,\rho} Lettre grecque en bas de casse  (ordinaire).  La forme en variante est
@code{\varrho} @BES{ϱ,\varrho}.

@item \Rightarrow
@BES{⇒,\Rightarrow} Implique, flèche vers la droite à double-ligne
(relation). Similaire : flèche vers la droite @code{\rightarrow}.

@item \rightarrow
@BES{→,\rightarrow} Flèche vers la droite à ligne simple
(relation). Synonyme : @code{\to}. Similaire : flèche vers droite à
ligne double @code{\Rightarrow}.

@item \rightharpoondown
@BES{⇁,\rightharpoondown} Harpon vers la droite avec crochet vers le bas
(relation).

@item \rightharpoonup
@BES{⇀,\rightharpoonup} Harpon vers la droite  avec crochet vers la haut (relation).

@item \rightleftharpoons
@BES{⇌,\rightleftharpoons} Harpon vers la droite avec crochet vers le
haut au dessus d'un harpon vers la gauche avec crochet vers le bas
(relation).

@item \searrow
@BES{↘,\searrow} Flèche pointant sud-est (relation).

@item \setminus
@BES{⧵,\setminus} Différence ensembliste, barre de faction inversée ou
controblique, comme \ (binaire). Similaire :
controblique @code{\backslash} et aussi @code{\textbackslash} hors du
mode mathématique.

@item \sharp
@BES{♯,\sharp} Dièse (ordinaire).

@item \Sigma
@BES{Σ,\Sigma} Lettre grecque en capitale (ordinaire).

@item \sigma
@BES{σ,\sigma} Lettre grecque en bas de casse (ordinaire). La forme en
variante est @code{\varsigma} @BES{ς,\varsigma}.

@item \sim
@BES{∼,\sim} Similaire à, dans une relation (relation).

@item \simeq
@BES{≃,\simeq} Similaire ou égal à, dans une relation (relation).

@item \smallint
@BES{∫,\smallint} Signe intégrale qui ne change pas en taille plus
grande au sein d'une formule hors texte (opérateur).

@item \smile
@BES{⌣,\smile} Arc concave en haut, sourire (ordinaire).

@item \spadesuit
@BES{♠,\spadesuit} Pique de carte à jouer (ordinaire).

@item \sqcap
@BES{⊓,\sqcap} Symbole d'intersection carré (binaire). Similaire :
intersection @code{cap}.

@item \sqcup
@BES{⊔,\sqcup} Symbole d'union carré (binaire). Similaire :
union @code{\cup}. En relation avec : opérateur de taille
variable @code{\bigsqcup}.

@item \sqsubset
@BESU{⊏,sqsubset} Symbole carré de sous-ensemble (relation). Similaire :
sous-ensemble @code{\subset}. @value{NeedsAMSSymb}

@item \sqsubseteq
@BES{⊑,\sqsubseteq} Symbole carré de sous-ensemble ou égal
(binaire). Similaire : sous-ensemble ou égal @code{\subseteq}.

@item \sqsupset
@BESU{⊐,sqsupset} Symbole carré de sur-ensemble (relation). Similaire :
superset @code{\supset}. @value{NeedsAMSSymb}

@item \sqsupseteq
@BES{⊒,\sqsupseteq} Symbole carré de sur-ensemble ou égal
(binaire). Similaire : sur-ensemble ou égal @code{\supseteq}.

@item \star
@BES{⋆,\star} Étoile à cinq branches, quelquefois utilisée comme une
opération binaire générale mais quelquefois réservée pour la
corrélation croisée (binaire). Similaire : les
synonymes astérisque @code{*} et @code{\ast}, qui sont à six branches,
et apparaissent plus souvent comme indice supérieur et inférieur, comme
c'est le cas avec l'étoile de Kleene.

@item \subset
@BES{⊂,\subset} Est contenu (occasionnellement, est impliqué par) (relation).

@item \subseteq
@BES{⊆,\subseteq} Est contenu ou égal à (relation).

@item \succ
@BES{≻,\succ} Vient après, suit (relation). Similaire : inférieur
à @code{>}.

@item \succeq
@BES{⪰,\succeq} Suit ou est égal à (relation). Similaire : inférieur ou égal à @code{\leq}.

@item \sum
@BES{∑,\sum} Summation (opérateur). Similaire : Lettre grecque
capitale @code{\Sigma}.

@item \supset
@BES{⊃,\supset} Contient (relation).

@item \supseteq
@BES{⊇,\supseteq} Contient ou est égal à (relation).

@item \surd
@BES{√,\surd} Symbole racine (ordinaire).  La commande @LaTeX{}
@code{\sqrt@{..@}} compose la racine de l'argument, avec une barre qui
s'étend pour couvrir l'argument.

@item \swarrow
@BES{↙,\swarrow} Flèche pointant au sud-ouest (relation).

@item \tau
@BES{τ,\tau} Lettre grecque en bas de casse  (ordinaire).

@item \theta
@BES{θ,\theta} Lettre grecque en bas de casse (ordinaire). La forme en
variante est @code{\vartheta} @BES{ϑ,\vartheta}.

@item \times
@BES{×,\times} Signe de multiplication d'école primaire (binaire). Voir aussi @code{\cdot}.

@item \to
@BES{→,\to} Flèche en ligne simple vers la droite (relation).
Synonyme : @code{\rightarrow}.

@item \top
@BESU{⊤,top} Taquet vers le haut ; dessus, plus grand élément d'un
ensemble partiellement ordonné (ordinaire). Voir aussi @code{\bot}.

@item \triangle
@BES{△,\triangle} Triangle (ordinaire).

@item \triangleleft
@BES{◁,\triangleleft} Triangle non-rempli pointant à gauche
(binaire). Similaire : @code{\lhd}. Pour le symbole normal de
sous-groupe vous devez charger @file{amssymb} et
utiliser @code{\vartriangleleft} (qui est une relation et ainsi
donne un meilleur espacement).

@item \triangleright
@BES{▷,\triangleright} Triangle non-rempli pointant à droite
(binaire). Pour le symbole normal de sous-groupe vous devez à la place
charger @file{amssymb} et utiliser @code{\vartriangleright} (qui
est une relation et ainsi donne un meilleur espacement).

@item \unlhd
@BESU{⊴,unlhd} Pointe de flèche non-pleine soulignée pointant vers la
gauche, c.-à-d.@: triangle avec une ligne au-dessous
(binaire). @value{NeedsAMSSymb} Pour le symbole normal de sous-groupe
chargez @file{amssymb} et utilisez @code{\vartrianglelefteq} (qui est
une relation et ainsi donne un meilleur espacement).

@item \unrhd
@BESU{⊵,unrhd} Pointe de flèche non-pleine soulignée pointant vers la
droite, c.-à-d.@: triangle avec une ligne au-dessous
(binaire). @value{NeedsAMSSymb} Pour le symbole normal de sous-groupe
chargez @file{amssymb} et utilisez @code{\vartrianglerighteq} (qui est
une relation et ainsi donne un meilleur espacement).

@item \Uparrow
@BES{⇑,\Uparrow} Flèche vers le haut à ligne double
(relation). Similaire : flèche vers le haut à ligne
simple @code{\uparrow}.

@item \uparrow
@BES{↑,\uparrow} Single-line upward-pointing flèche, diverges (relation). Similaire :
double-line up-pointing flèche @code{\Uparrow}.

@item \Updownarrow
@BES{⇕,\Updownarrow} Double-line upward-and-downward-pointing flèche (relation). Similaire :
single-line upward-and-downward-pointing flèche @code{\updownarrow}.

@item \updownarrow
@BES{↕,\updownarrow} flèche haut et bas à ligne simple (relation). Similaire :
flèche haut et bas à ligne double @code{\Updownarrow}.

@item \upharpoonright
@BESU{↾,upharpoonright} Harpon vers le haut avec crochet à droite
(relation). Synonyme : @code{@backslashchar{}restriction}.
@value{NeedsAMSSymb}

@item \uplus
@BES{⊎,\uplus} Union de multiensemble, un symbole union avec un symbole
plus en son sein (binaire). Similaire : union @code{\cup}. En relation
avec : opérateur de taille variable @code{\biguplus}.

@item \Upsilon
@BES{Υ,\Upsilon} Lettre grecque en capitale (ordinaire).

@item \upsilon
@BES{υ,\upsilon} Lettre grecque en bas de casse  (ordinaire).

@item \varepsilon
@BES{ε,\varepsilon} Epsilon de ronde en bas de casse (ordinaire).  Plus
largement utilise en mathématique que la forme non variante epsilon
lunaire @code{\epsilon} @BES{ϵ,\epsilon}. En relation avec :
« appartient à » @code{\in}.

@item \vanothing
@BESU{∅,varnothing} Symbole ensemble vide. Similaire :
@code{\emptyset}. En relation avec :
@code{\revemptyset}. @value{NeedsAMSSymb}

@item \varphi
@BES{φ,\varphi} Variante de la lettre grecque bas de casse (ordinaire).
La forme non en variante est @code{\phi} @BES{ϕ,\phi}.

@item \varpi
@BES{ϖ,\varpi} Variante de la lettre grecque bas de casse (ordinaire).
La forme non en variante est @code{\pi} @BES{π,\pi}.

@item \varrho
@BES{ϱ,\varrho} Variante de la lettre grecque bas de casse (ordinaire).
La forme non en variante est @code{\rho} @BES{ρ,\rho}.

@item \varsigma
@BES{ς,\varsigma} Variante de la lettre grecque bas de casse
(ordinaire).  La forme non en variante est @code{\sigma} @BES{σ,\sigma}.

@item \vartheta
@BES{ϑ,\vartheta} Variante de la lettre grecque bas de casse
(ordinaire).  La forme non en variante est @code{\theta} @BES{θ,\theta}.

@item \vdash @BES{⊢,\vdash} Taquet droit ; prouve, implique ;
portillon/tourniquet ; barre verticale et un tiret
(relation). Similaire : portillon inversé @code{\dashv}.

@item \vee
@BES{∨,\vee} Ou logique ; une forme de v pointant vers le bas
(binaire). En relation avec : Et logique @code{\wedge}. Similaire :
Opérateur de taille variable @code{\bigvee}.

@item \Vert
@BES{‖,\Vert} Double barre verticale (ordinaire). Similaire : barre
verticale simple @code{\vert}.

@PkgIndex{mathtools}
Le paquetage @package{mathtools} vous permet de créer des commandes pour
des délimiteurs appairés.  Par ex., si vous mettez
@code{\DeclarePairedDelimiter\norm@{\lVert@}@{\rVert@}} dans votre 
préambule, ceci vous donne trois variantes de commande pour faire des
barres verticales correctement espacées horizontalement : si dans le
corps du document vous écrivez la version étoilée
@code{$\norm*@{M^\perp@}$} alors la hauteur des barres verticales
correspond à celle de l'argument, alors qu'avec @code{\norm@{M^\perp@}}
les barres ne grandissent pas avec la hauteur de l'argument mais à la
place reste de la hauteur par défaut, et
@code{\norm[@var{commande-taille}]@{M^\perp@}} donne aussi des barres
qui ne grandissent pas mais sont de la taille donnée dans la
@var{commande-taille}, par ex.@: @code{\Bigg}.

@item \vert
@BES{|,\vert} Barre verticale simple (ordinaire). Similaire : barre à
double-ligne verticale @code{\Vert}. Pour usage tel qu'au sein de la
définition d'un ensemble, utilisez @code{\mid} parce que c'est une
relation.

@c xx TODO revoir la trad.
Pour une valeur absolue vous pouvez utiliser le paquetage
@package{mathtools} et ajouter
@code{\DeclarePairedDelimiter\abs@{\lvert@}@{\rvert@}} à votre
préambule. Ceci vous donne trois variantes de commande pour les barres
simples verticales qui sont correctement espacées verticalement : si
dans le corps du document vous écrivez la version étoilée
@code{$\abs*@{\frac@{22@}@{7@}@}$} alors la hauteur des barres
verticales correspond à la hauteur de l'argument, alors qu'avec
@code{\abs@{\frac@{22@}@{7@}@}} les barres ne grandissent pas avec
l'argument mais à la place sont de la hauteur par défaut, et
@code{\abs[@var{commande-taille}]@{\frac@{22@}@{7@}@}} donne aussi des
barres qui ne grandissent pas mais qui sont réglées à la taille donnée
par la @var{commande-taille}, par ex.@: @code{\Bigg}.

@item \wedge
@BES{∧,\wedge} Et logique (binaire).  Synonyme : @code{\land}.  Voir aussi
ou logique @code{\vee}. Similaire : opérateur de taille variable @code{\bigwedge}.

@item \wp
@BES{℘,\wp} « p » de @identity{Weierstrass}, fonction elliptique de
@identity{Weierstrass} (ordinaire).

@item \wr
@BES{≀,\wr} Produit couronne (binaire).

@item \Xi
@BES{Ξ,\Xi} Lettre grecque en capitale (ordinaire).

@item \xi
@BES{ξ,\xi} Lettre grecque en bas de casse  (ordinaire).

@item \zeta
@BES{ζ,\zeta} Lettre grecque en bas de casse  (ordinaire).

@end ftable

Les symboles suivants sont utilisés le plus souvent en texte simple mais
@LaTeX{} fourni des versions pour être utilisés dans du texte
mathématique.

@ftable @code
@item \mathdollar
Signe dollar en mode mathématique : $.

@item \mathparagraph
Signe paragraphe (pied-de-mouche) en mode mathématique : @BES{¶,\P}.

@item \mathsection
Signe section en mode mathématique :  @BES{§,\S}.

@item \mathsterling
Signe livre sterling mode mathématique : @pounds{}.

@item \mathunderscore
Signe « souligné » en mode mathématique : _.

@end ftable

@menu
* Arrows::                     Liste de flèches.
* \boldmath & \unboldmath::    Symboles en caractères gras.
* Blackboard bold::            Caractères évidés.
* Calligraphic::               Caractères scripts.
* Delimiters::                 Parenthèses, accolades, etc.
* Dots::                       Points de suspension, etc.
* Greek letters::              Liste des lettres grecques.
@end menu


@node Arrows
@subsection Flèches

@cindex flèches
@cindex symboles, flèches
@findex math, flèches

@PkgIndex{amsfonts}
@PkgIndex{latexsym}
Voici les flèches disponibles en standard avec @LaTeX{}.  Les paquetages
@package{latexsym} et @package{amsfonts} en contiennent beaucoup plus.

@multitable  @columnfractions .10 .40 .50
@headitem Symbole@tab Commande@tab   
@item
@BES{⇓,\Downarrow} @tab @code{\Downarrow} @tab
@item
@BES{↓,\downarrow} @tab @code{\downarrow} @tab
@item      
@BES{↩,\hookleftarrow} @tab @code{\hookleftarrow} @tab
@item  
@BES{↪,\hookrightarrow} @tab @code{\hookrightarrow} @tab
@item    
@BES{←,\leftarrow} @tab @code{\leftarrow} @tab
@item      
@BES{⇐,\Leftarrow} @tab @code{\Leftarrow} @tab
@item      
@BES{⇔,\Leftrightarrow} @tab @code{\Leftrightarrow} @tab
@item 
@BES{↔,\leftrightarrow} @tab @code{\leftrightarrow} @tab
@item 
@BES{⟵,\longleftarrow} @tab @code{\longleftarrow} @tab
@item     
@BES{⟸,\Longleftarrow} @tab @code{\Longleftarrow} @tab
@item     
@BES{⟷,\longleftrightarrow} @tab @code{\longleftrightarrow} @tab
@item
@BES{⟺,\Longleftrightarrow} @tab @code{\Longleftrightarrow} @tab
@item
@BES{⟼,\longmapsto} @tab @code{\longmapsto} @tab
@item        
@BES{⟹,\Longrightarrow} @tab @code{\Longrightarrow} @tab
@item    
@BES{⟶,\longrightarrow} @tab @code{\longrightarrow} @tab
@item    
@BES{↦,\mapsto} @tab @code{\mapsto} @tab
@item            
@BES{↗,\nearrow} @tab @code{\nearrow} @tab 
@item    
@BES{↖,\nwarrow} @tab @code{\nwarrow} @tab
@item     
@BES{⇒,\Rightarrow} @tab @code{\Rightarrow} @tab
@item  
@BES{→,\rightarrow} @tab @code{\rightarrow}, or @code{\to} @tab
@item  
@BES{↘,\searrow} @tab @code{\searrow} @tab
@item     
@BES{↙,\swarrow} @tab @code{\swarrow} @tab
@item     
@BES{↑,\uparrow} @tab @code{\uparrow} @tab
@item     
@BES{⇑,\Uparrow} @tab @code{\Uparrow} @tab
@item     
@BES{↕,\updownarrow} @tab @code{\updownarrow} @tab
@item 
@BES{⇕,\Updownarrow} @tab @code{\Updownarrow} @tab
@end multitable

Un exemple de la différence entre @code{\to} et @code{\mapsto} est :
@code{\( f\colon D\to C \) given by \( n\mapsto n^2 \)}.

@PkgIndex{amscd}
@PkgIndex{tikz-cd}
Pour faire des diagrammes cumulatifs il y a de nombreux paquetages, parmi lesquels
@package{tikz-cd} et @package{amscd}.


@node \boldmath & \unboldmath
@subsection @code{\boldmath} & @code{\unboldmath}

@anchor{\boldmath}
@anchor{\unboldmath}
@findex \boldmath
@findex \unboldmath
@cindex gras, caractères, en mathématiques
@cindex symboles, en caractères gras

Synopsis (utilisés en mode paragraphe ou mode LR) :

@example
\boldmath \( @var{math} \)
@end example

@noindent
ou

@example
\unboldmath \( @var{math} \)
@end example

@findex \boldmath
@findex \unboldmath
Ce sont des déclarations pour mettre en caractères gras les lettres et
symboles dans @var{math}, ou pour contredire cela et revenir à la
graisse normale (non-gras) utilisée par défaut. Elles ne doivent être
utilisées ni en mode math, ni en mode math hors texte
(@pxref{Modes}). Les deux commandes sont fragiles (@pxref{\protect}).

Voici un exemple dans lequel chaque commande @code{\boldmath} a lieu au
sein d'une @code{\mbox} :

@example
on a $\mbox@{\boldmath \( v \)@} = 5\cdot\mbox@{\boldmath \( u \)$@}$
@end example

@noindent
ce qui signifie que @code{\boldmath} est seulement utilisé dans un mode
texte, en l'occurrence le mode LR, et explique pourquoi @LaTeX{} doit
basculer en mode math pour composer @code{v} et @code{u}.

Si vous utilisez l'une ou l'autre des ces commande en mode math, comme
dans @code{Échec : \( \boldmath x \)}, alors vous obtenez quelque chose du
genre de @samp{LaTeX Font Warning: Command \boldmath invalid in math
mode on input line 11} et @samp{LaTeX Font Warning: Command \mathversion
invalid in math mode on input line 11}.

@PkgIndex{bm}
La commande @code{\boldmath} est problématique par bien des aspects. Les
nouveaux documents devraient utiliser le paquetage @package{bm} fourni
par l'équipe du projet @LaTeX{}.  Une description complète est hors du
champ d'application de ce manuel (voir la documentation complète sur le
CTAN) mais même le petit exemple suivant :

@example
\usepackage@{bm@}   % dans le préambule
...
on a $\bm@{v@} = 5\cdot\bm@{u@}$
@end example

@noindent
illustre déjà que c'est une amélioration par rapport à @code{\boldmath}.


@node Blackboard bold
@subsection Pseudo-gras avec des lettres évidées

@cindex évidées, lettres
@cindex évidées, lettres grasses

Synopsis :

@example
\usepackage@{amssymb@}   % dans le préambule
  ... 
\mathbb@{@var{lettre-capitale}@}
@end example

Fournit les lettres mathématiques évidées utilisées traditionnellement
pour noter les noms d'ensembles, comme les entiers naturels, relatifs,
etc.
@c { Dans la version française seulement
Le nom @code{\mathbb} vient de « @identity{@b{b}lackboard @b{b}old @b{math}} »
qu'on pourrait traduire par @dfn{caractères mathématiques gras
scolaires}.
@c }

Dans l'exemple suivant :

@example
\( \forall n \in \mathbb@{N@}, n^2 \geq 0 \)
@end example

@noindent
le @code{\mathbb@{N@}} donne le symbole gras scolaire
@BES{ℕ,\mathbbN}, représentant les entiers naturels.

Si vous utilisez autre chose qu'une lettre capitale alors aucune erreur
n'est produite, mais vous obtiendrez des résultats étranges, y compris
des caractères inattendus.

Il y a des paquetages donnant accès à des symboles autres que les lettres
capitales ; voir sur le CTAN.


@node Calligraphic
@subsection Math Calligraphic

@c French version only:
@c Discuté avec J-C. Carpentier sur fctt https://groups.google.com/g/fr.comp.text.tex/c/ZeRGngp0XkA/m/rRuNhtAZDQAJ
@c - « scripte » au lieu de « simili-scripte » (« script-like » en anglais)
@c - N'utilise pas le terme « cursive »
@c - Introduit le terme « Math Calligraphic » pour désigner la fonte
@cindex calligraphique, fontes
@cindex scriptes, fontes
@cindex fontes scriptes mathématiques

Synopsis :

@example
\mathcal@{@var{lettres-capitales}@}
@end example

@cindex Math Calligraphic
Utilise une fonte scripte, @dfn{Math Calligraphic}.

Dans l'exemple suivant l'identificateur du graphe est produit en sortie
avec la fonte Math Calligraphic :

@example
Soit un graphe \( \mathcal@{G@} \).
@end example

Si vous utilisez autre chose que des lettres capitales alors vous
n'aurez pas une erreur mais vous n'aurez pas non plus une sortie en
calligraphique math. Par exemple, @code{\mathcal@{g@}} produit en sortie
une accolade fermante.


@node Delimiters
@subsection Délimiteurs

@cindex délimiteurs
@cindex parenthèses
@cindex crochets
@cindex accolades

Les délimiteurs sont les parenthèses, accolades, crochets, ou autres
caractères utilisés pour marquer le début et la fin d'une
sous-formule. Dans l'exemple suivant la formule a trois ensembles de
parenthèses délimitant les trois sous-formules :

@example
(z-z_0)^2 = (x-x_0)^2 + (y-y_0)^2
@end example

@noindent
Il n'est pas nécessaire que les délimiteurs se correspondent, ainsi vous
pouvez saisir @code{\( [0,1) \)}.

Voici les délimiteurs usuels :

@multitable  @columnfractions .14 .26 .49 .12
@headitem Délimiteur@tab Commande@tab Nom
@item
( @tab @code{(} @tab Parenthèse gauche
@item
) @tab @code{)} @tab Parenthèse droite
@item
\@} @tab @code{@{} ou @code{\lbrace} @tab Accolade gauche
@item
\@{ @tab @code{@}} ou @code{\rbrace} @tab Accolade droite
@item
[ @tab @code{[} ou @code{\lbrack} @tab Crochet gauche
@item
] @tab @code{]} ou @code{\rbrack} @tab Crochet droit
@item
@BES{⌊,\lfloor} @tab @code{\lfloor} @tab Crochet gauche de partie
entière
@item
@BES{⌋,\rfloor} @tab @code{\rfloor} @tab Crochet droit de partie entière
@item
@BES{⌈,\lceil} @tab @code{\lceil} @tab Crochet gauche d'arrondi supérieur
@item
@BES{⌉,\rceil} @tab @code{\rceil} @tab Crochet droit d'arrondi supérieur
@item
@BES{⟨,\langle} @tab @code{\langle} @tab Chevron gauche
@item
@BES{⟩,\rangle} @tab @code{\rangle} @tab Chevron droit
@item
/  @tab @code{/} @tab Oblique, ou oblique vers l'avant
@item
\ @tab @code{\backslash} @tab Controblique, ou oblique vers l'arrière
@item
| @tab @code{|} ou @code{\vert} @tab Barre verticale
@item
@BES{‖,\|} @tab @code{\|} ou @code{\Vert} @tab Barre verticale double
@end multitable

@PkgIndex{mathtools}
Le paquetage @package{mathtools} vous permet de créer des commandes pour
des délimiteurs appairés. Par ex., si vous mettez
@code{\DeclarePairedDelimiter\abs@{\lvert@}@{\rvert@}} dans votre
préambule alors cela vous donne deux commandes pour les barres simples
verticales (qui ne fonctionnent qu'en mode math). La forme étoilée,
comme dans @code{\abs*@{\frac@{22@}@{7@}@}}, a la hauteur des barres
verticales accordée à la hauteur de l'argument. La forme non-étoilée,
comme dans @code{\abs@{\frac@{22@}@{7@}@}}, a les barres fixées à la
hauteur par défaut. Cette forme accepte un argument optionnel, comme
dans @code{\abs[@var{commande-taille}]@{\frac@{22@}@{7@}@}}, où la
taille des barres est donnée par la @var{commande-taille}, par ex.@:
@code{\Bigg}. En utilisant plutôt @code{\lVert} et @code{\rVert} pour
les symboles, vous obtenez une notation de norme avec le même
comportement.

@menu
* \left & \right::      Délimiteurs de taille réglée automatiquement.
* \bigl & \bigr etc.::  Délimiteurs de taille réglée manuellement.
@end menu


@node \left & \right
@subsubsection @code{\left} & @code{\right}

@anchor{\left}
@anchor{\right}
@findex \left
@findex \right
@cindex délimiteurs appairés
@cindex appairés, délimiteurs
@cindex correspondantes, parenthèses
@cindex correspondants, crochets
@cindex délimiteur nul
@cindex nul, délimiteur

@c Credit: SE userPhilipp https://tex.stackexchange.com/a/12793

Synopsis :

@example
\left @var{délimiteur1} ... \right @var{délimiteur2}
@end example

Fabrique des parenthèses, crochets, ou autres délimiteurs qui se
correspondent.  @LaTeX{} fabrique les délimiteurs juste assez hauts pour
couvrir la taille de la formule qu'ils embrassent.

L'exemple suivant fabrique un vecteur unitaire entouré par des
parenthèses assez hautes pour couvrir les composantes :

@example
\begin@{equation@}
  \left(\begin@{array@}@{c@}
    1   \\
    0   \\
  \end@{array@}\right)
\end@{equation@}
@end example

@xref{Delimiters}, pour une liste des délimiteurs usuels.

Chaque @code{\left} doit avoir un @code{\right} qui lui correspond.
Dans l'exemple plus haut, si on ne met pas le @code{\left(} alors on a
le message d'erreur @samp{Extra \right}.  Si c'est le @code{\right)}
qu'on ne met pas, alors on obtient @samp{You can't use `\eqno' in math
mode}.

@PkgIndex{amsmath}
@PkgIndex{mathtools}
Toutefois, il n'est pas nécessaire que @var{délimiteur1} et
@var{délimiteur2} se correspondent.  Un cas usuel est que vous désiriez
une accolade d'un seul côté, comme ci-dessous. Utilisez un point,
@samp{.}, comme @dfn{délimiteur nul} :

@example
\begin@{equation@}
  f(n)=\left\@{\begin@{array@}@{ll@}
                1             &\mbox@{si \(n=0\)@} \\
                f(n-1)+3n^2   &\mbox@{sinon@}       
       \end@{array@}\right.
\end@{equation@}
@end example

@noindent
Notez que pour obtenir une accolade comme délimiteur vous devez la
préfixer d'une controblique, @code{\@{} (@pxref{Reserved characters}).
(Les paquetages @package{amsmath} et @package{mathtools} vous permettent
d'obtenir la construction ci-dessus avec un environnement
@code{cases}).

La paire @code{\left ... \right} fabrique un groupe. Une conséquence de
cela est que la formule embrassée par la paire @code{\left ... \right}
ne peut pas avoir de saut de ligne dans la sortie.  Ceci inclut à la
fois les sauts de lignes manuels, et ceux générés automatiquement par
@LaTeX{}.  Dans l'exemple suivant, @LaTeX{} insère un saut de ligne pour
que la formule tienne entre les marges :

@example
Lorem ipsum dolor sit amet
\( (a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z) \)
@end example

@noindent
Mais avec @code{\left} et @code{\right} :

@example
Lorem ipsum dolor sit amet
\( \left(a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\right) \)
@end example

@noindent
@LaTeX{} n'insère pas de saut, ce qui a pour effet que la formule
s'étende jusque dans la marge.

Parce que @code{\left ... \right} fait un groupe, toutes les règles
habituelles concernant les groupes s'appliquent. Ci-dessous, la valeur de
@code{\testlength} réglée au sein de l'équation sera oubliée, en et
sortie on a @samp{1.2pt}.

@example
\newlength@{\testlength@} \setlength@{\testlength@}@{1.2pt@}
\begin@{equation@}
  \left( a+b=c \setlength@{\testlength@}@{3.4pt@} \right)
  \the\testlength
\end@{equation@}
@end example

La paire @code{\left ... \right} affecte l'espacement horizontal de la
formule embrassée de deux manières. La première est que dans @code{\(
\sin(x) = \sin\left(x\right) \)} le membre de droite a plus d'espace
autour du @code{x}.  C'est parce que @code{\left( ... \right)} insère un
nœud interne alors que @code{( ... )} insère un nœud ouvrant.  La
seconde manière dont l'espacement horizontal est affecté est que parce
que la paire forme un groupe, la sous-formule embrassée sera composée à
sa longueur naturelle, sans dilatation ni contraction pour que la ligne
s'ajuste mieux.

@TeX{} dilate les délimiteurs selon la hauteur et profondeur de la
formule embrassée.  Ci-dessous @LaTeX{} fait grandir les crochets pour
qu'ils s'étendent sur toute la hauteur de l'intégrale :

@example
\begin@{equation@}
  \left[ \int_@{x=r_0@}^@{\infty@} -G\frac@{Mm@}@{r^2@}\, dr \right] 
\end@{equation@}
@end example

Régler la taille manuellement donne souvent un meilleur résultat. Par
exemple, bien que le filet ci-dessous ait une profondeur nulle, @TeX{}
crée des délimiteurs qui s'étendent sous le filet :

@example
\begin@{equation@}
  \left( \rule@{1pt@}@{1cm@} \right)
\end@{equation@}
@end example

@noindent
@TeX{} peut choisir des délimiteurs qui sont trop petits, comme dans
@code{\( \left| |x|+|y| \right| \)}.  Il peut aussi en choisir de trop
grand, comme ci-dessous :

@example
\begin@{equation@}
  \left( \sum_@{0\leq i<n@} i^k \right)
\end@{equation@}
@end example

@noindent
Un troisième cas malheureux c'est quand on a une formule hors texte
longue tenant sur plus d'une ligne et que vous devez accorder les
tailles du délimiteur ouvrant et fermant ; vous ne pouvez pas utiliser
@code{\left} sur la première ligne et @code{\right} sur la dernière
parce qu'ils doivent se correspondre.

Pour régler manuellement la taille des délimiteurs, voir @ref{\bigl &
\bigr etc.}.


@node \bigl & \bigr etc.
@subsubsection @code{\bigl}, @code{\bigr}, etc.

@anchor{\bigl}
@anchor{\bigr}
@findex \bigl
@findex \bigr

Synopsis, l'un parmi :

@example
\bigl@inlinefmt{info,@tie{}}@var{délimiteur1} ... \bigr@inlinefmt{info,@tie{}}@var{délimiteur2}
\Bigl@inlinefmt{info,@tie{}}@var{délimiteur1} ... \bigr@inlinefmt{info,@tie{}}@var{délimiteur2}
\biggl@inlinefmt{info,@tie{}}@var{délimiteur1} ... \biggr@inlinefmt{info,@tie{}}@var{délimiteur2}
\Biggl@inlinefmt{info,@tie{}}@var{délimiteur1} ... \Biggr@inlinefmt{info,@tie{}}@var{délimiteur2}  
@end example

@noindent
(comme dans @code{\bigl[...\bigr]} ; strictement parlant il n'est pas
nécessaire qu'ils soient appairés, voir ci-dessous), ou l'un parmi :

@example
\bigm@inlinefmt{info,@tie{}}@var{délimiteur}
\Bigm@inlinefmt{info,@tie{}}@var{délimiteur}
\biggm@inlinefmt{info,@tie{}}@var{délimiteur}
\Biggm@inlinefmt{info,@tie{}}@var{délimiteur}
@end example

@noindent
(comme avec @code{\bigm|}), ou l'un parmi :

@example
\big@inlinefmt{info,@tie{}}@var{délimiteur}
\Big@inlinefmt{info,@tie{}}@var{délimiteur}
\bigg@inlinefmt{info,@tie{}}@var{délimiteur}
\Bigg@inlinefmt{info,@tie{}}@var{délimiteur}
@end example

@noindent
(comme avec @code{\big[}).

Produit des délimiteurs de taille réglée manuellement.  Pour des
délimiteurs de taille réglée automatiquement voir @ref{\left & \right}).

L'exemple ci-dessous produit des barres verticales externes légèrement
plus grandes :

@example
  \bigl| |x|+|y| \bigr|
@end example

Les commandes ci-dessus sont dans l'ordre des tailles croissantes.  Vous
pouvez utiliser la taille la plus petite comme @code{\bigl...\bigr} dans
un paragraphe sans que cela ait pour effet que @LaTeX{} écarte les
lignes. Les tailles plus grandes sont destinées aux équations hors
texte.

@xref{Delimiters}, pour une liste des délimiteurs usuels.  Dans la
famille des commandes en @samp{l} ou @samp{r}, il n'est pas nécessaire
que @var{délimiteur1} et @var{délimiteur2} se correspondent.

Les commandes en @samp{l} ou @samp{r} produisent délimiteurs ouvrant et
fermant qui n'insèrent aucun espace horizontal entre un atome précédent
et le délimiteur, alors que les commandes sans @samp{l} ou @samp{r}
insèrent un peut d'espace (parce que chaque délimiteur est réglé comme
une variable ordinaire).  Comparez les deux lignes dans l'exemple
ci-dessous :

@c credit: Martin Heller https://tex.stackexchange.com/a/1234 
@example
\begin@{tabular@}@{l@}
  \(\displaystyle \sin\biggl(\frac@{1@}@{2@}\biggr) \)  \\  % bon
  \(\displaystyle \sin\bigg(\frac@{1@}@{2@}\bigg)  \)   \\  % mauvais
\end@{tabular@}
@end example

@noindent
La gestion typographique traditionnelle est sur la première ligne. Sur
la seconde ligne la sortie a de l'espace supplémentaire entre le
@code{\sin} et la parenthèse ouvrante.

Les commandes sans @samp{l} ou @samp{r} donnent cependant l'espacement
correct dans certaines circonstances, comme avec la grande ligne
verticale dans l'exemple ci-dessous :

@example
\begin@{equation@}
  \int_@{x=a@}^b x^2\,dx = \frac@{1@}@{3@} x^3 \Big|_@{x=a@}^b
\end@{equation@}
@end example

@PkgIndex{amsmath}
@noindent
(beaucoup d'auteurs préfèrent remplacer @code{\frac} par la commande
@code{\tfrac} du paquetage @package{amsmath}), et comme avec cette
grande oblique :

@example
\begin@{equation@}
  \lim_@{n\to\infty@}\pi(n) \big/ (n/\log n) = 1
\end@{equation@}
@end example

Contrairement à la paire @code{\left...\right} (@pxref{\left & \right}),
les commandes décrites ici et en @samp{l} ou @samp{r} ne forment pas
un groupe. Strictement parlant il n'est pas nécessaire qu'elles soient
appairées, et donc vous pourriez écrire quelque chose du ce genre :

@example
\begin@{equation@}
  \Biggl[ \pi/6 ] 
\end@{equation@}
@end example

Les commandes en @samp{m} sont pour les relations, les choses qui sont
au milieu d'une formule, comme ceci :

@example
\begin@{equation@}
  \biggl\@{ a\in B \biggm| a=\sum_@{0\leq i<n@}3i^2+4 \biggr\@}
\end@{equation@}  
@end example

@c xx Add discussion \bigg\mid not being good
@c and \bigg| being right; maybe mention of \middle and braket package?


@node Dots
@subsection Points de suspensions, horizontaux ou verticaux

@cindex points de suspension

Les points de suspension sont les trois points (habituellement trois)
indiquant qu'un motif se prolonge.

@example
\begin@{array@}@{cccc@}
  a_@{0,0@}    &a_@{0,1@}   &a_@{0,2@} &\ldots \\
  a_@{1,0@}    &\ddots                     \\
  \vdots
\end@{array@}
@end example

@LaTeX{} fournit ces types de points de suspension :

@ftable @code
@anchor{ellipses cdots}
@item \cdots


Des points de suspension horizontaux élevés au centre de la ligne, comme
dans @BES{⋯,\cdots}.  Utilisés comme dans : @code{\( a_0\cdot a_1\cdots
a_@{n-1@} \)}.

@anchor{ellipses ddots}
@item \ddots
Des points de suspension en diagonale, @BES{⋱,\ddots}.  Voir l'exemple
plus haut d'un tableau @code{array} pour une utilisation.

@anchor{ellipses ldots}
@item \ldots
Points de suspension sur la ligne de base, @BES{…,\ldots}.  Utilisés
comme dans : @code{\( x_0,\ldots x_@{n-1@} \)}.  Un autre exemple est le
tableau @code{array} donné plus haut. Un synonyme est
@code{\mathellipsis}.  Un synonyme du paquetage @package{amsmath} est
@code{\hdots}.

Vous pouvez également utiliser cette commande au-dehors du mode math,
comme dans @code{La boîte de vitesse, les freins, \ldots@{@} tout est
cassé}.  (En mode paragraphe ou en mode LR un synonyme de @code{\ldots}
est @code{\dots}).

@anchor{ellipses vdots}
@item \vdots
Points de suspension alignés verticalement, @BES{⋮,\vdots}.  Voir
l'exemple plus haut avec un @code{array} pour une utilisation possible.

@end ftable

@PkgIndex{amsmath}
Le paquetage @package{amsmath} a la commande @code{\dots} pour baliser
sémantiquement les points de suspension. L'exemple suivant produit deux
sorties d'aspects distincts pour les deux premiers usages de la commande
@code{\dots}.

@example
\usepackage@{amsmath@}  % dans le préambule
  ...
Supposons que \( p_0, p_1, \dots, p_@{n-1@} \) soit la liste de tous les nombres premiers.
On remarque que \( p_0\cdot p_1 \dots \cdot p_@{n-1@} +1 \) n'est pas un
multiple de l'un quelconque des \( p_i \).
Conclusion : il y a un nombre infini de nombres premiers \( p_0, p_1, \dotsc \).
@end example

@noindent
Dans la première ligne @LaTeX{} regarde la virgule suivant @code{\dots}
pour déterminer qu'il devrait produire en sortie des points de
suspension sur la ligne de base. La seconde ligne a un @code{\cdot} qui
suit @code{\dots} alors @LaTeX{} produit des points de suspension sur
l'axe mathématique, verticalement centrés.  Toutefois, le troisième
usage n'a aucun caractère de suivi, aussi vous devez indiquer à @LaTeX{}
que faire.  Vous pouvez utiliser l'une des commandes : @code{\dotsc} si
vous avez besoin de points de suspension
 appropriés pour suivre une
virgule, @code{\dotsb} si vous avez des points de suspension qui
conviennent quand il y a ensuite un opérateur ou un symbole de relation,
@code{\dotsi} pour les points de suspension utilisés avec des
intégrales, ou @code{\dotso} pour les autres cas.


@node Greek letters
@subsection Lettres grecques

@cindex grecques, lettres
@cindex lettres grecques


On ne donne les versions en capitale de ces lettres grecques que lorsque
elle sont distinctes des lettres romaines capitales.

@multitable  @columnfractions .10 .30 .15 .45
@headitem Symbole@tab Commande@tab Nom@tab  
@item
@BES{α,\alpha}@tab @code{\alpha}@tab Alpha
@item
@BES{β,\beta}@tab  @code{\beta}@tab Bêta
@item
@BES{γ,\gamma}, @BES{Γ,\Gamma}@tab @code{\gamma}, @code{\Gamma}@tab Gamma
@item
@BES{δ,\delta}, @BES{Δ,\Delta}@tab @code{\delta}, @code{\Delta}@tab Delta
@item
@BES{ε,\varepsilon}, @BES{ϵ,\epsilon}@tab
  @code{\varepsilon}, @code{\epsilon}@tab Epsilon
@item
@BES{ζ,\zeta}@tab @code{\zeta}@tab Zêta
@item
@BES{η,\eta}@tab @code{\eta}@tab Êta
@item
@BES{θ,\theta}, @BES{ϑ,\vartheta}@tab @code{\theta}, @code{\vartheta}@tab
  Thêta
@item
@BES{ι,\iota}@tab @code{\iota}@tab Iota
@item
@BES{κ,\kappa}@tab @code{\kappa}@tab Kappa
@item
@BES{λ,\lambda}, @BES{Λ,\Lambda}@tab @code{\lambda}, @code{\Lambda}@tab
  Lambda
@item
@BES{μ,\mu}@tab @code{\mu}@tab Mu
@item
@BES{ν,\nu}@tab @code{\nu}@tab Nu
@item
@BES{ξ,\xi}, @BES{Ξ,\Xi}@tab @code{\xi}, @code{\Xi}@tab Xi
@item
@BES{π,\pi}, @BES{Π,\Pi}@tab @code{\pi}, @code{\Pi}@tab Pi
@item
@BES{ρ,\rho}, @BES{ϱ,\varrho}@tab @code{\rho}, @code{\varrho}@tab Rhô
@item
@BES{σ,\sigma}, @BES{Σ,\Sigma}@tab @code{\sigma}, @code{\Sigma}@tab Sigma
@item
@BES{τ,\tau}@tab @code{\tau}@tab Tau
@item
@BES{ϕ,\phi}, @BES{φ,\varphi}, @BES{Φ,\Phi}@tab
  @code{\phi}, @code{\varphi}, @code{\Phi}@tab Phi
@item
@BES{χ,\chi}@tab @code{\chi}@tab chi
@item
@BES{ψ,\psi}, @BES{Ψ,\Psi}@tab @code{\psi}, @code{\Psi}@tab Psi
@item
@BES{ω,\omega}, @BES{Ω,\Omega}@tab @code{\omega}, @code{\Omega}@tab Oméga
@end multitable

@PkgIndex{unicode-math}
Pour omicron, si vous utiliser la fonte par défaut de @LaTeX{} Computer
Modern alors saisissez omicron juste comme @samp{o} ou @samp{O}.  Si
vous désirez avoir le nom ou si votre fonte affiche une différence alors
vous pouvez utiliser quelque chose du genre de
@code{\newcommand\omicron@{o@}}.  Le paquetage @package{unicode-math}
comprend @code{\upomicron} pour un omicron droit et @code{\mitomicron}
pour l'italique mathématique.

Alors que le symbole de relation d'appartenance à un ensemble
@BES{∈,\in} généré par @code{\in} est similaire à epsilon, il n'est
jamais utilisé pour une variable.


@node Math functions
@section Fonctions mathématiques
@cindex fonctions mathématiques
@cindex math, fonctions

En mode mathématique ces commandes produisent des noms de fonction en
police romaine et avec l'espacement adéquat.

@ftable @code
@item \arccos
Arccosinus, cosinus inverse
@iftex
@math{\arccos}
@end iftex

@item \arcsin
Arcsinus, sinus inverse
@iftex
@math{\arcsin}
@end iftex

@item \arctan
Arctangente, tangente inverse
@iftex
@math{\arctan}
@end iftex

@item \arg
Angle entre l'axe des réels et un point dans le plan complexe
@iftex
@math{\arg}
@end iftex

@item \bmod
Opérateur modulo binaire, utilisé comme dans @code{\( 5\bmod 3=2 \)}
@iftex
@math{5 \bmod 3 = 2}
@end iftex

@item \cos
Cosinus
@iftex
@math{\cos}
@end iftex

@item \cosh
Cosinus hyperbolique
@iftex
@math{\cosh}
@end iftex

@item \cot
Cotangente
@iftex
@math{\cot}
@end iftex

@item \coth
Cotangente hyperbolique
@iftex
@math{\coth}
@end iftex

@item \csc
Cosécante
@iftex
@math{\csc}
@end iftex

@item \deg
Degrés
@iftex
@math{\deg}
@end iftex

@item \det
Déterminant
@iftex
@math{\det}
@end iftex

@item \dim
Dimension
@iftex
@math{\dim}
@end iftex

@item \exp
Exponentielle
@iftex
@math{\exp}
@end iftex

@item \gcd
Plus grand commun diviseur
@iftex
@math{\gcd}
@end iftex

@item \hom
Homomorphisme
@iftex
@math{\hom}
@end iftex

@item \inf
Infimum
@iftex
@math{\inf}
@end iftex

@item \ker
Noyau
@iftex
@math{\ker}
@end iftex

@item \lg
Logarithme en base 2
@iftex
@math{\lg}
@end iftex

@item \lim
Limite
@iftex
@math{\lim}
@end iftex

@item \liminf
Limite inférieure
@iftex
@math{\liminf}
@end iftex

@item \limsup
Limite supérieure
@iftex
@math{\limsup}
@end iftex

@item \ln
Logarithme népérien
@iftex
@math{\ln}
@end iftex

@item \log
Logarithme
@iftex
@math{\log}
@end iftex

@item \max
Maximum
@iftex
@math{\max}
@end iftex

@item \min
Minimum
@iftex
@math{\min}
@end iftex

@item \pmod
Modulo parenthésé, comme dans @code{\( 5\equiv 2\pmod 3 \)}
@iftex
@math{5\equiv 2\pmod 3}
@end iftex

@item \Pr
Probabilité
@iftex
@math{\Pr}
@end iftex

@item \sec
Sécante
@iftex
@math{\sec}
@end iftex

@item \sin
Sinus
@iftex
@math{\sin}
@end iftex

@item \sinh
Sinus hyperbolique
@iftex
@math{\sinh}
@end iftex

@item \sup
@identity{Supremum}
@iftex
@math{\mathop {\rm sup}}
@end iftex
@ifnottex
sup
@end ifnottex
@c don't try to use \sup with dvi/pdf output since that turned into a
@c Texinfo command and it's not worth hassling with different versions
@c when it's just three roman letters anyway.

@item \tan
Tangente
@iftex
@math{\tan}
@end iftex

@item \tanh
Tangente hyperbolique
@iftex
@math{\tanh}
@end iftex

@end ftable

@PkgIndex{amsmath}
Le paquetage @package{amsmath} ajoute des amélioration à certaines de
ces commandes, et vous permet aussi de définir les vôtres propres. La
documentation complète est sur le CTAN, mais en un mot, vous pouvez
définir une opérateur identité avec
@code{\DeclareMathOperator@{\identity@}@{id@}} qui est comme ceux donnés
plus haut mais s'imprime en @samp{id}.  La forme étoilée
@code{\DeclareMathOperator*@{\op@}@{op@}} règle tout indice supérieur ou
inférieur pour être au-dessus et au-dessous, comme c'est la tradition
pour @code{\lim}, @code{\sup}, ou @code{\max}.

@node Math accents
@section Accents mathématiques
@cindex Accents mathématiques
@cindex math, accents

@LaTeX{} fournit diverse commandes pour produire des lettres accentuées en
math. Elles diffèrent de celles concernant les accents en texte normal
(@pxref{Accents}).

@ftable @code
@item \acute
@cindex accent aigu en math
@cindex math, accent aigu
Accent aigu mathématique
@iftex
@math{\acute{x}}.
@end iftex

@item \bar
@cindex accent barre suscrite en math
@cindex accent macron en math
@cindex math, accent barre suscrite
@cindex math, accent macron
Accent barre suscrite mathématique
@iftex
 @math{\bar{x}}
@end iftex

@item \breve
@cindex accent brève en math
@cindex math, accent brève
Accent brève mathématique
@iftex
@math{\breve{x}} 
@end iftex

@item \check
@cindex accent caron en math
@cindex accent h@'a@v{c}ek en math
Accent h@'a@v{c}ek (caron) mathématique
@iftex
@math{\check{x}} 
@end iftex

@item \ddot
@cindex accent tréma en math
@cindex accent diérèse en math
Accent diérèse (tréma) mathématique
@iftex
@math{\ddot{x}} 
@end iftex

@item \dot
@cindex accent point suscrit en math
@cindex math, accent point suscrit
Accent point suscrit mathématique
@iftex
@math{\dot{x}} 
@end iftex

@item \grave
@cindex accent grave en math
@cindex math, accent grave
Accent grave mathématique
@iftex
@math{\grave{x}} 
@end iftex

@item \hat
@cindex accent chapeau en math
@cindex accent circonflexe en math
Accent chapeau (circonflexe) mathématique
@iftex
@math{\hat{x}} 
@end iftex

@item \mathring
@cindex accent rond-en-chef en math
@cindex math, accent rond-en-chef
Accent rond-en-chef mathématique @c don't bother implementing in texinfo
@iftex
@ringaccent{x}
@end iftex

@item \tilde
@cindex accent tilde en math
Accent tilde mathématique
@iftex
@math{\tilde{x}} 
@end iftex

@item \vec
@cindex symbole vecteur en math
Symbole vecteur mathématique
@iftex
@math{\vec{x}} 
@end iftex

@item \widehat
@cindex chapeau large, accent, math
@cindex accent mathématique, chapeau large
Accent chapeau large mathématique
@iftex
@math{\widehat{x+y}}
@end iftex


@item \widetilde
@cindex tilde large, accent, math
@cindex accent mathématique, tilde large
Accent tilde mathématique
@iftex
@math{\widetilde{x+y}}
@end iftex

@end ftable

Quand on place un accent sur un i ou un j, la tradition est d'en
utiliser un sans point, @code{\imath} ou @code{jmath} (@pxref{Math
symbols}).


@menu
* \accent::                 Commande de bas niveau pour produire un caractère accentué.
@end menu


@node \accent
@subsection @code{\accent}
@findex \accent

Synopsis :

@example
\accent @var{numéro} @var{caractère}
@end example

Une commande primitive @TeX{} utilisée pour générer des caractères
accentués à partir de diacritiques et de lettres. Le diacritique est
sélectionné par @var{numéro}, un argument numérique, suivi par un
espace, et ensuite un argument @var{caractère} pour construire le
caractère accentué dans la fonte courante.

Voici les caractères @samp{e} accentués.

@example
\accent18 e
\accent20 e
\accent21 e
\accent22 e
\accent23 e
@end example

@noindent
Le premier a un accent grave, le second a un caron, le troisième une
brève, le quatrième un macron, et le dernier un rond-en-chef. Ce qui
donne è ě ĕ ē @iftexthenelse{@accent23 e,e̊}.

La position de l'accent est déterminée par la fonte au moment de sa
conception et ainsi le résultat de @code{\accent} peut différer d'une
fonte à l'autre. Dans @LaTeX{} il est préférable d'avoir des glyphes
pour les caractères accentués plutôt que de les construire en utilisant
@code{\accent}. Utiliser des glyphes qui contiennent déjà les caractères
accentués (comme dans le codage T1) permet d'obtenir une césure correcte
alors que @code{\accent} désactive la césure (spécifiquement avec le
codage de fonte OT1 dans lequel il n'y a pas de glyphe avec accent).

Optionnellement il peut y avoir un changement de fonte entre
@var{numéro} et @var{caractère}.  Notez aussi que cette commande règle
le paramètre @code{\spacefactor} à 1000 (@pxref{\spacefactor}).

Une caractéristique inévitable de certaines lettres cyrilliques et de la
majorité des lettres cyrilliques accentuées est qu'on doit les assembler
à partir de multiples éléments (accents, modificateurs, etc.) alors même
que @code{\accent} ne fournit qu'une combinaison entre une seul
diacritique et une seule lettre. Il y a aussi des cas où les accents
doivent apparaître entre des lettres que \accent ne prend pas en charge.
Il y a d'autres cas encore comme les lettres I et J dont les points au
dessus de leurs homologues en bas-de-casse entrent en conflit avec les
diacritiques suscrits. L'utilisation de la commande @code{\accent} dans
ces cas ne fonctionnera pas du fait qu'elle ne peut pas distinguer
entre capitales et bas-de-casse.

@node Over- and Underlining
@section Sur- et @identity{sous-ligner}

@cindex sur-ligner
@cindex souligner

@LaTeX{} fournit des commandes pour sur-ligner ou souligner, ou pour
placer des accolades au-dessous ou au-dessous d'une matière.

@ftable @code

@item \underline@{@var{texte}@}
A pour effet que @var{texte}, ce qui peut être ou non en mode
mathématique, soit souligné.
@ifset HAS-MATH
Le résultat de @code{\underline@{xyz@}} ressemble à cela : @math{\underline{xyz}}
@end ifset
La ligne est toujours sous le texte, en prenant en compte les jambages,
ainsi dans @code{\(\underline@{y@}\)} la ligne est plus bas que dans
@code{\(\underline@{x@}\)}.  Cette commande est fragile
(@pxref{\protect}).

@PkgIndex{ulem}
Notez que le paquetage @package{ulem} fait du soulignement en mode texte
et permet les sauts de ligne ainsi que plusieurs autres fonctionnalités.
Voir sa documentation sur le CTAN.  Voir aussi @ref{\hrulefill &
\dotfill} pour produire une ligne, pour des choses comme une signature.

@item \overline@{@var{texte}@}
Met une ligne horizontale au dessus de @var{texte}. Fonctionne en mode
mathématiques, et en dehors.  Par exemple, @code{\overline@{x+y@}}.
@ifset HAS-MATH
Le résultat ressemble à cela : @math{\overline{x+y}}.
@end ifset
Notez que cette commande diffère de @code{\bar} (@pxref{Math accents}).

@c xx TODO mentionner le paquetage abraces
@item \underbrace@{@var{math}@}
Met une accolade au-dessous de @var{math}. Par exemple, le code
@code{(1-\underbrace@{1/2)+(1/2@}-1/3)} met en vedette la partie qui
s'annule.
@ifset HAS-MATH
Le résultat ressemble à cela : @math{(1-\underbrace{1/2)+(1/2}-1/3)}.
@end ifset
Attachez du texte à l'accolade en utilisant la commande indice
inférieur, @code{_}, ou indice supérieur, @code{^}, comme ci-dessous :

@example
\begin@{displaymath@}
  1+1/2+\underbrace@{1/3+1/4@}_@{>1/2@}+
       \underbrace@{1/5+1/6+1/7+1/8@}_@{>1/2@}+\cdots
\end@{displaymath@}
@end example

L'indice supérieur apparaît au-dessus de l'expression, aussi il peut
sembler sans relation avec l'accolade du dessous.

@item \overbrace@{@var{math}@}
Met une accolade au-dessus de @var{math}.
Par exemple, @code{\overbrace@{x+x+\cdots +x@}^@{\mbox@{\(k\) fois@}@}}.
@ifset HAS-MATH
Le résultat ressemble à cela : @math{\overbrace{x+x+\cdots+x}^{k \rm\;fois}}
@end ifset
Voir aussi @code{\underbrace}.

@end ftable

@PkgIndex{mathtools}
Le paquetage @package{mathtools} ajoute une accolade par dessus ou par
dessous, ainsi que des améliorations sur les accolades. Voir la
documentation sur le CTAN.


@node Spacing in math mode
@section Espacement en mode mathématique

@cindex espacement au sein du mode mathématique
@cindex mode mathématique, espacement

Quand il compose des mathématiques, @LaTeX{} insère l'espacement selon
les règles normales pour les textes mathématiques. Si vous entrez
@code{y=m x} alors @LaTeX{} ignore l'espace et dans la sortie le m est
juste à côté du x, comme dans @math{y=mx}.

Mais les règles de @LaTeX{} ont occasionnellement besoin de petits ajustements. Par exemple, dans l'intégrale la tradition est de mettre une petite espace supplémentaire entre le @code{f(x)} et le @code{dx}, obtenue ci-dessous avec la commande @code{\,} :

@example
\int_0^1 f(x)\,dx
@end example

@LaTeX{} fournit les commandes qui suivent utilisables en mode
mathématique. Beaucoup de ces définitions d'espacement sont exprimées
dans l'unité mathématique @dfn{mu} donnée par 1 em = 18 mu, où le em est
pris de la famille courante des symboles mathématiques (@pxref{Units of
length}). Ainsi, un @code{\thickspace} est typiquement de 5/18 fois la
largeur d'un @samp{M}.

@table @code
@item \;
@cindex thickspace
@findex \;
@findex \thickspace
@anchor{spacing in math mode thickspace}
Synonyme : @code{\thickspace}. Normalement @code{5.0mu plus 5.0mu}.
Avec le paquetage @package{amsmath}, ou depuis la parution 2020-10-01 de @LaTeX{}, utilisable aussi bien en mode texte qu'en mode mathématique ; sinon, utilisable seulement en mode mathématique.

@item \negthickspace
@findex \negthickspace
Normalement @code{-5.0mu plus 2.0mu minus 4.0mu}.
Avec le paquetage @package{amsmath}, ou depuis la parution 2020-10-01 de @LaTeX{}, utilisable aussi bien en mode texte qu'en mode mathématique ; sinon, utilisable seulement en mode mathématique.

@item \:
@itemx \>
@findex \:
@findex \>
@findex \medspace
@anchor{spacing in math mode medspace}

Synonyme : @code{\medspace}. Normalement @code{4.0mu plus 2.0mu minus
4.0mu}.  Avec le paquetage @package{amsmath}, ou depuis la parution 2020-10-01 de @LaTeX{}, utilisable aussi bien en mode texte qu'en mode mathématique ; sinon, utilisable seulement en mode mathématique.

@item \negmedspace
@findex \negmedspace
Normalement @code{-4.0mu plus 2.0mu minus 4.0mu}.
Avec le paquetage @package{amsmath}, ou depuis la parution 2020-10-01 de @LaTeX{}, utilisable aussi bien en mode texte qu'en mode mathématique ; sinon, utilisable seulement en mode mathématique.

@item \,
@cindex espace fine
@cindex fine, espace
@findex \,
@findex \thinspace
@anchor{Spacing in math mode/\thinspace}
@anchor{spacing in math mode thinspace}
Synonyme : @code{\thinspace}. Espace fine, normalement @code{3mu}, c.-à-d.@: 1/6@dmn{mu}.  Utilisable à
la fois en mode mathématique et en mode texte (@pxref{\thinspace & \negthinspace}).

Cette espace est très utilisée, par exemple entre la fonction et la
variation infinitésimale dans une intégrale @code{\int f(x)\,dx} et, si
un auteur fait cela, avant la ponctuation dans une équation affichée :

@example
La primitive est
\begin@{equation@}
  3x^@{-1/2@}+3^@{1/2@}\,.
\end@{equation@}
@end example

@item \!
@findex \!
@findex \negthinspace
@cindex espace fine négative
@anchor{spacing in math mode negthinspace}
Une espace fine négative. Normalement @code{-3mu}.  Avec le paquetage
@package{amsmath}, ou depuis la parution 2020-10-01 de @LaTeX{}, utilisable
aussi bien en mode texte qu'en mode mathématique ; sinon, la commande
@code{\!} est utilisable seulement en mode mathématique mais la commande
@code{\negthinspace} a toujours également fonctionné en mode texte
(@pxref{\thinspace & \negthinspace}).


@item \quad
@cindex quad
@findex \quad
@anchor{spacing in math mode quad}
Vaut 18@dmn{mu}, c.-à-d.@: 1@dmn{em}. Souvent utilisé pour l'espace
entourant les équations ou expressions, par ex.@: pour l'espace entre deux
équation au sein d'un environnement @code{displaymath}. Utilisable à la
fois en mode mathématique et en mode texte.

@item \qquad
@findex \qquad
@anchor{spacing in math mode qquad}
Une longueur de 2 quads, soit 36@dmn{mu} = 2@dmn{em}.  Utilisable à la
fois en mode mathématique et en mode texte.
@end table

@menu
* \smash::                           Eliminate height or depth of a subformula.
* \phantom & \vphantom & \hphantom:: Make empty box same size as argument.
* \mathstrut::                       Add some vertical space to a formula.
@end menu

@node \smash
@subsection @code{\smash}

@cindex espace vertical, mode mathématique
@cindex mode mathématique, espace vertical

Synopsis :

@example
\smash@{@var{sous-formule}@}
@end example

Compose @var{sous-formule} en aplatissant sa boîte comme si sa hauteur
et sa profondeur étaient nulles.

Dans l'exemple suivant l'exponentielle est si haut que sans la commande
@code{\smash} @LaTeX{} séparerait sa ligne de la ligne juste au-dessus,
et l'irrégularité de l'espacement des lignes pourrait être visuellement
malheureuse.

@example
Pour calculer la tétration $\smash@{2^@{2^@{2^2@}@}@}$,
évaluer de haut en bas, comme $2^@{2^4@}=2^@{16@}=65536$.
@end example

(À cause du @code{\smash} l'expression imprimée pourrait se superposer à
la ligne du dessus, aussi vous voudrez sans doute attendre la version
finale du document avant de faire de tels ajustements).

Ce qui suit illustre l'effet de @code{\smash} en utilisant @code{\fbox}
pour cerner la boîte que @LaTeX{} met sur la ligne.  La commande
@code{\barrenoire} fait une barre s'étendant de 10 points sous la
ligne de base jusqu'à 20 points au-dessus.

@example
\newcommand@{\barrenoire@}@{\rule[-10pt]@{5pt@}@{30pt@}@}
\fbox@{\barrenoire@}
\fbox@{\smash@{\barrenoire@}@}
@end example

La première boîte que @LaTeX{} place fait 20 points de haut et 10 points
de profondeur.  Mais la seconde boîte est traitée par @LaTeX{} comme
ayant une hauteur et une profondeur nulles, même si l'encre imprimée sur
la page s'étend toujours bien au-dessus et au-dessous de la ligne.

La commande @code{\smash} apparaît souvent en mathématiques pour ajuster
la taille d'un élément qui entoure une sous-formule. Ci-dessous la
première racine s'étend sous la ligne de base alors que la seconde
repose juste sur la ligne de base.

@example
\begin@{equation@}
\sqrt@{\sum_@{0\leq k< n@} f(k)@}
\sqrt@{\vphantom@{\sum@}\smash@{\sum_@{0\leq k< n@}@} f(k)@}
\end@{equation@}
@end example

Notez l'usage de @code{\vphantom} pour donner à la commande @code{\sqrt}
un argument avec la même hauteur que la @code{\sum} (@pxref{\phantom &
\vphantom & \hphantom}).

Alors que le plus souvent on l'utilise en mathématique, la commande
@code{\smash} peut apparaître dans d'autres contextes.  Toutefois, elle
n'assure pas le passage en horizontal. Ainsi si elle débute un
paragraphe il est préférable de mettre en premier un @code{\leavevmode},
comme dans la dernière ligne de l'exemple ci-dessous :

@example
xxx xxx xxx

\smash@{yyy@}  % sans renfoncement de paragraphe

\leavevmode\smash@{zzz@}  % renfoncement normal de paragraphe
@end example

@PkgIndex{mathtools}
Le paquetage @package{mathtools} a des opérateurs qui fournissent un contrôle
encore plus fin de l'aplatissement d'une boîte de sous-formule.

@node \phantom & \vphantom & \hphantom
@subsection @code{\phantom} & @code{\vphantom} & @code{\hphantom}

@anchor{\phantom}
@anchor{\vphantom}
@anchor{\hphantom}
@findex \phantom
@findex \vphantom
@findex \hphantom

@cindex espacement, mode mathématique
@cindex horizontal, espacement
@cindex vertical, espacement
@cindex mode mathématique, espacement
@cindex invisible, caractère
@cindex caractère invisible

Synopsis :

@example
\phantom@{@var{sous-formule}@}
@end example

@noindent ou

@example
\vphantom@{@var{sous-formule}@}
@end example

@noindent ou

@example
\hphantom@{@var{sous-formule}@}
@end example

La commande @code{\phantom} crée une boîte de la même hauteur,
profondeur et largeur que @var{sous-formule}, mais vide.  c.-à-d.@:
qu'avec cette commande @LaTeX{} compose l'espace mais ne le remplit pas
avec la matière.  Dans l'exemple ci-dessous @LaTeX{} met un espace
blanc de la largeur correcte pour la réponse, mais il n'affiche pas la
réponse.

@example
\begin@{displaymath@}
  \int x^2\,dx=\mbox@{\underline@{$\phantom@{(1/3)x^3+C@}$@}@} 
\end@{displaymath@}
@end example

La variante @code{\vphantom} produit une boîte invisible de la même
taille verticale que @var{sous-formule}, la même hauteur et profondeur,
mais ayant une largeur nulle.  Et @code{\hphantom} fabrique une boîte
avec la même largeur que @var{sous-formule} mais de hauteur et
profondeur nulles.

Dans l'exemple suivant, la tour des exposants dans l'expression second
opérande de la somme est si haute que @TeX{} place cette expression plus
bas qu'il ne le ferait par défaut.  Sans ajustement, les deux expressions
opérandes de la somme seraient à des niveaux différents.  Le
@code{\vphantom} dans la première expression dit à @TeX{} de laisser
autant de place verticalement qu'il fait pour la tour, de sorte que les
deux expressions ressortent au même niveau.

@example
\begin@{displaymath@}
    \sum_@{j\in\@{0,\ldots\, 10\@}\vphantom@{3^@{3^@{3^j@}@}@}@}
      \sum_@{i\in\@{0,\ldots\, 3^@{3^@{3^j@}@}\@}@} i\cdot j
\end@{displaymath@}
@end example

Ces commandes sont souvent utilisées conjointement avec @code{\smash}.
@xref{\smash}, ce qui inclut un autre exemple d'usage de
@code{\vphantom}.

@PkgIndex{mathtools}

Les trois commandes en @code{phantom} apparaissent souvent mais notez que
@LaTeX{} fournit nombre d'autres commandes affectant les tailles de
boîtes qui pourraient être plus commodes, notamment @code{\makebox}
(@pxref{\mbox & \makebox}) et également @code{\settodepth}
(@pxref{\settodepth}), @code{\settoheight} (@pxref{\settoheight}), et
@code{\settowidth} (@pxref{\settowidth}).  De plus, le paquetage
@package{mathtools} a beaucoup de commandes qui offrent un contrôle fin de
l'espacement.

@PkgIndex{amsmath}
Les trois commandes produisent une boîte ordinaire, sans aucun statut
mathématique spécial. Ainsi pour faire quelque chose comme attacher un
indice supérieur vous avez à donner un tel statut, par exemple avec la
commande @code{\operatorname} du paquetage @package{amsmath}.

Alors que la plupart du temps on les utilise en mathématiques, ces
trois commandes peuvent apparaître dans d'autres contextes.  Toutefois,
elles ne provoquent pas le passage de @LaTeX{} en mode horizontal. Ainsi
si l'une de ces commandes débute un paragraphe alors vous avez
typiquement à la précéder d'un @code{\leavevmode}.

@node \mathstrut
@subsection @code{\mathstrut}

@findex @code{\mathstrut}
@cindex espacement, mode mathématique
@cindex vertical, espacement
@cindex mode mathématique, espacement
@cindex invisible, caractère
@cindex caractère invisible
@cindex étai mathématique

Synopsis :

@example
\mathstrut
@end example

L'homologue de @code{\strut} pour les mathématiques.  @xref{\strut}.

Entrer @code{$\sqrt@{x@} + \sqrt@{x^i@}$} donne en sortie une seconde
racine plus haute que la première.  Pour ajouter de l'espace vertical
supplémentaire sans aucun espace horizontal, de sorte que les deux aient
la même hauteur, utilisez @code{$\sqrt@{x\mathstrut@} +
\sqrt@{x^i\mathstrut@}$}.

La commande @code{\mathstrut} ajoute la hauteur verticale d'une
parenthèse ouvrante, (, mais aucun espace horizontal.  Elle est
définie comme @code{\vphantom@{(@}} : voir @ref{\phantom & \vphantom &
\hphantom} pour plus ample information.  Son avantage par rapport à
@code{\strut} est que @code{\mathstrut} n'ajoute aucune profondeur, ce
qui est le plus souvent ce qui convient pour les formules. Utiliser la
hauteur d'une parenthèse ouvrante est juste une convention ; pour un
contrôle complet de la quantité d'espace, utilisez @code{\rule} avec une
largeur.  @xref{\rule}.

@node Math styles
@section Styles mathématiques

@cindex math, styles

Les règles de @TeX{} pour composer une formule dépendent du
contexte. Par exemple, au sein d'une équation hors texte, l'entrée
@code{\sum_@{0\leq i<n@}k^m=\frac@{n^@{m+1@}@}@{m+1@}+\mbox@{termes
d'ordre inférieur@}} donnera une sortie où l'indice de sommation sera
centré sous le symbole de sommation. Mais si cette même entrée est en
ligne dans le texte, alors l'indice de sommation est déporté sur la
droite plutôt que au-dessous, de sorte qu'il n'écarte pas les lignes
alentour. De même, dans un contexte en hors texte, les symboles au
numérateur et dénominateur seront plus grands que pour une formule en
ligne dans le texte, et en hors-texte mathématique les indices
supérieurs et inférieurs sont plus écartés que pour une formule
mathématique en ligne dans le texte.

@TeX{} utilise quatre styles mathématiques.

@itemize @value{ITEM_BULLET1}

@cindex style affichage
@item
Le style affichage est pour une formule en hors texte sur une ligne
séparée, comme avec @code{\begin@{equation@} ... \end@{equation@}}.

@cindex style texte
@item
Le style texte est pour une formule en ligne dans le texte, comme avec
@samp{ainsi nous avons $ ... $}.

@cindex style script 
@item
Le style script style est pour les parties d'une formule dans un indice
inférieur ou supérieur.

@cindex style scriptscript
@item
Le style scriptscript est pour les parties d'une formule à un second
niveau (ou plus) de placement d'indices inférieurs ou supérieurs.

@end itemize

@findex \displaystyle
@findex \textstyle
@findex \scriptstyle
@findex \scriptscriptstyle
@TeX{} détermines un style mathématique par défaut mais vous pouvez
l'emporter dessus avec une déclaration de @code{\displaystyle}, ou
@code{\textstyle}, ou @code{\scriptstyle}, ou @code{\scriptscriptstyle}.

Dans l'exemple suivant, la fraction sur la ligne @samp{Arithmetique}
aura l'air recroquevillée.

@example
\begin@{tabular@}@{r|cc@}
  \textsc@{Nom@}  &\textsc@{Séries@}  &\textsc@{Somme@}  \\  \hline
  Arithmetique     &$a+(a+b)+(a+2b)+\cdots+(a+(n-1)b)$
                   &$na+(n-1)n\cdot\frac@{b@}@{2@}$  \\
  Géometrique      &$a+ab+ab^2+\cdots+ab^@{n-1@}$
                   &$\displaystyle a\cdot\frac@{1-b^n@}@{1-b@}$  \\
\end@{tabular@}
@end example

@noindent
Mais à cause de la déclaration @code{\displaystyle}, la fraction de la
ligne @samp{Géometrique} sera facile à lire, avec des caractères de la
même taille que le reste de la ligne.

Un autre exemple est que, comparé à la même entrée sans la déclaration, le
résultat de :

@example
on obtient
$\pi=2\cdot@{\displaystyle\int_@{x=0@}^1 \sqrt@{1-x^2@}\,dx@}$
@end example

@noindent
aura un signe intégrale bien plus haut. Notez que dans cet exemple le
@code{\displaystyle} ne s'applique qu'à une partie de la formule, celle
qui est délimitée entre accolades, comme @samp{@{\displaystyle ...@}}.

Le dernier exemple est une fraction continue.

@example
\begin@{equation@}
a_0+\frac@{1@}@{
       \displaystyle a_1+\frac@{\mathstrut 1@}@{
       \displaystyle a_2+\frac@{\mathstrut 1@}@{
       \displaystyle a_3@}@}@}
\end@{equation@}
@end example

@noindent
Sans la déclaration @code{\displaystyle}, les dénominateurs seraient en
style script et scriptscript.  (Le @code{\mathstrut} améliore la hauteur
des dénominateurs ; @pxref{\mathstrut}).


@node Math miscellany
@section Recueil de diverses commandes utiles  en math
@cindex math, miscellanées
@cindex miscellanées en math

@LaTeX{} contient moult facilités pour les mathématiques. En voici
quelques-unes qu'on n'a pas pu classer ailleurs.

@menu
* Colon character & \colon::    Colon.
* \*::                            Discretionary multiplication.
* \frac::                         Fraction.
* \sqrt::                         Radicals.
* \stackrel::                     Text over a relation.
@end menu

@node Colon character & \colon
@subsection Caractère deux-points @code{:} & @code{\colon}

@anchor{colon}
@cindex deux-points, caractère
@findex : @r{(pour les math)}
@findex \colon

Synopsis, l'un parmi :

@example
:
\colon
@end example

En mathématiques, le caractère deux-points, @code{:}, est une relation.

@example
Avec des rapport de côtés \( 3:4 \) et \( 4:5 \), le triangle est rectangle.
@end example

@PkgIndex{amsmath}
@noindent
De base @LaTeX{} définit @code{\colon} pour produire le caractère
deux-points avec l'espacement approprié pour une ponctuation, comme dans
la notation de construction d'ensemble @code{\@{x\colon 0\leq x<1\@}}.

@PkgIndex{amsmath}
Mais le paquetage largement utilisé @package{amsmath} définit
@code{\colon} pour être utilisé dans la définition de fonctions
@code{f\colon D\to C}. Ainsi si vous désirez utiliser le caractère
deux-points comme une ponctuation, utilisez alors @code{\mathpunct@{:@}}.


@node \*
@subsection @code{\*}

@cindex multiplication discrétionnaire
@cindex symbole de multiplication, saut de ligne discrétionnaire
@findex \*

Synopsis :

@example
\*
@end example

Un symbole de multiplication @dfn{discrétionnaire}, sur lequel un saut
de ligne est autorisé. En l'absence de saut, la multiplication est
indiquée implicitement par un espace, alors qu'en cas de saut un symbole
@BES{×,\times} est imprimé immédiatement avant le saut. Ainsi

@example
\documentclass@{article@}
\usepackage[utf8]@{inputenc@}
\usepackage@{french@}
\begin@{document@}
Mais \(A_3 = 0\), ainsi le produit de tous les termes de
\(A_1\) à \(A_4\), c.-à-d.\ \(A_1\* A_2\* A_3 \* A_4\),
est égal à zéro.
\end@{document@}
@end example

produit une sortie de ce type@c
@ifnottex
@w{ }(on a omis une partie du texte pour faire apparaître la césure au
même endroit que dans une sortie @TeX{})@c
@end ifnottex
 :

@indentedblock
Mais @math{A_3 = 0}, ainsi
@iftex
le produit de tous les termes
@end iftex
@ifnottex
[@dots{}]
@end ifnottex
de @math{A_1}
à @math{A_4}, c.-à-d.@: @math{A_1 A_2 \times}@*@math{A_3 A_4}, est
égal à zéro.
@end indentedblock

@node \frac
@subsection @code{\frac} 

@cindex fraction
@findex \frac

Synopsis :

@example
\frac@{@var{num}@}@{@var{dén}@}
@end example


Produit la fraction @var{num} divisé par @var{dén}.  Utilisé comme :
@code{\begin@{displaymath@} \frac@{1@}@{\sqrt@{2\pi\sigma@}@}
\end@{displaymath@}}.  En mode mathématique en ligne cela ressort
petit ; voir la discussion de @code{\displaystyle} (@pxref{Math
formulas}).

@node \sqrt
@subsection @code{\sqrt}

@cindex carrée, racine
@cindex racines
@cindex radical
@findex \sqrt

Synopsis, l'un parmi :

@example
 \sqrt@{@var{arg}@}
 \sqrt[@var{nième}]@{@var{arg}@}
@end example

Produit la représentation de la racine carrée, ou optionnellement de la
racine @var{nième}, de @var{arg}.  L'argument optionnel @var{nième}
détermine quelle racine produire, c.-à-d.@: saisissez
@code{$\sqrt[3]@{x+y@}$} pour la racine cubique de @code{x+y}.
@ifset HAS-MATH
Le résultat ressemble à cela : @math{\root 3 \of {x+y}}.
@end ifset
La taille du radical croît avec celle de @var{arg} (au fur et à mesure
que la hauteur du radical croît, l'angle sur la montant de gauche
devient plus abrupt, jusqu'à pour un @code{arg} suffisamment haut,
devenir vertical).

@LaTeX{} a un symbole @code{\surd} séparé pour faire une racine carrée
sans @var{are} (@pxref{Math symbols}).

@node \stackrel
@subsection @code{\stackrel}

@cindex pile, math
@cindex relation, texte au-dessus
@findex \stackrel

Synopsis :

@example
\stackrel@{@var{texte}@}@{@var{relation}@}
@end example

Place @var{texte} au dessus de @var{relation}.  Pour mettre un nom de
fonction au-dessus d'une flèche entrez
@code{\stackrel@{f@}@{\longrightarrow@}}.
@ifset HAS-MATH
Le résultat ressemble à cela : @math{\buildrel f \over \longrightarrow}.
@end ifset


@node Modes
@chapter Modes
@cindex modes

Au fur et à mesure que @LaTeX{} traite votre document, en tout point il
est dans l'un parmi six modes. On peut les classer en trois catégories
de deux modes chacune, les modes horizontaux, les modes mathématiques,
et les modes verticaux. Certaines commandes ne fonctionnent pas dans
tous les modes (en particulier, beaucoup de commandes ne fonctionnent
que dans les modes mathématiques), et des messages d'erreur y font
référence.

@itemize  @value{ITEM_BULLET1}
@item
@anchor{modes paragraph mode}
@cindex mode paragraphe
@dfn{Mode paragraphe} (appelé @dfn{mode horizontal} en @value{PlainTeX})
est le mode dans lequel @LaTeX{} se trouve lorsqu'il traite du texte
ordinaire. Il fragmente votre texte en lignes pour former un paragraphe
et détermine les positions des sauts de ligne, de sorte que les sauts de
page puissent être effectués en mode vertical. C'est le mode dans lequel
@LaTeX{} est la plupart du temps.

@cindex mode gauche-à-droite (left-to-right)
@cindex mode LR
@anchor{modes lr mode}
Le @dfn{mode LR} (de l'anglais Left-to-Right, c.-à-d.@: gauche-à-droite ;
appelé @dfn{mode horizontal restreint} en @value{PlainTeX}), ce mode est
en vigueur quand @LaTeX{} se met à fabriquer une boîte avec une commande
@code{\mbox}. Comme en mode paragraphe, @LaTeX{} considère la sortie
qu'il produit comme une chaîne de mots avec des espaces entre eux.
Contrairement au mode paragraphe, en mode LR @LaTeX{} ne démarre jamais
une nouvelle ligne, il continue juste à progresser de la gauche vers la
droite.  (Bien que @LaTeX{} ne se plaigne pas qu'une boîte LR puisse
être trop longue, quand il a fini et essaie ensuite de mettre cette
boîte dans une ligne, il peut se plaindre si la boîte résultante est
trop grande pour tenir dans la ligne).

@item
@cindex mode math
@anchor{modes math mode}
@dfn{Mode math}, @LaTeX{} est dans ce mode quand il est en train de
générer une formule mathématique.

@cindex mode math d'affichage
@dfn{Mode math d'affichage}, @LaTeX{} est dans ce mode quand il est en
train de générer une formule mathématique hors texte.  (Les formules
hors texte diffèrent quelque peu des formules en ligne. un exemple est
que le placement des indices sur @code{\int} diffère entre les deux
situations).

@cindex mode vertical
@item mode vertical
@anchor{modes vertical mode} @dfn{Mode vertical}, @LaTeX{} est dans ce
mode quand il est en train de construire la liste des lignes et d'autres
matières pour fabriquer la page à sortir, ce qui comprend l'insertion
des sauts de page. C'est le mode dans lequel @LaTeX{} quand il démarre
un document.


@cindex mode vertical interne
@anchor{modes internal vertical mode}
@dfn{Mode vertical interne}, ce mode est en vigueur quand @LaTeX{} se
met à fabriquer une @code{\vbox}.  Il ne comprend pas l'insertion de
sauts de page, ce qui fait de lui l'analogue vertical du mode LR.

@end itemize

@noindent
Par exemple, si vous commencez un article en @LaTeX{} avec @samp{Soit \(
x \) un ...} alors voici les modes : d'abord @LaTeX{} démarre tout
document en mode vertical, ensuite il lit le @samp{S} et commute en mode
paragraphe, et puis la commutation suivante survient sur le @samp{\(} où
@LaTeX{} passe en mode math, et puis quand il quitte la formule il
revient en mode paragraphe.

@cindex interne, mode paragraphe
@cindex externe, mode paragraphe
@anchor{modes inner paragraph mode}
@anchor{modes outer paragraph mode}
Le mode Paragraphe a deux sous-cas. Si vous utilisez une commande
@code{\parbox} ou une @code{minipage} alors @LaTeX{} est mis en mode
paragraphe.  Mais il n'insérera pas de saut de page à cet endroit. Au
sein de l'une de ces boîtes, appelées @dfn{parbox}, @LaTeX{} est en
@dfn{mode paragraphe interne}.  Une situation plus habituelle, quand il
peut faire des sauts de page, est le @dfn{mode paragraphe externe}
(@pxref{Page breaking}).

@menu
* \ensuremath:: Assurer qu'on est en mode mathématique
@end menu

@node \ensuremath
@section @code{\ensuremath}

Synopsis :

@example
\ensuremath@{@var{formule}@}
@end example

La commande @code{\ensuremath} assure que @var{formule} est composée en
mode mathématique.

Par exemple, vous pouvez redéfinir des commandes qui d'ordinaire ne
peuvent être utilisées qu'en mode mathématique, de sorte qu'elles
puissent être utilisées à la fois en mode mathématique et en texte
simple.

@example
\newcommand@{\dx@}@{\ensuremath@{dx@}@}
Dans $\int f(x)\, \dx$, le \dx@{@} représente une variation
infinitésimale.
@end example

Attention : la commande @code{\ensuremath} est utile mais ce n'est pas
la panacée.

@example
\newcommand@{\alf@}@{\ensuremath@{\alpha@}@}
Vous obtenez un alpha en mode texte : \alf.
Mais comparez l'espacement correct de $\alf+\alf$ avec celui de
\alf+\alf.
@end example

@noindent
Le mieux est de composer toute matière mathématique en mode
mathématique.


@node Page styles
@chapter Styles de page
@cindex styles de page
@cindex page, styles

Le style d'une page détermine où @LaTeX{} place les composantes de cette
page, telles que l'en-tête et le pied de page, et le corps de
texte. Ceci inclut les pages de la partie principale du document mais
inclut également les pages spéciales telles que la page de titre d'un
livre, une page d'index, ou la première page d'un article.

@PkgIndex{fancyhdr}
Le paquetage @package{fancyhdr} est très utile pour construire des
styles de page. Voir sa documentation sur le CTAN.

@menu
* \maketitle::          Génère une page de titre.
* \pagenumbering::      Règle le style utilisé pour les numéros de pages.
* \pagestyle::		    Change le style des en-têtes et bas de pages.
* \thispagestyle::      Change le style de l'en-tête et bas de pages de la
  page courante.
@end menu


@node \maketitle
@section @code{\maketitle}
@cindex titres, fabrication
@findex \maketitle

Synopsis :

@example
\maketitle
@end example

La commande @code{\maketitle} génère un titre. Dans les classes
standardes le titre apparaît sur une page séparée --- hormis dans la
classe @code{article} où il est au sommet de la première
page. (@xref{Document class options}), pour plus ample information sur
l'option @code{titlepage} de classe de document).

L'exemple qui suit illustre la commande @code{\maketitle} apparaissant à
sa place habituelle, immédiatement après @code{\begin@{document@}}.

@example
\documentclass@{article@}
\title@{Construction d'un réacteur nucléaire en n'utilisant que des noix de coco@}
\author@{Jonas Grumby\thanks@{%
    Avec le soutien de Ginger Grant de la Roy Hinkley Society.@} \\
  Skipper, \textit@{Minnow@}
  \and
  Willy Gilligan\thanks@{%
    Remerciement à la fondation Mary Ann Summers
    et à Thurston et Lovey Howell.@}           \\
  Second, \textit@{Minnow@}
  @}
\date@{26 septembre 1964@}
\begin@{document@}
\maketitle
Assieds toi un peu pour entendre ce conte, le conte  d'un voyage fatidique.
Partis de ce port sous les tropiques, à bord de ce petit navire. Le second était
un vieux loup de mer, le Skipper, courageux et sûr. Cinq passagers firent
voile ce jour-là, pour une balade de trois heures. Une balade de trois heures.
  ...

@end example

Vous donnez à @LaTeX{} l'information nécessaire à la production du titre
en faisant les déclarations suivantes. Elles doivent se faire avant le
@code{\maketitle}, soit dans le préambule, soit dans le corps du document.

@ftable @code
@item \author@{@var{nom1} \and @var{nom2} \and ...@}
@cindex auteur, pour la page de titre
@findex \\ @r{(pour @code{\author})}
@findex \and @r{(pour @code{\author})}
Obligatoire.  Déclare l'auteur, ou les auteurs du document.  L'argument
est une liste d'auteurs séparés par des commandes @code{\and}.  Pour
séparer les lignes au sein d'une seule entrée d'auteur, par exemple pour
donner l'institution ou l'adresse de l'auteur, utiliser une double
controblique, @code{\\}.  Si vous omettez la déclaration @code{\author}
alors vous obtiendrez un avertissement @samp{LaTeX Warning: No \author
given}.

@item \date@{@var{texte}@}
@cindex date, pour la page de titre
Optionnel. Déclare que @var{texte} est la date du document.  Le
@var{texte} n'est pas nécessairement dans un format de date ; cela peut
être un texte quelconque.  Si vous omettez @code{\date} alors @LaTeX{}
utilise la date courante (@pxref{\today}).  Pour omettre la date,
utilisez plutôt @code{\date@{@}}.

@item \thanks@{@var{texte}@}
@cindex remerciements, pour la page de titre
@cindex crédits, note en bas de page
Optionnel.  Produit une note en bas de page. Vous pouvez l'utiliser dans
l'information sur l'auteur pour insérer des remerciement comme illustré
dans l'exemple plus haut, mais vous pouvez également l'utiliser dans le
titre, ou en tout lieu où une marque de note en bas de page est
susceptible de se trouver. Cela peut être un texte quelconque et donc
vous pouvez l'utiliser pour n'importe quoi, comme pour imprimer une
adresse mél.

@item \title@{@var{texte}@}
@cindex titre, pour la page de titre
@findex \\ @r{(pour @code{\title})}
Obligatoire.  Déclare que @var{texte} est le titre du document.  On
obtient des sauts de ligne au sein de @var{texte} avec une double
controblique, @code{\\}.  Si vous omettez la déclaration @code{\title}
alors la commande @code{\maketitle} produit l'erreur @samp{LaTeX Error:
No \title given}.

@end ftable

Pour fabriquer votre propre page de titre, voir @ref{titlepage}. Vous
pouvez soit la créer pour une unique fois ou l'inclure comme faisant
partie d'une commande @code{\maketitle} redéfinie.  (Beaucoup d'éditeurs
fournissent une classe à utiliser à la place de @code{article} et
formatant le titre selon les exigences de leur maison).

@node \pagenumbering
@section @code{\pagenumbering}
@findex \pagenumbering
@cindex numérotation de page, style
@cindex style de numérotation de page

Synopsis :

@example
\pagenumbering@{@var{style}@}
@end example

Spécifie le style des numéros de page, et réinitialise également le
numéro de page. Le style de numérotation est reflété sur la page, et
aussi dans la table des matières et d'autres références de page. Cette
déclaration a une portée globale, ainsi son effet ne s'arrête pas à une
fin de groupe comme une accolade fermante ou une fin d'environnement.

Dans l'exemple suivant, avant la rubrique @samp{Principale} les pages
sont numérotées @samp{a}, etc.  À partir de la page contenant l'appel à
@code{\pagenumbering} fait dans cette rubrique, les pages sont
numérotées @samp{1}, etc.

@example
\begin@{document@}\pagenumbering@{alph@}
  ...
\section@{Principale@}\pagenumbering@{arabic@}
  ...
@end example


L'argument @var{style} peut prendre les valeurs suivantes (voir
aussi @ref{\alph \Alph \arabic \roman \Roman \fnsymbol}) :

@table @code
@item arabic
nombres arabes : 1, 2, @dots{} 

@item roman
Nombres romain en bas de casse : i, ii, @dots{}

@item Roman
Nombres romain en capitales : I, II, @dots{}

@item alph
Lettres en bas de casse : a, b, @dots{} Si vous avez plus de 26 pages
alors vous obtenez @samp{LaTeX Error: Counter too large}.

@item Alph
Lettre en capitales : A, B, @dots{} Si vous avez plus de 26 pages
alors vous obtenez @samp{LaTeX Error: Counter too large}.

@item gobble
@PkgIndex{hyperref} @LaTeX{} ne produit pas de numéro de page en sortie,
bien qu'il ne soit pas réinitialisé.  Les références à cette page
sont également à blanc.  (Ceci ne fonctionne pas avec le paquetage
populaire @package{hyperref}, de sorte que pour empêcher le numéro de
page d'apparaître une alternative est d'utiliser
@code{\pagestyle@{empty@}} ou @code{\thispagestyle@{empty@}}.)

@end table

Traditionnellement, si un document a des matières
préliminaires --- préface, table des matières, etc. --- alors les pages
y sont numérotées en chiffres romains bas de casse. Les pages de la
matière principale d'un document sont en chiffres arabes.
@xref{\frontmatter & \mainmatter & \backmatter}.

Si vous désirez changer l'emplacement du numéro de page sur la page,
voir @ref{\pagestyle}.  Si vous désirez changer la valeur du numéro de
page, alors manipulez le compteur @code{page} (@pxref{Counters}).


@node \pagestyle
@section @code{\pagestyle}
@findex \pagestyle
@cindex en-tête de page
@cindex pied de page
@cindex style d'en-tête et pied de page

Synopsis :

@example
\pagestyle@{@var{style}@}
@end example

Déclaration spécifiant comment les en-têtes et pieds de page sont
composés à partir de la page courante.

@PkgIndex{fancyhdr}
Une discussion avec un exemple suivent.  À noter tout d'abord que le
paquetage @package{fancyhdr} est actuellement la manière standarde de
manipuler les en-têtes et pieds de page. Les nouveaux documents pour
lesquels on désire quoi que ce soit d'autre que les options standardes
listées ci-dessous devraient utiliser ce paquetage. Se référer à sa
documentation sur le CTAN.

Valeurs pour @var{style} :

@table @code
@item plain
L'en-tête est vide.  Le pied de page ne contient qu'un numéro de page,
centré.

@item empty
L'en-tête et le pied de page sont tous deux vides.

@item headings
Place des en-têtes et pieds de page sur chaque page. Le style de
document spécifie ce qu'ils contiennent ; voir la discussion plus bas.

@item myheadings
En-têtes personnalisés, spécifiés via les commandes @code{\markboth} ou
@code{\markright}.

@end table

Discuter la motivation du mécanisme de @LaTeX{} vous aidera à faire
fonctionner les options @code{headings} ou @code{myheadings}.  Le
document source ci-dessous produit un article, en recto-verso, avec le
style de page @code{headings}.  Sur les pages de gauche de ce document,
@LaTeX{} désire (en plus du numéro de page) le titre de la rubrique de
niveau @code{\section} en cours.  Sur les pages de droite @LaTeX{}
désire le titre de la rubrique de niveau @code{\subsection} en cours.
Quand il fabrique une page, @LaTeX{} obtient ces informations à partir
des commandes @code{\leftmark} et @code{\rightmark}.  De sorte que c'est
aux commandes @code{\section} et @code{\subsection} de stocker ces
informations là.

@example
\documentclass[twoside]@{article@}
\pagestyle@{headings@}
\begin@{document@}
  ... \section@{Section 1@} ... \subsection@{Subsection 1.1@} ...
\section@{Section 2@}
  ...
\subsection@{Subsection 2.1@}
  ...
\subsection@{Subsection 2.2@}
  ...
@end example

@noindent
Supposez que la seconde rubrique de niveau @code{\section} tombe sur une
page de gauche.  Même si quand la page commence elle est dans la
première rubrique de niveau @code{\section}, @LaTeX{} placera
@samp{Section@tie{}2} dans l'en-ête de la page de gauche.  Quant à
l'en-tête de droite, si aucune rubrique de niveau @code{\subsection} ne
commence avant la fin de la page de droite alors @LaTeX{} laisse en
blanc l'en-tête de droite.  Si une rubrique de niveau @code{\subsection}
apparaît avant que la page de droite ne finisse alors il y a deux
cas. Si au moins une rubrique de niveau @code{\subsection} commence sur
la page de droite alors @LaTeX{} place dans l'en-tête de droite le titre
de la première rubrique de niveau @code{\subsection} commençant sur
cette page de droite. Si au moins l'un parmi 2.1, 2.2, @dots{}, commence
sur la page de gauche mais qu'aucune ne commence sur la droite alors
@LaTeX{} place dans l'en-tête de droite le titre de la dernière rubrique
de niveau @code{\subsection} à avoir commencé, c.-à-d.@: celle qui est
en cours pendant la page de droite.

Pour accomplir cela, dans un article en recto-verso, @LaTeX{} fait que
@code{\section} génère une commande @code{\markboth} réglant
@code{\leftmark} à @samp{Section@tie{}2} et réglant @code{\rightmark} à
un contenu vide.  Et, @LaTeX{} fait que @code{\subsection} génère une
commande @code{\markright}, réglant @code{\rightmark} à
@samp{Subsection@tie{}2.1}, etc.

Ci-après on trouvera les descriptions de @code{\markboth} et
@code{\markright} :

@ftable @code
@item \markboth@{@var{en-tête-gauche}@}@{@var{en-tête-droite}@}
Règle l'information d'en-tête à la fois sur la page de gauche et sur
celle de droite dans le cas d'un style de page @code{headings} ou
@code{myheadings}.  Un en-tête @var{en-tête-gauche} de page de gauche
est généré par la dernière commande @code{\markboth} avant la fin de la
page.  Un en-tête @var{en-tête-droite} de page de droite est généré par
le premier @code{\markboth} ou @code{\markright}, s'il y en a un, de la
page, ou sinon par le dernier se trouvant avant cette page.

@item \markright@{@var{en-tête-droite}@}
Règle l'en-tête de la page de droite, en laissant celle de gauche
inchangée.

@end ftable


@node \thispagestyle
@section @code{\thispagestyle@{@var{style}@}}
@findex \thispagestyle

La commande @code{\thispagestyle} fonctionne de la même manière que la
commande @code{\pagestyle} (voir section précédente) à ceci près qu'elle
change en @var{style} pour la page courante seulement.


@node Spaces
@chapter Espaces
@cindex espaces
@cindex espace blanc

@LaTeX{} a beaucoup de façons de produire de l'espace blanc (ou
rempli). Certaines d'entre elles conviennent mieux à du texte
mathématique à ce propos, voir @ref{Spacing in math mode}.

@c Une autre commande produisant de l'espace est @code{\,} pour produire une
@c espace « fine » (d'habitude 1/6@dmn{quad}).  Elle peut être utilisée en
@c mode texte, mais est le plus souvent utile en mode math (@pxref{Spacing
@c in math mode,Espacement en mode mathématique}).

@c xxx Realigner sur l'anglais
@menu
Espace horizontal
* \enspace & \quad & \qquad::  Espaces horizontaux traditionnels.
* \hspace::             Espace horizontal quelconque.
* \hfill::              Espace horizontal extensible.
* \hss::                Espace horizontal infiniment dilatable/contractible.
* \spacefactor::        Dilatabilité de l'espace qui suit
* \@key{<espace>}: \(SPACE). Controblique-espace, et espace explicite.
* ~::                   Tilde, un espace insécable.
* \thinspace & \negthinspace::          Un sixième d'@dmn{em}, en positif et en négatif.
* \/::                  Correction italique.
* \hrulefill & \dotfill::          Filet ou pointillés horizontaux extensibles.

Espace vertical
* \bigskip & \medskip & \smallskip::  Espaces verticaux fixes.
* \bigbreak & \medbreak & \smallbreak::  Epsace inter-paragraphe et sauts de pages.
* \strut::                            Assure la hauteur d'une ligne.
* \vspace::                       Espace vertical.
* \vfill::                        Espace vertical extensible indéfiniment.
* \addvspace::                    Ajouter un espace vertical arbitraire si besoin est.
@end menu


@node \enspace & \quad & \qquad
@section @code{\enspace} & @code{\quad} & @code{\qquad}

@anchor{\enspace}
@anchor{\quad}
@anchor{\qquad}
@findex \enspace
@findex \quad
@findex \qquad

Synopsis, l'un parmi :

@example
\enspace
\quad
\qquad
@end example

Insère un espace horizontal de 1/2@dmn{em}, 1@dmn{em}, ou 2@dmn{em}. Le
em est une longueur définie par les auteurs de polices de caractères,
généralement considérée comme la largeur d'un M capital.  Un avantage de
décrire l'espace en termes d'em est que cela peut être plus portable
d'un document à l'autre qu'utiliser une mesure absolue telle que des
points (@pxref{Lengths/em}).

L'exemple suivant met l'espace adéquat entre les deux graphiques.

@example
\begin@{center@}
  \includegraphics@{souriredefemmes.png@}%
  \qquad\includegraphics@{souriredemecs.png@}
\end@{center@}
@end example

@noindent
@xref{Spacing in math mode}, pour @code{\quad} et @code{\qquad}.  Ce
sont des longueurs utilisées depuis des siècles en typographie et donc
dans de nombreux cas seraient un meilleur choix que des longueurs
arbitraires, comme celles que l'on obtient avec @code{\hspace}.

@node \hspace
@section @code{\hspace}
@findex \hspace

Synopsis, l'un parmi :

@example
\hspace@{@var{longueur}@}
\hspace*@{@var{longueur}@}
@end example

La commande @code{\hspace} ajoute la quantité d'espace horizontal
@var{longueur}. L'argument @var{longueur} peut être positif, négatif, ou
nul ; ajouter une longueur négative d'espace revient à retourner en
arrière. C'est une longueur élastique, c.-à-d.@: qu'elle peut contenir
une composante @code{plus} ou @code{minus}, ou les deux
(@pxref{Lengths}). Comme l'espace est dilatable ou contractible on
l'appelle parfois @dfn{glue}.

L'exemple suivant fabrique une ligne dans laquelle @samp{Nom~:} est à
2,5@dmn{cm} de la marge de droite.

@example
\noindent\makebox[\linewidth][r]@{Nom~:\hspace@{2.5cm@}@}
@end example

La forme en @code{*} insère de l'espace horizontal non
suppressible. Plus précisément, quand @TeX{} découpe un paragraphe en
lignes, tout espace blanc --- glues ou crénages --- qui se trouve à un
saut de ligne est supprimé. La forme étoilée évite ceci (techniquement,
elle ajoute un objet invisible non-supprimable devant l'espace).

Dans l'exemple suivant :

@example
\documentclass[a4paper]@{article@}
\begin@{document@}
\parbox@{.9\linewidth@}@{Remplir chaque blanc~: Le peuple français proclame
  solennellement son attachement aux Droits de \hspace*@{2.5cm@} et aux
  principes de la \hspace*@{2.5cm@} nationale tels qu’ils ont été définis
  par la Déclaration de 1789, \ldots@}
\end@{document@}
@end example
@noindent
le blanc de 2,5@dmn{cm} suivant @samp{principes de la} tombe au début de la
ligne. Si vous enlevez la @code{*} alors @LaTeX{} supprime le blanc.

Ci-dessous le @code{\hspace} sépare les trois graphiques.

@example
\begin@{center@}
  \includegraphics@{lion.png@}% le commentaire empêche l'ajout d'un espace
  \hspace@{1cm minus 0.25cm@}\includegraphics@{tiger.png@}%
  \hspace@{1cm minus 0.25cm@}\includegraphics@{bear.png@}
\end@{center@}
@end example

@noindent
Parce que l'argument de chaque @code{\hspace} comprend @code{minus
0.25cm}, chacun peut se contracter un peu si les trois figures sont trop
larges. Mais chaque espace ne peut contracter plus que 0,25@dmn{cm}
(@pxref{Lengths}).

@node \hfill
@section @code{\hfill}

@findex \hfill
La commande @code{\hfill} de remplissage produit une ``longueur
élastique'' qui n'a aucun espace naturel mais peut s'allonger ou se
rétrécir horizontalement autant que nécessaire.

@findex \fill
Le paramètre @code{\fill} est la longueur élastique elle-même (c.-à-d.@:
pour parler technique, la valeur de glue @samp{0pt plus1fill}) ; ainsi,
@code{\hspace\fill} équivaut à @code{\hfill}.

@node \hss
@section @code{\hss}

@findex \hss
@cindex horizontal, espace
@cindex espace horizontal
@cindex espace horizontal dilatable
@cindex espace, insérer de l'espace horizontal

Synopsis :

@example
\hss
@end example

Produit un espace horizontal indéfiniment dilatable ou contractible
(cette commande est une primitive @TeX{}).  Les auteurs @LaTeX{}
devraient chercher en premier la commande @code{\makebox} pour obtenir
les effets de @code{\hss} (@pxref{\mbox & \makebox}).

Dans l'exemple suivant, le @code{\hss} de la première ligne a pour effet
de coller le Z à droite, le superposant au Y.  Dans la seconde ligne, le
Z dépasse sur la gauche, et se superpose au X.

@example
X\hbox to 0pt@{Z\hss@}Y
X\hbox to 0pt@{\hss Z@}Y
@end example

@noindent
Sans le @code{\hss} vous auriez quelque chose du genre @samp{Overfull
\hbox (6.11111pt too wide) detected at line 20}.

@node \spacefactor
@section @code{\spacefactor}

Synopsis :

@example
\spacefactor=@var{entier}
@end example

@findex \spacefactor
Influence le comportement de @LaTeX{} en termes de dilatation /
contraction de glue. La plupart des documents de niveau d'utilisateur ne
font pas usage de cette commande.

Alors que @LaTeX{} compose la matière, il peut dilater ou contracter
les espaces entre les mots.  (Cet espace n'est pas un caractère ; on
l'appelle la @dfn{glue inter-mot} ; @pxref{\hspace}).  La commande
@code{\spacefactor} (issue de @value{PlainTeX}) vous permet, par
exemple, d'avoir l'espace après un point qui se dilate plus que l'espace
après une lettre terminant un mot.

Après que @LaTeX{} a placé chaque caractère, ou filet ou autre boîte, il
règle un paramètre qu'on appelle le @dfn{facteur d'espace}.  Si ce qui
suit en entrée est une espace alors ce paramètre affecte la quantité de
dilatation ou de contraction pouvant survenir.  Un facteur d'espace plus
grand que la valeur normale signifie que la glue peut se dilater
davantage, et moins se contracter.  Normalement, le facteur d'espace
vaut 1000. Cette valeur est en vigueur après la plupart des caractères,
et toute boîte qui n'est pas un caractère, ou formule mathématique.
Mais il vaut 3000 après un point, un point d'exclamation, ou
d'interrogation, il vaut 2000 après un caractère deux-points, 1500 après
un point-virgule, 1250 après une virgule, et 0 après une parenthèse
fermante ou un crochet fermant, ou un guillemet anglais fermant double,
ou simple.  Finalement, il faut 999 après une lettre capitale.

Si le facteur d'espace @var{f} vaut 1000 alors l'espace de glue sera de
la taille normale d'une espace dans la police courante (pour Computer
Modern Roman en 10 point, cela vaut 3,3333 points).  Sinon, si le
facteur d'espace @var{f} est supérieur à 2000 alors @TeX{} ajoute la
valeur d'espace supplémentaire définie pour la police courante (pour
Computer Modern Roman en 10 point cela vaut 1,11111 points), et ensuite
la valeur de dilatation normale de la police est multipliée par
@math{f /1000} et la valeur normale de contraction par @math{1000/f}
(pour Computer Modern Roman en 10 point elles valent 1,66666 et
1,11111 points).

Par exemple, considérez le point à la fin de @code{Le meilleur ami d'un
homme est son chien.}  Après celui-ci, @TeX{} place un espace
supplémentaire fixé, et également permet à la glue de se dilater trois
fois plus et de se contracter par 1/3 fois plus que la glue après
@code{ami}, ce mot ne se terminant pas sur un point.

Les règles de fonctionnement des facteurs d'espace sont en fait encore
plus complexes car elles jouent d'autres rôles. En pratique, il y a deux
conséquences.  Tout d'abord, si un point ou une autre ponctuation est
suivie d'une parenthèse ou d'un crochet fermant, ou d'un guillemet
anglais fermant simple ou double, alors l'effet sur l'espacement de ce
point se propage à travers ces caractères (c.-à-d.@: que la glue qui suit
aura plus de dilatation ou de contraction).  Deuxièmement, si la
ponctuation suit une lettre capitale alors son effet n'est pas là de
sorte que vous obtenez un espacement ordinaire.  Ce second cas affecte
également les abréviations qui ne se terminent pas par une lettre
capitale (@pxref{\@@}).

Vous pouvez utiliser @code{\spacefactor} seulement en mode paragraphe ou
en mode LR (@pxref{Modes}).  Vous pouvez voir la valeur courante avec
@code{\the\spacefactor} ou @code{\showthe\spacefactor}.

(Commentaire, ne concernant pas vraiment @code{\spacefactor} : si vous
avez des erreurs du genre de @samp{You can't use `\spacefactor' in
vertical mode}, ou @samp{You can't use `\spacefactor' in math mode.}, ou
@samp{Improper \spacefactor} alors c'est que vous avez probablement
essayer de redéfinir une commande interne.  @xref{\makeatletter &
\makeatother}.)


@menu
* \@@:: Distingue les points terminant une phrase de ceux terminant une
  abréviation.
* \frenchspacing & \nonfrenchspacing:: Rendre égaux les espacements inter-phrase et inter-mot.
* \normalsfcodes::   Restore space factor settings to the default.
@end menu


@node \@@
@subsection @code{\@@}

@findex \@@
@findex arobe
@cindex point terminant une phrase
@cindex point terminant une abréviation
@cindex point, espacement après
@anchor{\AT}@c ancien nom

Synopsis :

@example
@var{lettre-capitale}\@@.
@end example

Traite un point comme terminant une phrase, là où @LaTeX{} penserait
sinon qu'il fait partie d'une abréviation.  @LaTeX{} pense qu'un point
termine une abréviation si le point suit une lettre capitale, et sinon
il pense que ce point termine une phrase.  Par défaut, en justifiant une
ligne @LaTeX{} ajuste l'espacement après un point terminant une phrase
(ou après un point d'interrogation, d'exclamation, une virgule, ou un
caractère deux-points) plus qu'il n'ajuste l'espace inter-mot
(@pxref{\spacefactor}).

Cet exemple montre les deux cas dont il faut se souvenir :

@example
Les chansons \textit@{Red Guitar@}, etc.\ sont de Loudon Wainwright~III\@@.
@end example

@noindent
Le second point termine la phrase, bien que précédé d'une capitale. On
dit à @LaTeX{} qu'il termine la phrase en mettant @code{\@@} devant.  Le
premier point termine l'abréviation @samp{etc.} mais non la phrase.  Le
controblique-espace, @code{\ }, produit un espace en milieu de phrase.

Ainsi donc : lorsqu'on a une capitale suivie d'un point qui termine une
phrase, alors on met @code{\@@} devant le point.  Cela vaut même s’il y
a une parenthèse droite ou un crochet, ou un guillemet droit simple ou
double, parce que la portée de l’effet sur l'espacement du point n'est
pas limitée par ces caractères.  Dans l'exemple suivant

@example
Utilisez le \textit@{Instructional Practices Guide@}, (un livre de la
MAA)\@@.
@end example

@noindent
on obtient l'espacement inter-phrase correctement après le point.

La commande @code{\@@} ne convient que pour le mode texte. Si vous
l'utilisez hors de ce mode alors vous obtiendrez @samp{You can't use
`\spacefactor' in vertical mode} (@pxref{Modes}).

Commentaire : le cas réciproque c'est lorsque un point termine une
abréviation dont la dernière lettre n'est pas une capitale, et que cette
abréviation n'est pas le dernier mot de la phrase.  Pour ce cas faites
suivre le point d'une controblique-espace, (@code{\ }), ou un tilde,
(@code{~}), ou @code{\@@}.  Par exemple @code{Nat.\ Acad.\ Science},
@code{Mr.~Bean}, et @code{(fumier, etc.\@@) à vendre} (notez que dans le
dernier cas @code{\@@} est placé avant la parenthèse fermante).


@node \frenchspacing & \nonfrenchspacing
@anchor{\frenchspacing}@c old node name
@subsection @code{\frenchspacing} & @code{\nonfrenchspacing}

@anchor{\nonfrenchspacing}
@findex \frenchspacing
@findex \nonfrenchspacing
@cindex espacement inter-phrase

Synopsis, l'un parmi :

@example
\frenchspacing
\nonfrenchspacing
@end example

La première déclaration a pour effet que @LaTeX{} traite l'espacement
entre les phrases de la même manière que l'espacement entre les mots
d'une phrase. L'effet de la seconde est de revenir au traitement par
défaut où l'espacement entre les phrases se dilate ou contracte
davantage (@pxref{\spacefactor}).

Dans certaines traditions typographiques, y compris l'anglaise, on
préfère ajuster l'espace entre les phrases (ou les espaces suivant un
point d'interrogation, d'exclamation, une virgule, ou un point virgule)
plus que l'espace entre les mots du milieu de la phrase. La déclaration
@code{\frenchspacing} (la commande vient de @value{PlainTeX}) commute
vers la tradition où tous les espaces sont traités de la même façon.

@node \normalsfcodes
@subsection @code{\normalsfcodes}

@findex \normalsfcodes
@cindex espacement inter-phrase

Synopsis :

@example
\normalsfcodes
@end example

Réinitialise les facteurs d'espacement de @LaTeX{} à leur valeur
défaut (@pxref{\spacefactor}).

@node \(SPACE)
@section Controblique-espace @code{\ }
@cindex \@key{SAUTDELIGNE}
@cindex \@key{ESPACE}
@cindex \@key{TABULATION}
@cindex \@w{ } (controblique-espace)
@findex \@w{ } (controblique-espace)
@findex \@key{ESPACE}

Cette rubrique concerne la commande qui consiste en deux caractères, une
controblique suivie d'un espace.@*Synopsis :

@example
\@w{ }
@end example

Produit un espace. Par défaut elle produit de l'espace blanc de longueur
3.33333@dmn{pt} plus 1.66666@dmn{pt} minus 1.11111@dmn{pt}.

Quand vous tapez un ou plusieurs blancs entre des mots, @LaTeX{} produit
de l'espace blanc. Mais ceci diffère d'un espace explicite, comme
illustré ci-dessous :

@example
\begin@{tabular@}@{rl@}
Un blanc~:& fabrique de l'espace\\
Trois blancs~:&   à la suite\\
Trois espaces~:&\ \ \ à la suite\\
\end@{tabular@}
@end example

@noindent
Sur la première ligne @LaTeX{} met de l'espace après le deux-points.
Sur la deuxième ligne @LaTeX{} compte les trois blancs comme un seul
pour mettre un seul espace blanc, de sorte que vous obtenez après le
deux-points le même espace que dans la première ligne.  @LaTeX{}
compterait de la même façon un seul espace blanc si l'un ou plusieurs
des blancs étaient remplacés par des caractères tabulation ou saut de
ligne.  Toutefois, la ligne du bas demandant trois espaces la zone en
blanc est plus large. c.-à-d.@: que la commande controblique-espace crée
une quantité fixe d'espace horizontal.  (Notez que vous pouvez définir
un espace horizontal d'une largeur quelconque avec @code{\hspace};
voir @tie{}@ref{\hspace}).

La commande controblique-espace a deux usages principaux.  Elle est
souvent utilisée après une séquence de contrôle pour l'empêcher d'avaler
le blanc qui suit, comme après @code{\TeX} dans @code{\TeX\ (ou
\LaTeX)}.  (Mais l'utilisation d'accolades a l'avantage de fonctionner
systématiquement, que la séquence de contrôle soit suivie d'un blanc ou
de tout autre non-lettre, comme dans @code{\TeX@{@} (ou \LaTeX@{@})} où
@code{@{@}} peut être rajouté aussi bien après @code{\LaTeX} qu'après
@code{\TeX}).  L'autre utilisation usuelle est de marquer qu'un point
termine une abréviation et non une phrase, comme dans @code{Prof.\
Fabre} or @code{Jean et al.\ (1993)} (@pxref{\@@}).

Dans les circonstances normales, @code{\}@key{tabulation} et
@code{\}@key{sautdeligne} sont équivalents à controblique-espace,
@code{\ }.

@anchor{Leading blanks}
Veuillez aussi noter que de sorte à autoriser le renfoncement du code,
dans les circonstances normales, @TeX{} ignore les blancs au début de
chaque ligne. Ainsi l'exemple suivant imprime @samp{À moi comte deux
mots}:

@example
À moi, Comte,
 deux mots !
@end example

@noindent
où l'espace blanc entre @samp{Comte,} et @samp{deux} est produit par le
saut de ligne après @samp{Comte}, et non par l'espace avant @samp{deux}.

@node ~
@section @code{~}

@findex ~
@cindex espace insécable
@cindex insécable, espace
@cindex NBSP

Synopsis :

@example
@var{avant}~@var{après}
@end example

Le caractère tilde, @code{~}, produit une espace @dfn{insécable} entre
@var{avant} et @var{après}, c'est à dire une espace où un saut de ligne
n'est pas autorisé. Par défaut l'espace blanc a une longueur de
3.33333@dmn{pt} plus 1.66666@dmn{pt} minus 1.11111@dmn{pt}
(@pxref{Lengths}).

Dans l'exemple suivant @LaTeX{} ne fait pas de saut de ligne entre les
deux derniers mots.

@example
Remerciements au Prof.~Lerman.
@end example

@noindent
De plus, en dépit du point, @LaTeX{} n'utilise pas l'espacement de fin
de phrase (@pxref{\@@}).

Les insécables empêchent qu'une fin de ligne sépare des choses là où cela
prêterait à confusion. Ils n'empêchent par contre pas la césure (de l'un ou
l'autre des mots de part et d'autre), de sorte qu'ils sont en général
préférables à mettre deux mots consécutifs dans une @code{\mbox}
(@pxref{\mbox & \makebox}).

Ils sont aussi une question de goût, parfois très dogmatique, parmi les
lecteurs. Néanmoins, on présente ci-après quelques usages, dont la
plupart sont issus du @cite{@identity{@TeX{}book}}.

@itemize @value{ITEM_BULLET1}
@item
Entre l'étiquette et le numéro d'un énumérateur, comme dans les références :
@code{Chapitre~12}, or @code{Théorème~\ref@{th:Wilsons@}}, ou
@code{Figure~\ref@{fig:KGraph@}}.

@item
Lorsque des alternatives sont énumérés en ligne : @code{(b)~Montrez que $f(x)$ est
(1)~continue, et (2)~bornée}.

@PkgIndex{siunitx}
@item
Entre un nombre et son unité : @code{$745.7.8$~watts} (le paquetage
@package{siunitx} a des fonctions spécifiques pour cela) ou
@code{144~œufs}. Ceci comprend le cas du quantième et du nom du mois
dans une date : @code{12~octobre} ou @code{12~oct}. En général, dans
toute expression où un nombre et une abréviation ou un symbole sont
séparés par une espace : @code{565~ap.~\mbox@{J.-C.@}}, ou
@code{2:50~pm}, ou @code{Airbus~A320}, ou @code{26~rue des Oliviers
Road}, ou @code{\$$1.4$~billion}. D'autres choix usuels sont l'espace fine (@pxref{\thinspace & \negthinspace}) et aucune espace du tout.

@item
Quand des expressions mathématiques sont rendues en mots :
@code{égal~$n$}, ou @code{inférieur à~$\epsilon$}, ou @code{soit~$X$},
ou @code{modulo~$p^e$ pour tout~$n$} (mais comparez @code{vaut~$15$}
avec @code{vaut $15$~fois la hauteur}). Entre symboles mathématiques en
apposition avec des noms : @code{dimension~$d$} ou
@code{fonction~$f(x)$} (mais comparez avec @code{de longueur $l$~ou
plus}). Quand un symbole est un objet étroitement lié à une préposition :
@code{de~$x$}, ou @code{de $0$ à~$1$}, ou @code{en commun avec~$m$}.

@item
Entre les symboles d'une série : @code{$1$,~$2$, ou~$3$} ou @code{$1$,~$2$,
\ldots,~$n$}.

@item
Entre les prénoms d'une personne et entre des noms de famille
multiples : @code{Donald~E. Knuth}, ou @code{Luis~I. Trabb~Pardo}, ou
@code{Charles~XII} --- mais vous devez donner à @TeX{} des endroits où
faire un saut de ligne, par exemple comme dans @code{Charles Louis
Xavier~Joseph de~la Vall\'ee~Poussin}.

@end itemize

@node \thinspace & \negthinspace
@section @code{\thinspace} & @code{\negthinspace}

@anchor{\thinspace}
@anchor{\negthinspace}
@findex \thinspace
@findex \negthinspace
@cindex fine, espace
@cindex espace fine
@cindex fine, espace, négative
@cindex espace fine négative

Synopsis, l'un parmi :

@example
\thinspace
\negthinspace
@end example

Produisent une espace insécable et non-élastique qui vaut 1/6 d'@dmn{em}
et 1/6 d'@dmn{em} respectivement. Ce sont les équivalents mode texte de
@code{\,} and @code{\!} (@pxref{Spacing in math mode/\thinspace}).

On peut utiliser @code{\,} comme synonyme de @code{\thinspace} en mode texte.

Une utilisation usuelle de @code{\thinspace} est en typographie anglaise
comme l'espace entre des guillemets anglais simples emboîtés :

@example
Killick répondit : ``J'ai entendu le capitaine dire `Ohé du bâteau~!'\thinspace''
@end example

@noindent
Une autre utilisation est que certains guides de style demandent un
@code{\thinspace} entre les points de suspension et un point terminant
une phrase (dans d'autres guides de style on considère que les points de
suspension et/ou les points de suspension et le quatrième point
suffisent).  Une autre utilisation spécifique au style est entre les
initiales, comme dans @code{D.\thinspace E.\ Knuth}.

@PkgIndex{amsmath}
@LaTeX{} fournit diverses commandes d'espacement similaires pour le mode
mathématique (@pxref{Spacing in math mode}).  Avec le paquetage
@package{amsmath}, ou depuis la parution 2020-10-01 de @LaTeX{}, elle sont
utilisables aussi bien en mode texte qu'en mode mathématique, y compris
@code{\!} pour @code{\negthinspace} ; mais sinon, elles ne sont disponibles
qu'en mode mathématique.


@node \/
@section @code{\/}
@findex \/
@cindex Correction italique

Synopsis :

@example
@var{caractère-précédent}\/@var{caractère-suivant}
@end example

La commande @code{\/} produit une @dfn{correction italique}.  C'est une
petite espace définie par l'auteur de la fonte pour chacun des caractères
(elle peut être nulle). Quand vous utilisez @code{\/}, @LaTeX{} prend la
correction dans le fichier de métriques de fonte, la dilate/contracte de
la même façon que la fonte si tant est que la taille de celle-ci fût
dilatée/contractée, et ensuite insère cette quantité d'espace.

Dans l'exemple ci-dessous, sans le @code{\/}, le
@var{caractère-précédent} f italique taperait dans le
@var{caractère-suivant} H romain :

@example
\newcommand@{\logoentreprise@}@{@{\it f@}\/H@}
@end example

@noindent
parce que la lettre f italique penche loin vers la droite.

Si @var{caractère-suivant} est un point ou une virgule, il n'est pas
nécessaire d'insérer une correction italique, puisque ces symboles de
ponctuation sont d'une faible hauteur. Toutefois, avec les
points-virgules ou les deux-points, de même qu'avec les lettres normales,
elle peut être utile. On l'utilise typiquement à l'endroit où l'on passe
d'une fonte italique ou inclinée à une fonte droite.

Quand vous utilisez des commandes telles que @code{\emph},
@code{\textit} ou @code{\textsl} pour changer la fonte, @LaTeX{} insère
automatiquement la correction italique là où besoin est (@pxref{Font
styles}).  Toutefois, des déclarations telle que @code{\em}, @code{\itshape}
ou @code{\slshape} n'insèrent pas automatiquement de correction italique.

Les caractères droits peuvent aussi avoir une correction italique. Un
exemple où elle est nécessaire est le nom @code{pdf\/\TeX}. Toutefois,
la plupart des caractères droits ont une correction italique
nulle. Certains auteurs de fonte n'incluent pas de valeur de correction
italique même pour les fontes italiques.

@findex \fontdimen1
@cindex dimension de fonte, inclinaison
@cindex fonte, dimension, inclinaison
Techniquement, @LaTeX{} utilise une autre valeur spécifique à la fonte,
appelé @dfn{paramètre d'inclinaison} (nommément @code{\fontdimen1}),
pour déterminer s'il est possible d'insérer une correction italique, au
lieu d'attacher cette action à des commandes particulières de contrôle
de la fonte.

Le concept de correction italique n'existe pas en mode mathématique ;
l'espacement y est fait d'une façon différente.


@node \hrulefill & \dotfill
@section @code{\hrulefill} & @code{\dotfill}

@anchor{\hrulefill}
@anchor{\dotfill}
@findex \hrulefill
@findex \dotfill

Synopsis, l'un parmi :

@example
\hrulefill
\dotfill
@end example

Produit une longueur élastique infinie (@pxref{Lengths}) remplie avec un
filet horizontal (c.-à-d.@: une ligne) ou avec des pointillés, au lieu
d'espace blanc.

L'exemple ci-dessous produit une ligne de 5@dmn{cm} de long :

@example
Nom:~\makebox[5cm]@{\hrulefill@}
@end example

Quand on le place entre deux lignes à blanc cet exemple crée un
paragraphe qui est justifié à gauche et à droite, et où l'espace au
milieu est rempli avec des pointillés uniformément espacés.

@example
\noindent Capt Robert Surcouf\dotfill@{@} Saint-Malo
@end example

Pour que le filet ou les pointillés aillent jusqu'au bout de la ligne
utilisez @code{\null} au début ou à la fin.

Pour changer l'épaisseur du filet, copiez la définition et ajustez là,
comme ci-dessous :

@example
\renewcommand@{\hrulefill@}@{%
   \leavevmode\leaders\hrule height 1pt\hfill\kern\z@@@}
@end example

@noindent
ce qui change l'épaisseur par défaut de 0.4@dmn{pt} à 1@dmn{pt}.  De
même, ajustez l'espacement inter-pointillé comme avec :

@example
\renewcommand@{\dotfill@}@{%
  \leavevmode\cleaders\hb@@xt@@1.00em@{\hss .\hss @}\hfill\kern\z@@@}
@end example

@noindent
ce qui change la longueur par défaut de 0.33@dmn{em} à 1.00@dmn{em}.

L'exemple suivant produit une ligne pour signer :

@example
\begin@{minipage@}@{4cm@}
  \centering
  Signature:\\
  \hrulefill
\end@{minipage@}
@end example

@noindent
La ligne fait 4@dmn{cm} de long.


@node \bigskip & \medskip & \smallskip
@section @code{\bigskip} & @code{\medskip} & @code{\smallskip}
@anchor{\bigskip}
@anchor{\medskip}
@anchor{\smallskip}
@findex \bigskip
@findex \medskip
@findex \smallskip

Synopsis, l'un parmi :

@example
\bigskip
\medskip
\smallskip
@end example

Produit une certaine quantité d'espace vertical, grand, de taille
moyenne, ou petit. Ces commandes sont fragiles (@pxref{\protect}).

Dans l'exemple ci-dessous le saut suggère le passage du temps (tiré de
@i{L'océan d'or} de Patrick O'Brian).

@example
Mr Saumarez aurait eu à lui dire quelque grossièreté, sans aucun
doute : il était de nouveau comme chez lui, et c'était un plaisir.

\bigskip
« Cent cinquante-sept miles et un tiers, en vingt-quatre heures », dit Peter.
@end example

Chaque commande est associée à une longueur définie dans le source de la
classe du document.

@ftable @code
@anchor{bigskip}
@item \bigskip
@findex \bigskipamount
La même chose que @code{\vspace@{\bigskipamount@}}, ordinairement environ
l'espace d'une ligne, avec dilatation et rétrécissement. La valeur par
défaut pour les classes @code{book} et @code{article} est @code{12pt
plus 4pt minus 4pt}.

@anchor{medskip}
@item \medskip
@findex \medskipamount
La même chose que @code{\vspace@{\medskipamount@}}, ordinairement
environ la moitié de l'espace d'une ligne, avec dilatation et
rétrécissement. La valeur par défaut pour les classes @code{book} et
@code{article} est @code{6pt plus 2pt minus 2pt}).

@anchor{smallskip}
@item \smallskip
@findex \smallskipamount
La même chose que @code{\vspace@{\smallskipamount@}}, ordinairement
environ le quart de l'espace d'une ligne, avec dilatation et
rétrécissement. la valeur par défaut pour les classes @code{book} et
@code{article} est @code{3pt plus 1pt minus 1pt}.

@end ftable

Comme chaque commande est un @code{\vspace}, si vous l'utilisez au
milieu d'un paragraphe, alors elle insère son espace vertical entre la
ligne dans laquelle vous l'utilisez et la ligne suivante, et non pas
nécessairement à l'endroit où vous l'utilisez. Ainsi il est préférable
d'utiliser ces commandes entre les paragraphes.

Les commandes @code{\bigbreak}, @code{\medbreak}, et @code{\smallbreak}
sont similaires mais suggèrent également à @LaTeX{} que l'endroit
est adéquat pour un saut de page (@pxref{\bigbreak &
\medbreak & \smallbreak}.


@node \bigbreak & \medbreak & \smallbreak
@section @code{\bigbreak} & @code{\medbreak} & @code{\smallbreak}

@anchor{\bigbreak}
@anchor{\medbreak}
@anchor{\smallbreak}
@findex \bigbreak
@findex \medbreak
@findex \smallbreak

Synopsis, l'un parmi :

@example
\bigbreak
\medbreak
\smallbreak
@end example

Produit un espace vertical grand, de taille moyenne ou petit, et suggère
à @LaTeX{} que l'endroit est adéquat pour un saut de page.  (Les
pénalités associées sont respectivement @minus{}200, @minus{}100, et
@minus{}50).

@xref{\bigskip & \medskip & \smallskip}, pour plus ample information.
Ces commandes produisent le même espace vertical mais diffèrent en ce
qu'elles suppriment également un espace vertical précédent s'il est
inférieur à ce qu'elles inséreraient (comme avec @code{\addvspace}).  De
plus, elles terminent le paragraphe où on les utilise. Dans cet
exemple :

@example
abc\bigbreak def ghi

jkl mno pqr
@end example

@noindent
on a en sortie trois paragraphes, le premier se termine en @samp{abc} et
le deuxième commence, après un espace vertical supplémentaire et un
renfoncement, par @samp{def}.


@node \strut
@section @code{\strut}

@findex \strut
@cindex étai

Synopsis :

@example
\strut
@end example

Étai. Assure que la ligne courante a une hauteur d'au moins
@code{0.7\baselineskip} et une profondeur d'au moins
@code{0.3\baselineskip}.  Pour l'essentiel, @LaTeX{} insère dans la
ligne un rectangle de largeur nulle,
@code{\rule[-0.3\baselineskip]@{0pt@}@{\baselineskip@}} (@pxref{\rule}).
Le @code{\baselineskip} change avec la fonte courante ou sa taille.

Dans l'exemple suivant le @code{\strut} empêche la boîte d'avoir une
hauteur nulle.

@example
\setlength@{\fboxsep@}@{0pt@}\framebox[5cm]@{\strut@}
@end example

L'exemple suivant comprend quatre listes. Dans la première il y a un
espace bien plus large entre les articles 2 et 3 qu'il n'y a entre les
articles 1 et 2. La seconde liste répare cela avec un @code{\strut} à la
fin de la deuxième ligne du premier article.

@example
\setlength@{\fboxsep@}@{0pt@}
\noindent\begin@{minipage@}[t]@{0.2\linewidth@}
\begin@{enumerate@}
  \item \parbox[t]@{15pt@}@{test \\ test@}
  \item test
  \item test
\end@{enumerate@}
\end@{minipage@}%
\begin@{minipage@}[t]@{0.2\linewidth@}
\begin@{enumerate@}
  \item \parbox[t]@{15pt@}@{test \\ test\strut@}
  \item test
  \item test
\end@{enumerate@}
\end@{minipage@}%
\begin@{minipage@}[t]@{0.2\linewidth@}
\begin@{enumerate@}
  \item \fbox@{\parbox[t]@{15pt@}@{test \\ test@}@}
  \item \fbox@{test@}
  \item \fbox@{test@}
\end@{enumerate@}
\end@{minipage@}%
\begin@{minipage@}[t]@{0.2\linewidth@}
\begin@{enumerate@}
  \item \fbox@{\parbox[t]@{15pt@}@{test \\ test\strut@}@}
  \item \fbox@{test@}
  \item \fbox@{test@}
\end@{enumerate@}
\end@{minipage@}%
@end example

@noindent
Les deux dernières listes utilisent @code{\fbox} pour montrer ce qui se
passe. La @code{\parbox} du premier article de la troisième liste ne va
que jusqu'au bas du second @samp{test}, or ce mot ne comprend aucun
caractère descendant sous la ligne de base.  Le @code{\strut} ajouté
dans la quatrième liste donne sous la ligne de base l'espace
supplémentaire requis.

@PkgIndex{TikZ} @PkgIndex{Asymptote}

La commande @code{\strut} est souvent utile pour les graphiques, comme en
@package{TikZ} ou @package{Asymptote}.  Par exemple, vous pourriez avoir une
commande telle que @code{\graphnode@{@var{nom-nœud}@}} qui ajuste un
cercle autour de @var{nom-nœud}. Toutefois, à moins que vous preniez
certaines précautions, prendre @samp{x} ou @samp{y} pour @var{nom-nœud}
produit des cercles de diamètres différents parce que les caractères ont
des tailles différentes.  Une précaution possible contre cela serait que
@code{\graphnode} insère @code{\strut} juste avant @var{nom-nœud}, et
ne dessine le cercle qu'après cela.

L'approche générale d'utiliser une @code{\rule} de largeur nulle est
utile dans de nombreuses circonstances. Dans le tableau ci-dessous, le
filet de largeur nulle empêche le haut de la première intégrale de taper
dans la @code{\hline}. De même, le second filet empêche la seconde
intégrale de taper sur la première.

@example
\begin@{tabular@}@{rl@}
  \textsc@{Intégrale@}   &\textsc@{Valeur@}           \\
  \hline
  $\int_0^x t\, dt$   &$x^2/2$  \rule@{0em@}@{2.5ex@} \\
  $\int_0^x t^2\, dt$ &$x^3/3$  \rule@{0em@}@{2.5ex@}
\end@{tabular@}
@end example

@noindent
(Bien que la commande double controblique de terminaison de ligne
dispose d'un argument optionnel pour changer la valeur de l'interligne
correspondant, cela ne fonctionne pas pour résoudre ce problème.
Changer la première double controblique en quelque chose du genre de
@code{\\[2.5ex]} augmente l'espace entre la ligne d'en-têtes de colonne
et le filet @code{\hline}, et l'intégrale de la deuxième ligne taperait
encore dans le filet).

@node \vspace
@section @code{\vspace}
@findex \vspace
@cindex espace verticale
@cindex verticale, espace

Synopsis, l'un parmi :

@example
\vspace@{@var{longueur}@}
\vspace*@{@var{longueur}@}
@end example

Ajoute l'espace verticale @var{longueur}.  Celle-ci peut-être positive,
négative, ou nulle.  C'est une longueur élastique --- elle peut contenir
une composante @code{plus} ou @code{minus} (@pxref{Lengths}).

L'exemple ci-dessous met de l'espace entre les deux paragraphes :

@example
Et je dormis.

\vspace@{1ex plus 0.5ex@}
L'aube fraiche d'un nouveau jour.
@end example
@noindent
(@xref{\bigskip & \medskip & \smallskip}, pour les espaces
inter-paragraphes usuelles).

La forme en @code{*} insère de l'espace vertical non suppressible. Plus
précisément, @LaTeX{} supprime l'espace vertical au sauts de page et la
forme en @code{*} a pour effet de conserver l'espace. Cet exemple ménage
une espace entre les deux questions :

@example
Question~: trouver l'intégrale de \( 5x^4+5 \).

\vspace*@{2cm plus 0.5cm@}
Question~: trouver la dérivée de \( x^5+5x+9 \).
@end example

@noindent
Cette espace sera présente même si un saut de page survient entre les
questions.

Si @code{\vspace} est utilisée au milieu d'un paragraphe (c.-à-d.@: en
mode horizontal), l'espace est insérée @emph{après} la ligne comprenant
la commande @code{\vspace} sans commencer un nouveau paragraphe.

Dans cet exemple les deux questions sont espacées uniformément
verticalement sur la page, avec au moins 2,5@dmn{cm} d'espace sous
chacune d'elle.

@example
\begin@{document@}
1) Z'avez pas vu Mirza ? Oh la la la la la la
\vspace@{2.5cm plus 1fill@}

2) Où est donc passé ce chien ? Je le cherche partout
\vspace@{2.5cm plus 1fill@}
\end@{document@}
@end example

@node \vfill
@c xx Realigner sur l'anglais
@section @code{\vfill}
@findex \vfill

@cindex dilatation verticale infinie
@cindex verticale infinie, dilatation

Finit le paragraphe courant et insère une longueur élastique verticale
(@pxref{Lengths}) qui est infinie, de sorte qu'elle puisse se dilater ou
se rétrécir autant que nécessaire.

On l'utilise souvent de la même façon que @code{\vspace@{\fill@}}, à
ceci près que @code{\vfill} finit le paragraphe courant, tandis que
@code{\vspace@{\fill@}} ajoute un espace vertical infini sous sa
ligne sans tenir compte de la structure du paragraphe.  Dans les deux
cas cet espace disparaît à la fin de la page ; pour éviter cela
voir @ref{\vspace}.

Dans l'exemple qui suit la page est remplie, de sorte que les lignes en
haut et en bas contiennent le texte @samp{Chien perdu !} et que le
troisième @samp{Chien perdu !} est exactement à mi-chemin entre eux.

@example
\begin@{document@}
Chien perdu !
\vfill
Chien perdu !
\vfill
Chien perdu !
\end@{document@}
@end example

@node \addvspace
@section @code{\addvspace}
@findex \addvspace
@cindex espace vertical
@cindex espace vertical, insérer

Synopsis :

@example
\addvspace@{@var{long-vert}@}
@end example

Ajoute un espace vertical de longueur @var{long-vert}.  Toutefois, si il
y a deux ou plus @code{\addvspace} à la suite, alors elles ajoutent
seulement l'espace nécessaire à fabriquer la longueur naturelle égale au
maximum des @var{long-vert} correspondant. Cette commande est fragile
(@pxref{\protect}). La longueur @var{long-vert} est une longueur
élastique (@pxref{Lengths}).

L'exemple suivante illustre l'usage de la commande.  L'environnement
@code{picture} dessine une échelle sur laquelle deux filets sont
posés. Dans un document @LaTeX{} de classe standarde @code{article} la
longueur @code{\baselineskip} vaut 12@dmn{pt}.  Comme l'indique
l'échelle, les deux filets sont écartés de 22@dmn{pt} : la somme des
@code{\baselineskip} et de 10@dmn{pt} provenant du premier
@code{\addvspace}.

@example
\documentclass@{article@}
\usepackage@{color@}
\begin@{document@}
\setlength@{\unitlength@}@{2pt@}%
\noindent\begin@{picture@}(0,0)%
  \multiput(0,0)(0,-1)@{25@}@{@{\color@{blue@}\line(1,0)@{1@}@}@}
  \multiput(0,0)(0,-5)@{6@}@{@{\color@{red@}\line(1,0)@{2@}@}@}
\end@{picture@}%
\rule@{0.25\linewidth@}@{0.1pt@}%
\par\addvspace@{10pt@}% \addvspace@{20pt@}%
\par\noindent\rule@{0.25\linewidth@}@{0.1pt@}%
\end@{document@}
@end example

@noindent
Si dans l'exemple précédent on décommente le second @code{\addvspace},
l'écart entre les deux filets ne croit pas de 20@dmn{pt} ; mais au lieu
de cela l'écart devient la somme de @code{\baselineskip} et de
20@dmn{pt}. De sorte que @code{\addvspace} en un sens fait le contraire
de ce que son nom laisse entendre --- elle vérifie que des espaces
verticaux multiples ne s'accumulent pas, mais qu'au lieu de cela seul le
plus grand d'eux est utilisé.

@LaTeX{} utilise cette commande pour ajuster l'espace vertical au-dessus
ou au-dessous d'un environnement qui commence un nouveau paragraphe. Par
exemple, un environnement @code{theorem} commence et finit avec une
@code{\addvspace} de sorte que deux @code{theorem} consécutifs sont séparés par
un espace vertical, et non deux.

Une erreur @samp{Something's wrong--perhaps a missing \item} pointant
sur un @code{\addvspace} signifie que vous n'étiez pas en mode vertical
quand vous avez invoqué cette commande ; une façon pour sortir de cela
et de faire précéder @code{\addvspace} d'une commande @code{\par}
(@pxref{\par}), comme dans l'exemple plus haut.

@node Boxes
@chapter Boîtes
@cindex boîtes

Dans le fond, @LaTeX{} met des choses dans des boîtes et ensuite met ces
boîtes sur une page. Aussi les commandes qui suivent sont centrales.

@PkgIndex{adjustbox}
De nombreux paquetages sur le CTAN sont utiles pour la manipulation de
boîtes. Un ajout utile aux commandes décrites ici est @package{adjustbox}.

@c xx Vérifier que la référence @pxref{Predefined lengths} est donnée
@c par la suite.
@ignore
Tous les paramètres de longueurs prédéfinies
(@pxref{Predefined lengths}) peuvent être utilisés au sein des arguments
des commandes de fabrication de boîtes.
@end ignore

@menu
* \mbox & \makebox::    Boîtes horizontales.
* \fbox & \framebox:: Mettre un cadre autour d'une boîte.
* \parbox::             Boîte avec du texte en mode paragraphe.
* \raisebox::           Élève ou abaisse le texte.
* \sbox & \savebox::    Comme @code{\makebox}, mais sauvegarde le texte pour usage ultérieur.
* lrbox::               Un environnement similaire à @code{\sbox}.
* \usebox::             Compose le texte sauvegardé.
@end menu


@node \mbox & \makebox
@section @code{\mbox} & @code{\makebox}

@anchor{\mbox}
@anchor{\makebox}
@findex \mbox
@findex \makebox
@cindex boîte
@cindex fabriquer une boîte
@cindex césure, empêcher
@cindex coupure de mot, empêcher

Synopsis, l'un parmi les suivants :

@example
\mbox@{@var{texte}@}
\makebox@{@var{texte}@}
\makebox[@var{largeur}]@{@var{texte}@}
\makebox[@var{largeur}][@var{position}]@{@var{texte}@}
@end example

La commande @code{\mbox} crée un boîte, un conteneur pour de la
matière. Le @var{texte} est composé en mode LR (@pxref{Modes}) ainsi il
n'est pas coupé en plusieurs lignes.  La commande @code{\mbox} est
robuste, alors que @code{\makebox} est fragile (@pxref{\protect}).

Comme @code{texte} n'est pas coupé en plusieurs lignes, on peut utiliser
@code{\mbox} pour empêcher une césure. Dans l'exemple suivant, @LaTeX{}
ne peut pas faire de césure dans le nom du char,
@samp{T-34}.

@example
Le char soviétique \mbox@{T-34@} est l'un des symboles de la victoire
sur le nazisme.
@end example

Dans les deux premières versions du synopsis, @code{\mbox} et
@code{\makebox} sont sensiblement équivalentes. Elles créent une boîte
juste assez large pour contenir le @var{texte}. (Elle sont comme le
@code{\hbox} du @value{PlainTeX}).

Dans la troisième version l'argument optionnel @var{largeur} spécifie la
largeur de la boîte.  Notez que l'espace occupé par le texte n'est pas
nécessairement équivalent à la largeur de la boîte. D'une part,
@var{texte} peut être trop petit ; l'exemple suivant crée une boîte
d'une ligne entière de largeur :

@example
\makebox[\linewidth]@{Examen du chapitre@}
@end example

@noindent
où @samp{Examen du chapitre} est centré.  Mais @var{texte} peut aussi
être trop large pour @var{largeur}.  Voir l'exemple plus bas pour des
boîtes de largeur nulle.

@anchor{mbox makebox depth}
@anchor{mbox makebox height}
@anchor{mbox makebox width}
@anchor{mbox makebox totalheight}
Au sein de l'argument @var{largeur} vous pouvez utiliser les longueurs
suivantes qui font référence aux dimensions de la boîte que @LaTeX{}
obtient en composant @var{texte} : @code{\depth}, @code{\height},
@code{\width}, @code{\totalheight} (la somme de la hauteur et de la
profondeur de la boîte).  Par exemple, pour fabriquer une boîte où le
texte est dilaté au double de sa largeur naturelle vous pouvez écrire
ceci :

@example
\makebox[2\width]@{Get a stretcher@}
@end example

Pour la quatrième version du synopsis, la position du texte au sein de
la boîte est déterminée par l'argument optionnel @var{position} qui peut
prendre l'une des valeurs suivantes :

@table @code
@item c
Centré (par défaut).
@item l
(Left) fer à gauche.
@item r
(Right) fer à droite.
@item s
@c xx TODO add a generic node to make clear that some statement may be
@c not true for some internationalization or some script. Eg. in Arabic
@c script or with microtype package I think that the strech also plays
@c on word width
(@identity{Stretch}) dilate l'espace inter-mot dans @var{texte} sur la
@var{largeur} entière ; @var{texte} doit contenir de l'espace dilatable
pour que cela marche.  Par exemple, ceci pourrait être le libellé d'un
communiqué de presse :
@code{\noindent\makebox[\textwidth][s]@{\large\hfil DÉPÊCHE\hfil
IMMÉDIATE\hfil@}}
@end table

Une utilisation courante de @code{\makebox} est de fabriquer des boîtes
de texte de largeur nulle.  Dans l'exemple suivant on place dans un
questionnaire la valeur des questions à leur gauche.

@example
\newcommand@{\pts@}[1]@{\makebox[0em][r]@{#1 points\hspace*@{1em@}@}@}
\pts@{10@}Quelle est la vitesse aérodynamique d'une hirondelle à vide ?

\pts@{90@}Une hirondelle africaine ou européenne ?
@end example

@noindent
@PkgIndex{TikZ}
@PkgIndex{Asymptote}
Le bord droit de la sortie @samp{10 points } (notez l'espace finale
après @samp{points}) est juste avant le @samp{Quelle}.  Vous pouvez
utiliser @code{\makebox} de la même manière quand vous faites des
graphiques, comme en @package{TikZ} ou @package{Asymptote}, où vous mettez le
bord du texte à une position connue, quelle que soit la longueur de ce
texte.

Pour des boîtes avec cadre voir @ref{\fbox & \framebox}. Pour des boîtes
de couleurs voir @ref{Colored boxes}.

Il y a une version apparentée de @code{\makebox} qui utilisée au sein de
l'environnement @code{picture}, où la longueur est données en termes
d'@code{\unitlength} (@pxref{\makebox (picture)}).

Comme @var{texte} est composé en mode LR, ni une double controblique
@code{\\}, ni @code{\par} ne produisent un saut de ligne ; par exemple
@code{\makebox@{abc def \\ ghi@}} produit en sortie @samp{abc defghi}
alors que @code{\makebox@{abc def \par ghi@}} produit @samp{abc def
ghi}, tout deux sur une seule ligne.  Pour obtenir des lignes multiples
voir @ref{\parbox} et @ref{minipage}.

@node \fbox & \framebox
@section @code{\fbox} & @code{\framebox}

@anchor{\fbox}
@anchor{\framebox}
@findex \fbox
@findex \framebox

Synopsis, l'un parmi :

@example
\fbox@{@var{texte}@}
\framebox@{@var{texte}@}
\framebox[@var{largeur}]@{@var{texte}@}
\framebox[@var{largeur}][@var{position}]@{@var{texte}@}
@end example

Crée une boîte dans un cadre englobant, c.-à-d.@: quatre filets entourant
le @var{texte}.  Les commandes @code{\fbox} et @code{\framebox} sont
similaires à @code{\mbox} et @code{\makebox}, au cadre près
(@pxref{\mbox & \makebox}). La commande @code{\fbox} est robuste, la
commande @code{\framebox} est fragile (@pxref{\protect}).

Dans l'exemple suivant

@example
\fbox@{Avertissement ! Tout devoir non rendu obtiendra une note de zéro.@}
@end example

@noindent
@LaTeX{} met le texte dans une boîte, le texte ne peut subir de
césure. Autour de la boîte, séparés d'elle par une petit écart, quatre
filets forment un cadre.

Les deux premières invocations de la commande, @code{\fbox@{...@}} et
@code{\framebox@{...@}}, sont sensiblement équivalentes. Quant aux
troisième et quatrième invocations, les arguments optionnels permettent
de spécifier la largeur de la boîte comme @var{largeur} (une longueur),
et la position du texte au sein de la boîte comme @var{position}.
@xref{\mbox & \makebox}, pour la description complète, mais ci-après
suit un exemple créant une boîte vide de 0,75@dmn{cm} de large.

@example
\setlength@{\fboxsep@}@{0pt@}\framebox[0.75cm]@{\strut@}@}
@end example

@noindent
Le @code{\strut} assure que la hauteur totale soit de
@code{\baselineskip} (@pxref{\strut}).

Les paramètres suivant déterminent la disposition du cadre.

@ftable @code
@anchor{fbox framebox fboxrule}
@item \fboxrule
@findex cadre, épaisseur du filet
@cindex \fboxrule
L'épaisseur des filets autour de la boîte englobée. Par défaut elle vaut
0.2@dmn{pt}.  On la change avec une commande telle que
@code{\setlength@{\fboxrule@}@{0.8pt@}} (@pxref{\setlength}).

@anchor{fbox framebox fboxsep}
@item \fboxsep
@findex cadre, séparation d'avec le contenu
@cindex \fboxsep
La distance du cadre à la boîte englobée. Vaut par défaut 3@dmn{pt}.  On
la change avec une commande telle que
@code{\setlength@{\fboxsep@}@{0pt@}} (@pxref{\setlength}).  La régler à
0@dmn{pt} peut parfois être utile : cela met un cadre autour d'une image
sans bordure blanche.

@example
@{\setlength@{\fboxsep@}@{0pt@}%
 \framebox@{%
   \includegraphics[width=0.5\textwidth]@{prudence.jpg@}@}@}
@end example

@noindent
Les accolades supplémentaires rendent local l'effet du
@code{\setlength}.

@end ftable

Comme avec @code{\mbox} et @code{\makebox}, @LaTeX{} ne fait pas de
sauts de ligne au sein de @var{texte}.  Mais l'exemple ci-dessous a pour
effet que @LaTeX{} effectue des sauts de ligne pour fabriquer un
paragraphe, puis encadre le résultat.

@example
\framebox@{%
  \begin@{minipage@}@{0.6\linewidth@}
    « On va bien lentement dans ton pays ! Ici, vois-tu, on est obligé
    de courir tant qu’on peut pour rester au même endroit, dit la
    reine. Si tu veux te déplacer, tu dois courir au moins deux fois
    plus vite ! »
  \end@{minipage@}@}
@end example

@xref{Colored boxes}, pour des couleurs autres que noir et blanc.

L'environnement @code{picture} a une version de la commande
@code{\framebox} où les unités dépendent du @code{\unitlength} de
@code{picture} (@pxref{\framebox (picture)}).


@node \parbox
@section @code{\parbox}
@findex \parbox
@cindex paragraphe, mode
@cindex paragraphe, dans une boîte


Synopsis, l'un parmi les suivants :

@example
\parbox@{@var{largeur}@}@{@var{contenu}@}
\parbox[@var{position}]@{@var{largeur}@}@{@var{contenu}@}
\parbox[@var{position}][@var{hauteur}]@{@var{largeur}@}@{@var{contenu}@}
\parbox[@var{position}][@var{hauteur}][@var{pos-interne}]@{@var{largeur}@}@{@var{contenu}@}
@end example

@cindex mode paragraphe
@cindex paragraphe, mode
La commande @code{\parbox} produit une boîte de texte de largeur
@code{largeur}. Cette commande peut être utilisée pour fabriquer une
boîte à partir de petits morceaux de texte, et contenant un seul
paragraphe. Cette commande est fragile (@pxref{\protect}).

@example
\begin@{picture@}(0,0)
  ...
  \put(1,2)@{\parbox@{4.5cm@}@{\raggedright Le graphique étant une
    droite sur une échelle logarithmique, la relation est
    exponentielle.@}@}
\end@{picture@}
@end example

Le @var{contenu} est traité en mode texte (@pxref{Modes}) ainsi
@LaTeX{} fait des sauts de ligne de sorte à former un paragraphe. Mais
il ne fabriquera pas plusieurs paragraphes ; pour cela, utilisez un
environnement @code{minipage} (@pxref{minipage}).

Les options d'une @code{\parbox} (à l'exception du @var{contenu}) sont
les mêmes que pour une @code{minipage}. Par commodité on rappelle ces
options ici plus bas, mais se référer à @ref{minipage} pour une
description complète.

Il y a deux arguments obligatoires. La @var{largeur} est une longueur
rigide (@pxref{Lengths}). Elle règle la largeur de la boîte dans
laquelle @LaTeX{} compose le @code{contenu}. Le @code{contenu} est le
texte qui est placé dans cette boîte. Il ne devrait pas avoir de
composants qui fabriquent des paragraphes.

Il y a trois arguments optionnels, @var{position}, @var{hauteur}, et
@var{pos-interne}. La @var{position} donne l'alignement vertical de la
@dfn{parbox} relativement au texte alentour. La valeurs prises en charge
sont @code{c} ou @code{m} pour que le centre selon la dimension
verticale de la parbox soit aligné avec le centre de la ligne de texte
adjacente (c'est le réglage par défaut), ou @code{t} pour accorder la
ligne du haut de la parbox avec la ligne de base du texte alentour, ou
@code{b} pour accorder la ligne du bas.

L'argument optionnel @var{hauteur} l'emporte sur la hauteur naturelle de
la boîte.

L'argument optionnel @var{pos-interne} contrôle la position du
@var{contenu} au sein de la parbox. Sa valeur par défaut est la valeur
de @var{position}. Les valeurs possibles sont : @code{t} pour placer le
@var{contenu} en haut de la boîte, @code{c} pour le centrer
verticalement, @code{b} pour le place en bas de la boîte, et @code{s}
pour le dilater verticalement (pour cela, le texte doit contenir de
l'espace vertical élastique).

@node \raisebox
@section @code{\raisebox}
@findex \raisebox

Synopsis, l'un parmi les suivants :

@example
\raisebox@{@var{distance}@}@{@var{texte}@}
\raisebox@{@var{distance}@}[@var{hauteur}]@{@var{texte}@}
\raisebox@{@var{distance}@}[@var{hauteur}][@var{profondeur}]@{@var{texte}@}
@end example

La commande @code{\raisebox} élève ou abaisse du @var{texte}.  Cette
commande est fragile (@pxref{\protect}).

L'exemple suivant fabrique une commande pour noter la restriction d'une
fonction en abaissant le symbole barre verticale.

@c credit: egreg https://tex.stackexchange.com/a/278631/121234
@example
\newcommand*\restreinte[1]@{\raisebox@{-.5ex@}@{$|$@}_@{#1@}@}
$f\restreinte@{A@}$
@end example

Le premier argument obligatoire spécifie la longueur dont le @var{texte}
doit être élevé. C'est une longueur rigide (@pxref{Lengths}). Si elle
est négative alors @var{texte} est abaissé. Le @var{texte} lui-même est
traité en mode LR, aussi il ne doit pas contenir de saut de ligne
(@pxref{Modes}).

Les arguments optionnels @var{hauteur} et @var{profondeur} sont des
dimensions.  S'ils sont spécifiés, ils l'emportent sur les hauteur et
profondeur naturelles de la boîte que @LaTeX{} obtient en composant
@var{texte}.

@anchor{raisebox depth}
@anchor{raisebox height}
@anchor{raisebox width}
@anchor{raisebox totalheight}
Au sein des arguments @var{distance}, @var{hauteur}, et @var{profondeur}
vous pouvez utiliser les longueurs suivantes qui font référence à la
dimension de la boîte que @LaTeX{} obtient en composant @var{texte} :
@code{\depth}, @code{\height}, @code{\width}, @code{\totalheight} (qui
est la somme de la hauteur et de la profondeur de la boîte).

L'exemple suivant aligne deux graphiques sur leur bord supérieur (@pxref{Graphics}).

@c credit: FAQ https://texfaq.org/FAQ-topgraph
@example
\usepackage@{graphicx,calc@}  % dans le préambule
   ...
\begin@{center@}
  \raisebox@{1ex-\height@}@{%
    \includegraphics[width=0.4\linewidth]@{lion.png@}@}
  \qquad
  \raisebox@{1ex-\height@}@{%
    \includegraphics[width=0.4\linewidth]@{meta.png@}@}
\end@{center@}
@end example

@noindent
Le premier @code{\height} est la hauteur de @file{lion.png} alors que le
second est celle de @file{meta.png}.


@node \sbox & \savebox
@section @code{\sbox} & @code{\savebox}

@anchor{\sbox}
@anchor{\savebox}
@findex \sbox
@findex \savebox
@cindex boîte, sauvegarde


Synopsis, l'un parmi les suivants :

@example
\sbox@{@var{cmd-boîte}@}@{@var{texte}@}
\savebox@{@var{cmd-boîte}@}@{@var{texte}@}
\savebox@{@var{cmd-boîte}@}[@var{largeur}]@{@var{texte}@}
\savebox@{@var{cmd-boîte}@}[@var{largeur}][@var{pos}]@{@var{texte}@}
@end example

Cette commande compose @var{texte} dans une boîte de la même façon
qu'avec @code{\makebox} (@pxref{\mbox & \makebox}), à ceci près qu'au
lieu de sortir la boîte résultante, elle la sauvegarde dans un registre
boîte référencé par la variable nommée @var{cmd-boîte}. Le nom de
variable @var{cmd-boîte} commence avec une controblique, @code{\}. Vous
devez préalablement avoir alloué le registre boîte @var{cmd-boîte} avec avec
@code{\newsavebox} (@pxref{\newsavebox}). La commande @code{\sbox} est
robuste, alors que @code{\savebox} est fragile (@pxref{\protect}).

L'exemple suivant crée et utilise un registre boîte.

@example
\newsavebox@{\nomcomplet@}
\sbox@{\nomcomplet@}@{Cadet Rousselle@}
  ...
\usebox@{\nomcomplet@} a trois maisons qui n'ont ni poutres, ni chevrons !
C'est pour loger les hirondelles,
Que direz-vous d'\usebox@{\nomcomplet@} ?
@end example

@noindent
Un avantage de l'usage répété d'un registre boîte par rapport à une
variable macro @code{\newcommand} est l'efficacité, c.-à-d.@: que
@LaTeX{} n'a pas besoin de répéter la composition du contenu.  Voir
l'exemple plus bas.

Les deux invocations de commande
@code{\sbox@{@var{cmd-boîte}@}@{@var{texte}@}} et
@code{\savebox@{@var{cmd-boîte}@}@{@var{texte}@}} sont sensiblement
équivalentes.  Quant aux troisième et quatrième, les arguments
optionnels vous permettent de spécifier la largeur de la boîte comme
@var{largeur}, et la position du texte au sein de cette boîte comme
@var{position}.  @xref{\mbox & \makebox}, pour une description complète.

Dans les commandes @code{\sbox} et @code{\savebox} le @var{texte} est
composé en mode LR, aussi il n'a pas de sauts de lignes (@pxref{Modes}).
Si vous utilisez ce qui suit alors @LaTeX{} ne produit pas d'erreur mais
ignore ce que vous voulez faire : si vous entrez
@code{\sbox@{\nouvreg@}@{test \\ test@}} et @code{\usebox@{\nouvreg@}}
alors vous obtenez @samp{testtest}, et si vous entrez
@code{\sbox@{\nouvreg@}@{test \par test@}} et @code{\usebox@{\nouvreg@}}
alors vous obtenez @samp{test test}, mais ni erreur ni avertissement.
La solution est d'utiliser une @code{\parbox} ou une @code{minipage}
comme dans l'exemple qui suit :

@c credit: egreg https://tex.stackexchange.com/a/41668/121234
@example
\newsavebox@{\unreg@}
\savebox@{\unreg@}@{%
  \begin@{minipage@}@{\linewidth@}
    \begin@{enumerate@}
      \item Premier article
      \item Second article
    \end@{enumerate@}
  \end@{minipage@}@}
  ...
\usebox@{\unreg@}
@end example

En exemple de l'efficacité de réutiliser le contenu d'un registre boîte,
ce qui suit place la même image sur chaque page du document en le
plaçant dans l'en-tête.  @LaTeX{} ne la compose qu'une fois.

@example
\usepackage@{graphicx@}  % tout cela dans le préambule
\newsavebox@{\cachetreg@}
\savebox@{\cachetreg@}@{%
  \setlength@{\unitlength@}@{2.5cm@}%
  \begin@{picture@}(0,0)%
     \put(1.5,-2.5)@{%
       \begin@{tabular@}@{c@}
          \includegraphics[height=5cm]@{companylogo.png@} \\
          Bureau du Président
       \end@{tabular@}@}
  \end@{picture@}%
@}
\markright@{\usebox@{\cachetreg@}@}
\pagestyle@{headings@}
@end example

@noindent
L'environnement @code{picture} est bien adapté pour régler finement le
placement.

Si le registre @code{\noreg} n'a pas déjà été défini alors vous obtenez
quelque chose du genre de @samp{Undefined control sequence. <argument>
\noreg}.

@node lrbox
@section @code{lrbox}
@findex lrbox

Synopsis :

@example
\begin@{lrbox@}@{@var{cmd-boîte}@}
  @var{texte }
\end@{lrbox@}
@end example

Ceci est la forme par environnement des commandes @code{\sbox} et
@code{\savebox}, et leur est équivalente. @xref{\sbox & \savebox}, pour
une description complète.

Le @var{texte} au sein de l'environnement est sauvegardé dans un
registre boîte auquel la variable @code{@var{cmd-boîte}} fait
référence. Le nom de variable @var{cmd-boîte} doit commencer par une
controblique, @code{\}. Vous devez avoir alloué ce registre boîte
préalablement avec @code{\newsavebox} (@pxref{\newsavebox}). Dans
l'exemple suivant l'environnement est commode pour entrer le
@code{tabular} :

@example
\newsavebox@{\jhreg@}
\begin@{lrbox@}@{\jhreg@}
  \begin@{tabular@}@{c@}
    \includegraphics[height=1in]@{jh.png@} \\
    Jim Hef@{@}feron
  \end@{tabular@}
\end@{lrbox@}
  ...
\usebox@{\jhreg@}
@end example


@node \usebox
@section @code{\usebox}
@findex \usebox
@cindex boîte, utilise une boîte sauvegardée

Synopsis :

@example
\usebox@{@var{cmd-boîte}@}
@end example

La commande @code{\usebox} produit la boîte la plus récemment
sauvegardée dans le registre boîte @var{cmd-boîte} par une commande
@code{\sbox} ou @code{\savebox}, ou l'environnement
@code{lrbox}. @xref{\sbox & \savebox}, pour plus ample information et
des exemples. (Notez que le nom de la variable @var{cmd-boîte} commence
par une controblique, @code{\}). Cette commande est robuste
(@pxref{\protect}).

@node Color
@chapter Couleur

@cindex couleur

Vous pouvez colorer du texte, des filets, etc. Vous pouvez également
colorer l'intérieur d'une boîte ou une page entière et écrire du texte
par dessus.

La prise en charge des couleurs se fait via un paquetage
supplémentaire. Aussi, toutes les commandes qui suivent ne fonctionnent
que si le préambule de votre document contient
@code{\usepackage@{color@}}, qui fournit le paquetage standard.

Beaucoup d'autres paquetages complètent également les possibilités de
@LaTeX{} en matière de couleurs.  Notamment @file{xcolor} est largement
utilisé et étend significativement les possibilités décrites ici, y
compris par l'ajout des modèles de couleur @samp{HTML} et @samp{Hsb}.

@menu
* Option du paquetage color: Color package options. Options de chargement du paquetage standard.
* Modèles de couleur: Color models.                 Comment sont représentées les couleurs.
* Commandes pour @code{color}: Commands for color.           Les commandes disponibles.
@end menu


@node Color package options
@section Options du paquetage @code{color}
@cindex color options du paquetage
@cindex options, paquetage color

Synopsis (à mettre dans le préambule du document) :

@example
\usepackage[@var{liste d'option séparées par des virgules}]@{color@}
@end example

Quand vous chargez le paquetage @file{color} il y a deux types d'options
disponibles.

Le premier spécifie le @dfn{pilote d'impression}.  @LaTeX{} ne contient
pas d'information sur les différents systèmes de sortie, mais au lieu de
cela dépend de l'information stockée dans un fichier.  Normalement vous
ne devriez pas spécifier les options de pilote dans le document, mais au
lieu de cela vous vous reposez sur les valeurs par défaut de votre
système. Un avantage de procéder ainsi est que cela rend votre document
portable entre systèmes.  Pour être complet nous incluons une liste des
pilotes.  Ceux présentement pertinents sont : @file{dvipdfmx},
@file{dvips}, @file{dvisvgm}, @file{luatex}, @file{pdftex},
@file{xetex}.  Les deux pilotes @file{xdvi} et @file{oztex} sont pour
l'essentiel des alias de @file{dvips} (et @file{xdvi} est monochrome).
Ceux qui ne devraient pas être utilisés pour de nouveaux systèmes récent
sont : @file{dvipdf}, @file{dvipdfm}, @file{dviwin}, @file{dvipsone},
@file{emtex}, @file{pctexps}, @file{pctexwin}, @file{pctexhp},
@file{pctex32}, @file{truetex}, @file{tcidvi}, @file{vtex} (et
@file{dviwindo} est un alias de @file{dvipsone}).

Les options du second type, autres que les pilotes, sont listées ci-dessous.

@table @code

@item monochrome
Désactive les commandes de couleur, de sorte qu'elles ne produisent pas
d'erreur, mais ne produisent pas non plus de couleurs.

@item dvipsnames
Rend disponible une liste de 68 noms de couleur qui sont d'usage
fréquent, en particulier dans des documents qui ne sont pas modernes.
Ces noms de couleurs étaient à l'origine fournis par le pilote
@file{dvips}, d'où le nom de l'option.

@item nodvipsnames
Ne charge pas cette liste de noms de couleur, faisant faire à @LaTeX{}
une toute petite économie d'espace mémoire.

@end table


@node Color models
@section Modèles de couleur

@cindex modèles de couleur

Un @dfn{modèle de couleur} est une façon de représenter les couleurs.
Les possibilités de @LaTeX{} dépendent du pilote d'impression. Toutefois,
les pilotes @file{pdftex}, @file{xetex}, et @file{luatex} sont de nos
jours de loin les plus largement utilisés. Les modèles ci-après
fonctionnent pour ces pilotes. À une exception près ils sont également
pris en charge par tous les autres pilotes d'impression utilisés
aujourd'hui.

Il est à noter qu'une combinaison de couleur peut être additive, ou
soustractive.  Les combinaisons additives mélangent les couleurs de la
lumière, de sorte que par exemple combiner des intensités pleines de
rouge, vert et bleu produit du blanc. Les combinaisons soustractives
mélangent les pigments, tels que les encres, de sorte que combiner des
intensités pleine de cyan, magenta et jaune produit du noir.

@table @code
@anchor{color models cmyk}
@item cmyk
Un liste séparée de virgule avec quatre nombres réel compris entre 0 et
1 inclus.  Le premier nombre est l'intensité du cyan, le deuxième celle
du magenta, et les autres celle du jaune et du noir.  Un valeur du
nombre de 0 signifie l'intensité minimale, alors que 1 correspond à
l'intensité pleine.  Ce modèle est fréquemment utilisé pour l'impression
de couleur. C'est un modèle soustractif.

@anchor{color models gray}
@item gray
Un unique nombre réel compris entre 0 et 1 inclus.  Les couleurs sont
des nuances de gris. Le nombre 0 produit du noir, alors que le 1 donne
du blanc.
@anchor{color models rgb}
@item rgb
Une liste séparée de virgules avec trois nombres réels compris entre 0
et 1, inclusive.  Le premier nombre est l'intensité de la composante
rouge, le deuxième correspond au vert, et le troisième au bleu. Une
valeur de 0 donnée au nombre signifie qu'en rien cette composante n'est
ajouté à la couleur, alors que 1 signifie que cela est fait à pleine
intensité.  C'est un modèle additif.

@anchor{color models RGB}
@item RGB
(pilotes @file{pdftex}, @file{xetex}, @file{luatex}) Une liste séparée
par des virgules avec trois entiers compris entre 0 et 255 inclus. Ce
modèle est une commodité pour utiliser @code{rgb} étant donnée qu'en
dehors de @LaTeX{} les couleurs sont souvent décrites dans un modèle
rouge-vert-bleu utilisant des nombres dans cette plage.  Les valeurs
entrées sont converties vers le modèle @code{rgb} en divisant par 255.

@anchor{color models named}
@item named
On accède au couleur par des noms tels que @samp{PrussianBlue}.  La
liste des noms dépend du pilote, mais tous prennent en charge les noms
@samp{black}, @samp{blue}, @samp{cyan}, @samp{green}, @samp{magenta},
@samp{red}, @samp{white}, et @samp{yellow} (Voir l'option
@code{dvipsnames} dans @ref{Color package options}).

@end table


@node Commands for color
@section Commandes pour @code{color}

@cindex color, commandes du paquetage

Voici les commandes disponibles avec le paquetage @file{color}.

@menu
* Define colors::            Nommer une couleur.
* Colored text::             Du texte ou des filets en couleur.
* Colored boxes::            Une boîte en couleur, par dessus laquelle écrire.
* Colored pages::            Une page entière en couleur.
@end menu


@node Define colors
@subsection Définir des couleurs
@cindex couleur
@cindex définir une couleur
@cindex couleur, définir

Synopsis :

@example
\definecolor@{@var{nom}@}@{@var{model}@}@{@var{spécification}@}
@end example

Donne le nom @var{nom} à la couleur. Par exemple, après
@code{\definecolor@{silver@}@{rgb@}@{0.75,0.75,0.74@}} vous pouvez
utiliser cette couleur avec @code{Hé ho,
\textcolor@{silver@}@{Silver@}~!}.

Cet exemple donne à la couleur un nom plus abstrait, de sort qu'on
puisse la changer sans que cela prête à confusion.

@example
\definecolor@{logocolor@}@{RGB@}@{145,92,131@}    % RGB nécessite pdflatex
\newcommand@{\logo@}@{\textcolor@{logocolor@}@{Les Brioches de Robert@}@}
@end example

Il est fréquent que les couleurs d'un document soient définies dans son
préambule, ou dans sa classe
@c différence entre classe et style ?
ou style, plutôt que dans le corps du document.

@node Colored text
@subsection Mettre du texte en couleur

@cindex couleur
@cindex coloré, texte
@cindex texte en couleur

Synopsis :

@example
\textcolor@{@var{nom}@}@{...@}
\textcolor[@var{modèle de couleur}]@{@var{spécification de couleur}@}@{...@}
@end example

@noindent ou

@example
\color@{@var{nom}@}
\color[@var{modèle de couleur}]@{@var{spécification}@}
@end example

Le texte affecté prend la couleur correspondante.  La ligne suivante

@example
\textcolor@{magenta@}@{Je suis Ozymandias, roi des rois~:@} Voyez mon œuvre, ô puissants, et desespérez~!
@end example

@noindent
met la première moitié en magenta alors que le reste est en noir.  Vous
pouvez utiliser une couleur déclarée avec @code{\definecolor} exactement
de la même façon dont nous venons d'utiliser la couleur prédéfinie
@samp{magenta}.

@example
\definecolor@{CriseDeLaQuarantaine@}@{rgb@}@{1.0,0.11,0.0@}
Je considère l'idée de m'acheter une \textcolor@{CriseDeLaQuarantaine@}@{voiture de sport@}.
@end example

Les deux formes de commandes @code{\textcolor} et @code{\color}
diffèrent en ce que la première forme prend le texte à colorer en
argument.  Ceci est souvent plus commode, ou tout du moins plus
explicite.  La seconde forme est une déclaration, comme dans @code{La
lune est composé de fromage @{\color@{vert@}@}}, de sorte qu'elle est en
vigueur jusqu'à la fin du groupe ou de l'environnement courant.  Ceci
est parfois utile quand on écrit des macros, ou comme ci-dessous où on
colore tout le contenu de l'environnement @code{center}, y compris les
lignes verticales et horizontales.

@example
\begin@{center@} \color@{blue@}
  \begin@{tabular@}@{l|r@}
    HG &HD \\ \hline
    BG &BD
  \end@{tabular@}
\end@{center@}
@end example

Vous pouvez utiliser des couleurs dans les équations.  Un document peut
avoir @code{\definecolor@{couleurvedette@}@{RGB@}@{225,15,0@}} dans le
préambule, et ensuite contenir cette équation :

@example
\begin@{equation@}
  \int_a^b \textcolor@{couleurvedette@}@{f'(x)@}\,dx=f(b)-f(a)
\end@{equation@}
@end example

Typiquement les couleurs utilisées dans un document sont déclarée dans
une classe ou dans un style mais il arrive qu'on désire fonctionner au
coup par coup.  C'est le cas d'usage des secondes forme du synopsis.

@example
Des couleurs de \textcolor[rgb]@{0.33,0.14,0.47@}@{violet@} et @{\color[rgb]@{0.72,0.60,0.37@}doré@} pour l'équipe
@end example

Le format de @var{spécification de couleur} dépend du modèle de couleur
(@pxref{Color models}).  Par exemple, alors que @code{rgb} prend trois
nombres, @code{gray} n'en prend qu'un.

@example
La sélection a été \textcolor[gray]@{0.5@}@{grisée@}.
@end example

Des couleurs au sein d'autres couleurs ne se combinent pas.  Ainsi

@example
\textcolor@{green@}@{une sorte de \textcolor@{blue@}@{bleu@}@}
@end example

@noindent
se termine par un mot en bleu, et non pas dans une combinaison de bleu
et de vert.

@c xx address coloring a line of a table?


@node Colored boxes
@subsection Faire des boîtes en couleur

@cindex couleur
@cindex colorées, boîtes
@cindex boîtes colorées

Synopsis :

@example
\colorbox@{@var{nom}@}@{...@}
\colorbox[@var{nom modèle}]@{@var{spécification couleur arrière-plan boîte}@}@{...@}
@end example

@noindent
ou

@example
\fcolorbox@{@var{couleur cadre}@}@{@var{couleur arrière-plan boîte}@}@{...@}
\fcolorbox[@var{nom modèle}]@{@var{spécification couleur cadre}@}@{@var{spécification arrière-plan boîte}@}@{...@}
@end example

Fabrique une boite avec la couleur d'arrière-plan indiquée.  La commande @code{\fcolorbox}
place un cadre autour de la boîte.  Par exemple ceci :

@example
Nom~:~\colorbox@{cyan@}@{\makebox[5cm][l]@{\strut@}@}
@end example

@noindent
fabrique une boîte de couleur cyan qui fait cinq centimètres de long et
dont la profondeur et la hauteur sont déterminées par le @code{\strut}
(de sorte que la profondeur est @code{-.3\baselineskip} et la hauteur
est @code{\baselineskip}).  Ceci met un texte blanc sur un arrière plan
bleu :

@example
\colorbox@{blue@}@{\textcolor@{white@}@{Welcome to the machine.@}@}
@end example

La commande @code{\fcolorbox} utilise les mêmes paramètres que
@code{\fbox} (@pxref{\fbox & \framebox}), à savoir @code{\fboxrule} et
@code{\fboxsep}, pour régler l'épaisseur du filet et de la séparation
entre l'intérieur de la boîte et le filet l'entourant.  Les valeurs par
défaut de @LaTeX{} sont @code{0.4pt} et @code{3pt} respectivement.

L'exemple suivant change l'épaisseur de la bordure en 0,8 points.
Notez qu'il est entre accolades de sorte que le changement cesse d'être
en vigueur à la fin de la seconde ligne.

@example
@{\setlength@{\fboxrule@}@{0.8pt@}
\fcolorbox@{black@}@{red@}@{En aucun cas ne tournez cette poignée.@}@}
@end example

@node Colored pages
@subsection Faire des pages en couleur

@cindex couleur
@cindex colorée, page
@cindex page colorée
@cindex arrière-plan coloré

Synopsis :

@example
\pagecolor@{@var{nom}@}
\pagecolor[@var{modèle de couleur}]@{@var{spécification de couleur}@}
\nopagecolor
@end example

Les deux premières commandes règlent l'arrière-plan de la page, et de
toutes les pages suivantes, à la couleur indiquée. Pour une explication
de la spécification dans la seconde forme @pxref{Colored text}.  La
troisième fait revenir l'arrière-plan à la normale, c.-à-d.@: un
arrière-plan transparent.  (Si cela n'est pas pris en charge, alors
utilisez @code{\pagecolor@{white@}}, bien que cela produit un
arrière-plan blanc au lieu de l'arrière-plan transparent par défaut.)

@example
 ...
\pagecolor@{cyan@}
 ...
\nopagecolor
@end example


@node Graphics
@chapter Graphiques

@cindex graphiques
@cindex graphics, paquetage

Vous pouvez utiliser des graphiques tel que des fichiers PNG ou PDF dans
vos documents @LaTeX{}.  Vous aurez besoin d'un paquetage supplémentaire
standard de @LaTeX{}.  Cet exemple montre en bref comment :

@example
\include@{graphicx@}  % dans le préambule
  ...
\includegraphics[width=0.5\linewidth]@{graphique.pdf@}
@end example

Pour utiliser les commandes décrites ici, le préambule de votre document
doit contenir soit @code{\usepackage@{graphicx@}}, soit
@code{\usepackage@{graphics@}}. (Le plus souvent, c'est @file{graphicx}
qui est préférable.)

Les graphiques peuvent être de deux types, matriciels ou vectoriels.
@LaTeX{} peut utiliser les deux.  Dans les graphiques matriciels le
fichier comprend pour chaque position dans un tableau une entrée
décrivant la couleur de celle-ci.  Un exemple de ceci est une
photographie en format JPG.  Dans un graphique vectoriel, le fichier
contient une liste d'instructions telles que @samp{dessine un cercle
avec tel rayon et tel centre}.  Un exemple de ceci est le dessin d'une
ligne produit par le programme Asymptote en format PDF.  En général les
graphiques vectoriels sont plus utiles car on peut les redimensionner
sans pixélisation ou autres problèmes, et parce que la plupart du temps
ils ont une taille plus petite.

Il y a des systèmes particulièrement bien adaptés pour produire des
graphiques pour un document @LaTeX{}.  Par exemple, qui vous permettent
d'utiliser les mêmes polices que dans votre document.  @LaTeX{} comprend
un environnement @code{picture} (@pxref{picture}) qui a des possibilités
de base.  En plus de cela, il y a d'autres façons d'inclure des
commandes de production de graphiques dans le document. Deux systèmes
pour cela sont les paquetages PSTricks et TikZ.  Il y a aussi des
systèmes externes à @LaTeX{} qui génèrent un graphique qu'on peut
inclure en utilisant les commandes de ce chapitre.  Il y a aussi deux
autres systèmes qui utilisent un langage de programmation : Asymptote et
MetaPost.  Encore un autre système qui utilise une interface graphique :
Xfig.  Une description complète des ces systèmes est hors du champ
d'application de ce document ; reportez vous à leur documentation sur le
CTAN.

@menu
* Options du paquetage graphics: Graphics package options. Options au chargement du paquetage.
* Configuration du paquetage graphics: Graphics package configuration.   Où sont les fichiers, quels types de fichiers.
* Commandes pour graphiques: Commands for graphics.  Les commandes disponibles.
@end menu


@node Graphics package options
@section Options du paquetage @code{graphics}

@cindex graphics, options du paquetage
@cindex options, paquetage graphics

Synopsis (à placer dans le préambule du document) :

@example
\usepackage[@var{liste d'option séparée par des virgules}]@{graphics@}
@end example

@noindent ou

@example
\usepackage[@var{liste d'option séparée par des virgules}]@{graphicx@}
@end example

Le paquetage @code{graphicx} a un format pour les arguments optionnels
passés à @code{\includegraphics} qui est commode (c'est le format
clef/valeur), ainsi c'est le meilleur des deux choix pour les nouveaux
documents. Quand vous chargez les paquetages @file{graphics} ou
@code{graphicx} avec @code{\usepackage} il y a deux sortes d'options
disponibles.

La première est que @LaTeX{} ne contient pas d'information concernant
les différents systèmes de sortie, mais au lieu de cela dépend de
l'information stockée dans un fichier @dfn{pilote d'impression}.
Normalement vous ne devriez pas spécifier l'option de pilote dans le
document, mais au lieu de cela vous reposer sur les valeurs par défaut
du système. Un avantage de procéder ainsi et que cela rend les documents
portables entre systèmes.

Pour être complet voici une liste des pilotes.  Ceux qui sont
actuellement pertinents sont : @file{dvipdfmx}, @file{dvips},
@file{dvisvgm}, @file{luatex}, @file{pdftex}, @file{xetex}.  Les deux
pilotes @file{xdvi} and @file{oztex} sont essentiellement des alias de
@file{dvips} (et @file{xdvi} est monochrome).  Ceux qu'on ne devrait pas
utiliser pour de nouveaux systèmes sont : @file{dvipdfmx}, @file{dvips},
@file{dvisvgm}, @file{luatex}, @file{pdftex}, @file{xetex}.  Les deux
pilotes @file{xdvi} et @file{oztex} sont essentiellement des alias de
@file{dvips} (et @file{xdvi} est monochrome).  Ceux qui ne devraient pas
être utilisés pour de nouveaux systèmes sont : @file{dvipdf},
@file{dvipdfm}, @file{dviwin}, @file{dvipsone}, @file{emtex},
@file{pctexps}, @file{pctexwin}, @file{pctexhp}, @file{pctex32},
@file{truetex}, @file{tcidvi}, @file{vtex} (et @file{dviwindo} est un
alias de @file{dvipsone}).  Ces pilotes sont stockés dans des fichiers
avec une extension @file{.def}, tels que @file{pdftex.def}.

La seconde sorte d'options est décrite ci-après.

@table @code
@item demo
Au lieu d'un fichier d'image, @LaTeX{} met un rectangle de 150 pt
sur 100 pt (à moins qu'une autre taille soit spécifiée dans la
commande @code{\includegraphics}).

@item draft
Aucun des fichiers graphiques n'est affiché, mais au lieu de cela le nom
du fichier est imprimé au sein d'une boîte de la bonne taille.  De sorte
à ce que la taille soit déterminée, le fichier doit être présent.

@item final
(Option par défaut) L'emporte sur toute options @code{draft} précédente,
de sorte que le document afficher le contenu des fichiers graphiques.

@item hiderotate
Ne montre pas le texte ayant subi une rotation.  (Ceci permet d'utiliser
une visionneuse ne prenant pas en charge le texte ayant subi une
rotation).
@c what does it show?

@item hidescale
Ne montre pas le texte rétréci/dilaté.  (Ceci permet d'utiliser une
visionneuse ne prenant pas en charge le texte ayant subi un
rétrécissement/une dilatation.)
@c what does it show?

@item hiresbb
Dans un fichier PS ou EPS la taille du graphique peut être spécifiée de
deux façons.  Les lignes @code{%%BoundingBox} décrivent la taille du
graphique en utilisant des multiples entiers d'un point PostScript,
c.-à-d.@: des multiples entiers d' 1/72 de pouce.  Une addition plus
récente au langage PostScript autorise les multiples décimaux, tel que
1.23, dans les lignes @code{%%HiResBoundingBox}.  Cette option fait que
@LaTeX{} lit la taille à partir de @code{%%HiResBoundingBox} plutôt que
de @code{%%BoundingBox}.

@end table

@node Graphics package configuration
@section  Configuration du paquetage @code{graphics}

@cindex graphics
@cindex graphics, paquetage
@cindex configuration du paquetage graphics
@cindex EPS, fichiers
@cindex JPEG, fichiers
@cindex JPG, fichiers
@cindex PDF, fichiers graphiques
@cindex PNG, fichiers

Ces commandes configurent la façon dont @LaTeX{} recherche le graphique
dans le système le fichier.

Le comportement du code de recherche dans le système de fichier dépend
nécessairement de la plateforme.  Dans ce document nous couvrons
@value{GNULinux}, @value{AppleMacintosh}, et @value{MSWindows}, étant
donné que ces systèmes ont des configurations typiques.  Pour les autres
situations consultez la documentation dans @file{grfguide.pdf}, ou le
source @LaTeX{}, ou la documentation de votre distribution @TeX{}.

@menu
* \graphicspath::                Répertoire dans lequel chercher.
* \DeclareGraphicsExtensions::   Types de fichier, tels que JPG ou EPS.
* \DeclareGraphicsRule::         Comment manipuler les types de fichier.
@end menu


@node \graphicspath
@subsection @code{\graphicspath}

@findex \graphicspath

Synopsis :

@example
\graphicspath@{@var{liste des répertoires entre les accolades}@}
@end example

Déclare une liste de répertoires dans lesquels rechercher des fichiers
graphiques.  Ceci permet d'écrire plus tard quelque chose du genre de
@code{\includegraphics@{lion.png@}} au lieu de donner son chemin.

@LaTeX{} recherche toujours en premier les fichiers graphiques dans le
répertoire courant (et dans le répertoire de sortie, si spécifié ;
@pxref{output directory}). La déclaration ci-dessous dit au système de
regarder ensuite dans le sous-répertoire @file{img}, et ensuite
@file{../img}.

@example
\usepackage@{graphicx@}   % ou graphics; à mettre dans le préambule
  ...
\graphicspath@{ @{img/@} @{../img/@} @}
@end example

La déclaration @code{\graphicspath} est optionnelle.  Si vous ne
l'incluez pas, alors le comportement par défaut de @LaTeX{} est de
rechercher dans tous les endroits où il recherche d'habitude un fichier
(il utilise la commande @code{\input@@path} de @LaTeX{}).  En
particulier, dans ce cas l'un l'un des endroits où il regarde est le
répertoire courant.

Mettez chaque nom de répertoire entre accolades ; en particulier,
ci-dessus on a écrit @samp{@code{@{img@}}}.  Faites ainsi même si il n'y
a qu'un seul répertoire.  Chaque nom de répertoire doit se terminer par
une oblique vers l'avant @file{/}.  Ceci est vrai même sur @value{MSWindows}, où
la bonne pratique est d'utiliser des obliques vers l'avant pour tous les
séparateurs de répertoire puisque cela rend le document portable vers
d'autres plateformes.  Si vous avez des espaces dans votre nom de
répertoire alors utilisez des guillemets anglais, comme dans
@code{@{"mes docs/"@}}. Enfreindre l'une de ces règles aura pour effet
que @LaTeX{} rapportera une erreur @code{Error: File `@var{filename}' not found}.

Pour faire simple, l'algorithme est que dans l'exemple qui suit, après
avoir regardé dans le répertoire courant,

@example
\graphicspath@{ @{img/@} @{../img/@} @}
...
\usepackage@{lion.png@}
@end example

@noindent
pour chacun des répertoires listés, @LaTeX{} le concatène avec le nom du
fichier et recherche le fichier ainsi nommé, eh cherchant
@file{img/lion.png} et puis @file{../img/lion.png}.  Cet algorithme
signifie que la commande @code{\graphicspath} ne recherche pas
récursivement dans les sous-répertoires : si vous faites
@code{\graphicspath@{@{a/@}@}} et que le graphique est dans
@file{a/b/lion.png} alors @LaTeX{} ne le trouvera pas.  Cela signifie
aussi que vous pouvez utiliser des chemins absolus tels que
@code{\graphicspath@{@{/home/jim/logos/@}@}} ou
@code{\graphicspath@{@{C:/Users/Albert/Pictures/@}@}}.  Toutefois, faire
cela rend votre document non portable.  (Vous pourriez préserver la
portabilité en ajustant vos le paramètre @code{TEXINPUTS} du fichier de
configuration des réglages système @TeX{} ; voir la documentation de
votre système).

Vous pouvez utiliser @code{\graphicspath} n'importe où dans le
document. Vous pouvez l'utiliser plus d'une fois.  Sa valeur peut être
affichée avec @code{\makeatletter\typeout@{\Ginput@@path@}\makeatother}.

Les répertoires sont à donner relativement au fichier de base.  Pour
faire clair, supposez que vous travaillez sur un document basé sur
@file{livre/livre.tex} et qu'il contienne
@code{\include@{chapitres/chap1@}}.  Si dans @file{chap1.tex} vous
mettez @code{\graphicspath@{@{graphiques/@}@}} alors @LaTeX{} ne
cherchera pas les graphiques dans @file{livre/chapitres/graphiques},
mais dans @file{livre/graphiques}.


@node \DeclareGraphicsExtensions
@subsection @code{\DeclareGraphicsExtensions}

@findex \DeclareGraphicsExtensions

Synopsis :

@example
\DeclareGraphicsExtensions@{@var{liste séparée par des virgules d'extensions de fichier}@}
@end example

Déclare les extensions de nom de fichier à essayer.  Ceci vous permet de
spécifier l'ordre dans lequel les formats graphiques sont choisis quant
les fichiers graphiques sont inclus en donnant le nom de fichier sans
l'extension, comme dans @code{\includegraphics@{courbe_de_fonction@}}.

Dans l'exemple qui suit, @LaTeX{} trouve les fichiers au format PNG
avant les fichiers PDF.

@example
\DeclareGraphicsExtensions@{.png,PNG,.pdf,.PDF@}
  ...
\includegraphics@{lion@}   % trouve @file{lion.png} avant @file{lion.pdf}
@end example

@noindent
Du fait que le nom @file{lion} ne contient pas de point, @LaTeX{}
utilise la liste d'extension.  Pour chacun des répertoires dans la liste
de chemins graphiques (@pxref{\graphicspath}), @LaTeX{} essaie les
extensions dans l'ordre donné.  S'il ne trouve aucun fichier
correspondant après avoir essayé tous les répertoires et toutes les
extensions, alors il renvoie une erreur @samp{! LaTeX Error: File
`@file{lion}' not found}.  Notez que vous devez inclure le point au
début de chaque extension.

Du fait que les noms de fichiers sous @value{GNULinux} et
@value{AppleMacintosh} sont sensibles à la casse, la liste des
extensions de fichier est sensible à la casse sur ces plateformes.  La
plateforme @value{MSWindows} n'est pas sensible à la casse.

Vous n'êtes pas tenu d'inclure @code{\DeclareGraphicsExtensions} dans
votre document ; le pilote d'impression a une valeur par défaut
raisonnable.  Par exemple, la version la plus récente de
@file{pdftex.def} a cette liste d'extensions.

@example
.pdf,.png,.jpg,.mps,.jpeg,.jbig2,.jb2,.PDF,.PNG,.JPG,.JPEG,.JBIG2,.JB2
@end example

@PkgIndex{grfext}
Pour modifier cet ordre, utilisez le paquetage @package{grfext}.

Vous pouvez utiliser cette commande n'importe où dans le document.  Vous
pouvez l'utiliser plus d'une fois.  On peut afficher la valeur courante
avec @code{\makeatletter\typeout@{\Gin@@extensions@}\makeatother}.


@node \DeclareGraphicsRule
@subsection @code{\DeclareGraphicsRule}

@findex \DeclareGraphicsRule

Synopsis :

@example
\DeclareGraphicsRule@{@var{extension}@}@{@var{type}@}@{@var{extension taille-fic}@}@{@var{commande}@}
@end example

Déclare comment gérer les fichiers graphiques dont le nom se termine en
@var{extension}.

L'exemple suivant déclare que tous les fichiers dont le nom est de la
forme @file{nomfichier-sans-point.mps} doivent être traités comme une
sortie de MetaPost, ce qui signifie que le pilote d'impression utilisera
son code de gestion MetaPost pour traiter le fichier en entrée.

@example
\DeclareGraphicsRule@{.mps@}@{mps@}@{.mps@}@{@}
@end example

La déclaration suivante

@example
\DeclareGraphicsRule@{*@}@{mps@}@{*@}@{@}
@end example

@noindent
dit à @LaTeX{} qu'il doit traiter comme une sortie MetaPost tout fichier
avec extension non couverte par une autre règle, ainsi il couvre
@file{nomfichier.1}, @file{nomfichier.2}, etc.

Ici on décrit les quatre arguments.

@table @var
@item extension
L'extension de nom de fichier à laquelle la règle considérée
s'applique. L'extension commence au premier point dans le nom de
fichier, en incluant le point.  Utiliser l'astérisque, @code{*}, pour
désigner la comportement par défaut pour toutes les extensions non
déclarées.

@item type
Le type du fichier considéré.  Ce type est une chaîne de caractères qui
doit être définie dans le pilote d'impression. Par exemple, les fichiers
avec les extensions @file{.ps}, @file{.eps}, ou @file{.ps.gz} peuvent
tous être classifiés sous le type @code{eps}.  Tous les fichiers de même
type sont traités en entrée avec la même commande interne par le pilote
d'impression. Par exemple, les types de fichiers reconnus par
@file{pdftex} sont : @code{jpg}, @code{jbig2}, @code{mps}, @code{pdf},
@code{png}, @code{tif}.

@item extension taille-fic
L'extension du fichier à lire pour déterminer la taille du graphique, si
un tel fichier existe. Elle peut être la même que @var{extension} mais
aussi être différente.

Considérons par exemple un graphique PostScript.  Pour le rendre plus
petit, il peut être compressé en un fichier @file{.ps.gz}.  Les fichiers
compressé ne sont pas lu simplement par @LaTeX{} aussi vous pouvez
mettre l'information de boîte englobante dans une fichier séparé. Si
@var{extension taille-fic} est vide, alors vous devez spécifier
l'information de taille dans les arguments de @code{\includegraphics}.

Si le fichier pilote a une procédure pour lire les tailles de fichier
pour @code{type} alors elle est utilisée, sinon il utilise la procédure
pour lire les fichiers @file{.eps}.  (Ainsi vous pourriez spécifier la
taille d'un fichier @file{.bmp} dans un fichier avec une ligne
@code{%%BoundingBox} de style PostScript si aucun autre format
n'est disponible).

@item commande
Une commande à appliquer au fichier. La plupart du temps on laisse cet
argument vide. Cette commande doit commencer avec un caractère accent
grave.  Ainsi,
@code{\DeclareGraphicsRule@{.eps.gz@}@{eps@}@{.eps.bb@}@{`gunzip -c
#1@}} spécifie que tout fichier ayant une extension @file{.eps.gz} doit
être traité comme un fichier @code{eps}, avec l'information de boîte
englobante stockée dans le fichier ayant l'extension @file{.eps.bb}, et
que la commande @code{gunzip -c} sera exécuté sur votre plateforme pour
décompresser le fichier.

Une telle commande est spécifique à votre plateforme.  De plus, votre
système @TeX{} doit autoriser l'exécution de commandes externes ; par
mesure de sécurité les systèmes modernes restreignent l'exécution de
commandes à moins que vous l'autorisiez explicitement. Se référer à la
documentation de votre distribution @TeX{}.

@end table

@node Commands for graphics
@section Commandes du paquetage @code{graphics}

@cindex graphics, commandes du paquetage
@cindex commandes, paquetage graphics

Voici les commandes disponibles dans les paquetages @file{graphics} et
@file{graphicx}.

@menu
* \includegraphics::     Utiliser un graphique dans votre document.
* \rotatebox::           Faire une rotation sur une boîte incluant un graphique.
* \scalebox::            Dilater ou rétrécir une boîte incluant un graphique.
* \resizebox::           Dilater ou rétrécir une boîte incluant un graphique à un taille donnée.
@end menu


@node \includegraphics
@subsection @code{\includegraphics}

@cindex graphiques
@cindex graphics, paquetage
@cindex inclure des graphiques
@cindex importer des graphiques
@cindex EPS, fichiers
@cindex JPEG, fichiers
@cindex JPG, fichiers
@cindex PDF, fichiers graphiques
@cindex PNG, fichiers
@findex \includegraphics

Synopsis pour le paquetage @file{graphics} :

@example
\includegraphics@{@var{nomfichier}@}
\includegraphics[@var{urx},@var{ury}]@{@var{nomfichier}@}
\includegraphics[@var{llx},@var{lly}][@var{urx},@var{ury}]@{@var{nomfichier}@}
\includegraphics*@{@var{nomfichier}@}
\includegraphics*[@var{urx},@var{ury}]@{@var{nomfichier}@}
\includegraphics*[@var{llx},@var{lly}][@var{urx},@var{ury}]@{@var{nomfichier}@}
@end example

Synopsis pour le paquetage @file{graphicx} :

@example
\includegraphics@{@var{nomfichier}@}
\includegraphics[@var{liste-à-clefs-valeurs}]@{@var{nomfichier}@}
\includegraphics*@{@var{nomfichier}@}
\includegraphics*[@var{liste-à-clefs-valeurs}]@{@var{nomfichier}@}
@end example

Inclut un fichier graphique.  La forme étoilée @code{\includegraphics*}
rogne le graphique à la taille spécifiée, alors que pour la forme
non-étoilée toute partie du graphique en dehors de la boîte de la taille
spécifiée se superpose à ce qui l'entoure.

Dans cet exemple

@example
\usepackage@{graphicx@}  % dans le préambule
  ...
\begin@{center@}
  \includegraphics@{trace.pdf@}
\end@{center@}
@end example

@noindent
on incorpore dans le document le graphique dans @file{plot.pdf}, centré
et à sa taille nominale.  Vous pouvez aussi donner un chemin au fichier,
comme dans @code{\includegraphics@{graphiques/trace.pdf@}}.  Pour
spécifier une liste de répertoire ou rechercher le fichier,
@pxref{\graphicspath}.

Si votre nom de fichier comprend des espaces, alors placer le entre
guillemets anglais. Par exemple comme dans
@code{\includegraphics@{"image complementaire.jpg"@}}.

La commande @code{\includegraphics@{@var{nomfichier}@}} décide du type
de graphique en segmentant @var{nomfichier} sur le premier point
(@samp{.}). Vous pouvez utiliser @var{nomfichier} sans extension de nom
de fichier, comme dans @code{\includegraphics@{turing@}} et @LaTeX{}
essaie une séquence d'extension telle que @code{.png} et @code{.pdf}
jusqu'à ce qu'il trouve un fichier avec cette extension
(@pxref{\DeclareGraphicsExtensions}).

Si votre fichier comprend des points avant l'extension alors vous
pouvez les cacher avec des accolades, comme dans
@code{\includegraphics@{@{plot.2018.03.12.a@}.pdf@}}.  Ou, si vous
utilisez le paquetage @file{graphicx} alors vous pouvez utiliser les
options @code{type} et @code{ext} ; voir plus bas.  Ces problèmes de
noms de fichiers, et d'autres sont aussi traités par le paquetage
@file{grffile}.

L'exemple ci-après place un graphique dans un environnement
@code{figure} de sorte que @LaTeX{} puisse le déplacer sur la page
suivante si le faire rentrer dans la page courante rend mal
(@pxref{figure}).

@example
\begin@{figure@}
  \centering
  \includegraphics[width=3cm]@{rayonxpoumon.jpg@}
  \caption@{Ça saute aux yeux : vous ne devriez arrêter de fumer@}  \label@{fig:rayon-x@}
\end@{figure@}
@end example

L'exemple suivant place un graphique non flottant, de sorte à garantir
qu'il apparaisse à ce point-ci du document même si cela oblige @LaTeX{}
à dilater le texte ou à recourir à des zones blanches sur la page.  Le
graphique est centré est a une légende.

@example
\usepackage@{caption@}  % dans le préambule
  ...
\begin@{center@}
  \includegraphics@{sans/images.png@}
  \captionof@{figure@}@{L'esprit de la nuit@} \label@{sans:images@} % optionnel
\end@{center@}
@end example

L'exemple suivant place une boîte avec un graphique le long d'une autre
boîte contenant du texte, les deux boîtes étant verticalement centrées :

@example
\newcommand*@{\vcenteredhbox@}[1]@{\begin@{tabular@}@{@@@{@}c@@@{@}@}#1\end@{tabular@}@}
  ...
\begin@{center@}
  \vcenteredhbox@{\includegraphics[width=0.4\textwidth]@{trace@}@}
  \hspace@{1em@}
  \vcenteredhbox@{\begin@{minipage@}@{0.4\textwidth@}
                   \begin@{displaymath@}
                     f(x)=x\cdot \sin (1/x)
                   \end@{displaymath@}
                 \end@{minipage@}@}
\end@{center@}
@end example

Si vous utilisez le paquetage @file{graphics} alors les seules options
disponibles concernent la taille du graphique (mais voir
@ref{\rotatebox} et @ref{\scalebox}).  Quand un argument optionnel est
présent alors c'est @code{[@var{urx},@var{ury}]} et il donne les
coordonnées du coin en haut à droite de l'image, comme une paire de
dimensions @TeX{} (@pxref{Units of length}).  Si les unités sont omises,
alors par défaut l'unité considérée est le @code{bp}.  Dans ce cas, le
coin en bas à gauche de l'image est supposé être à @code{(0,0)}.  Si deux
arguments optionnels sont présents alors le premier est
@code{[@var{llx},@var{lly}]}, et il spécifie les coordonnées du coin en
bas à gauche de l'image.  Ainsi,
@code{\includegraphics[1in,0.618in]@{...@}} demande que le graphique
soit placé de sorte a avoir 1 pouce de largeur et 0,618 pouces de hauteur
et donc son origine est à (0,0).

Le paquetage @file{graphicx} vous offre beaucoup plus d'options.
Spécifiez les sous la forme de paires clef-valeur, comme ci-après :

@example
\begin@{center@}
  \includegraphics[width=3cm,angle=90]@{lion@}
  \hspace@{2em@}
  \includegraphics[angle=90,width=3cm]@{lion@}
\end@{center@}
@end example

@noindent
Les options sont lues de gauche à droite. Ainsi le premier graphique
ci-dessus est dilaté à une largeur de 3@dmn{cm}, et ensuite subit une
rotation de 90@dmn{degrés}, alors que le second subit la rotation en
premier et ensuite est dilaté à 3@dmn{cm} de largeur.  Ainsi, à moins
que le graphique soit parfaitement carré, à la fin les deux n'ont pas
les mêmes largeurs et hauteurs.

Il y a beaucoup d'options.  Les principales sont listées en premier.

@cindex boîte englobante
@cindex englobante, boîte
Notez qu'un graphique est placé par @LaTeX{} dans une boîte, qu'on
désigne traditionnellement comme sa @dfn{boîte englobante} (distincte de
la BoundingBox PostScript décrite plus bas).  La zone sur laquelle le
graphique s'imprime peut aller au delà de cette boîte, ou s'inscrire
dans cette boîte, mais quand @LaTeX{} fabrique une page il assemble des
boîtes, et celle-ci est la boîte allouée pour le graphique.

@table @code
@anchor{includegraphics width}
@item width
Le graphique est affiché de sorte que sa boîte englobante ait cette
largeur.  Un exemple est @code{\includegraphics[width=2.5cm]@{trace@}}.
Vous pouvez utiliser les unités de longueur standardes de @TeX{}
(@pxref{Units of length}) et également il est commode d'utiliser
@code{\linewidth}, ou, dans un document recto-verso, @code{\columnwidth}
(@pxref{Page layout parameters}).  Un exemple est qu'en utilisant le
paquetage @file{calc} vous pouvez rendre le graphique 1@dmn{cm} plus
étroit que la largeur du texte avec
@code{\includegraphics[width=\linewidth-1.0cm]@{hefferon.jpg@}}.

@item height
@anchor{includegraphics height}

Le graphique est affiché de sorte que sa boîte englobante est de cette
hauteur.  Vous pouvez utiliser les unités de longueur standardes de
@TeX{} (@pxref{Units of length}), et également il est commode d'utiliser
@code{\pageheight} et @code{\textheight} (@pxref{Page layout
parameters}).  Par exemple, la commande
@code{\includegraphics[height=0.25\textheight]@{godel@}} rend le
graphique d'une hauteur d'un quart de celle de la zone de texte.

@item totalheight
@anchor{includegraphics totalheight}

Le graphique est affiché de sorte que sa boîte englobante ait cette
hauteur plus profondeur.  Ceci diffère de la hauteur si le graphique a
subi une rotation. Par exemple, s'il a subi une rotation de -90 degrés
alors il a une hauteur nulle mais une grande profondeur.

@item keepaspectratio
@anchor{includegraphics keepaspectratio}
Si réglé à @code{true}, ou juste spécifié comme ci-dessous

@example
@code{\includegraphics[...,keepaspectratio,...]@{...@}}
@end example

@noindent
et que vous donnez en option à la fois @code{width} et @code{height} (ou
@code{totalheight}), alors @LaTeX{} rendra le graphique aussi grand que
possible sans le déformer. C'est à dire que @LaTeX{} assure que le
graphique n'est ni plus large que @code{width} ni plus haut que
@code{height} (ou @code{totalheight}).

@item scale
Facteur par lequel dilater/contracter le graphique.  On peut rendre
 graphique à deux fois sa taille nominale avec
 @code{\includegraphics[scale=2.0]@{...@}}.  Ce nombre peut prendre
 n'importe quelle valeur ; un nombre entre 0 et 1 contracte le graphique
 et un nombre négatif lui applique une réflexion.

@item angle
Applique une rotation au graphique.  L'angle est exprimé en degrés et
dans le sens antihoraire.  La rotation est effectuée autour de l'origine
donnée par l'option @code{origin} ; s'y référer.  Pour une description
complète de la composition de matière ayant subi une rotation,
@pxref{\rotatebox}.

@item origin
Le point du graphique autour duquel la rotation s'effectue.  Les valeurs
possibles sont toute chaîne contenant un ou deux caractères parmi :
@code{l} pour gauche (left), @code{r} pour droite (right), @code{b} pour
bas, @code{c} pour centré, @code{t} pour haut (top), et @code{B} pour
ligne de base.  Ainsi, saisir la commande
@code{\includegraphics[angle=180,origin=c]@{moon@}} a pour effet de
mettre la figure tête en bas en tournant autour du centre de l'image,
alors que la commande
@code{\includegraphics[angle=180,origin=lB]@{LeBateau@}} fait la
rotation autour du point gauche de la ligne de base.  (Le caractère
@code{c} désigne le centre horizontal dans @code{bc} ou @code{tc}, mais
le centre vertical dans @code{lc} @code{rc}). Le réglage par défaut est
@code{lB}.

Pour faire une rotation autour d'un point arbitraire,
@pxref{\rotatebox}.

@end table

Voici maintenant des options moins usuelles.

@table @code
@anchor{includegraphics viewport}
@item viewport
Désigne une sous-région du graphique à afficher.  Prend quatre
arguments, séparés par des espaces et exprimés comme des dimensions
@TeX{}, comme dans @code{\includegraphics[.., viewport=0in 0in 1in
0.618in]@{...@}}.  Quand l'unité est omise, les dimensions sont par
défaut en big points, @code{bp}.  Elle sont prises relativement à
l'origine spécifiée par la boîte englobante.  Voir aussi l'option
@code{trim}.

@anchor{includegraphics trim}
@item trim
Désigne les parties du graphique à ne pas afficher.  Prend quatre
arguments, séparés par des espaces, et exprimés comme des dimensions
@TeX{} dimensions, comme dans @code{\includegraphics[.., trim= 0in 0.1in
0.2in 0.3in, ...]@{...@}}.  Ceci donne la quantité du graphique à ne pas
afficher, c.-à-d.@: que @LaTeX{} rogne l'image de 0 pouce sur la gauche
left, 0.1 pouce sur la bas, 0.2 pouce sur la droite, et 0.3 pouce sur le
haut.  Voir aussi l'option @code{viewport}.

@anchor{includegraphics clip}
@item clip
Si réglé à @code{true}, ou juste spécifié comme ci-dessous

@example
\includegraphics[...,clip,...]@{...@}
@end example

@noindent
alors le graphique est rogné à sa boîte englobante.  Ceci revient au
même que d'utiliser la forme étoilée de la commande,
@code{\includegraphics*[...]@{...@}}.

@anchor{includegraphics page}
@item page
Donne le numéro de page pour un fichier PDF multi-page.  La valeur par
défaut est @code{page=1}.

@anchor{includegraphics pagebox}
@item pagebox
Spécifie quelle boîte englobante utiliser pour les fichiers PDF parmi
les suivantes @code{mediabox}, @code{cropbox}, @code{bleedbox},
@code{trimbox}, ou @code{artbox}.  Les fichiers PDF n'ont pas la
BoundingBox que les fichiers PostScript ont, mais peuvent spécifier
jusqu'à quatre rectangles prédéfinis. La boîte @code{mediabox} donne les
frontières du médium physique. La boîte @code{cropbox} est la région à
laquelle le contenu de la page devrait être épinglé quand il est
affiché.  La boite @code{bleedbox} la région à laquelle le contenu de la
page devrait être épinglé en production. La boîte @code{trimbox} est
correspond aux dimensions désirées de la page finie.  La boîte
@code{artbox} est de l'étendue du contenu de la page ayant du sens.  Le
pilote règle la taille de l'image en se basant sur la @code{cropbox} si
elle est présente, sinon il n'utilise pas les autres, avec un ordre de
préférence propre au pilote. La boîte @code{mediabox} est toujours présente.

@anchor{includegraphics interpolate}
@item interpolate
Active ou désactive l'interpolation des images matricielles par la
visionneuse.  On peut régler l'option avec @code{interpolate=true} ou
juste comme ci-dessous :

@example
\includegraphics[...,interpolate,...]@{...@}
@end example

@anchor{includegraphics quiet}
@item quiet
N'écrit pas d'information dans le journal.  On peut régler l'option avec
@code{quiet=true} ou juste en la spécifiant avec
@code{\includegraphics[...,quiet,...]@{...@}},

@anchor{includegraphics draft}
@item draft
Lorsqu'on règle l'option avec @code{draft=true} ou juste ainsi

@example
\includegraphics[...,draft,...]@{...@}
@end example

@noindent
alors le graphique n'apparaît pas dans le document, ce qui permet
éventuellement d'économiser l'imprimante couleur.  À la place @LaTeX{}
place une boîte vide de la bonne taille avec le nom du fichier imprimé
dedans.

@end table

Les options suivantes traitent de la boîte englobante pour les fichiers
graphique de type PostScript Encapsulé, leur taille est spécifié avec
une ligne @code{%%BoundingBox} qui apparaît dans le fichier.  Elle a
quatre valeurs donnant la coordonnée @math{x} inférieure, la coordonnée
@math{y} inférieure, la coordonnée @math{x} supérieure, et la coordonnée
@math{y} supérieure.  L'unité est le point PostScript, équivalent au big
point de @TeX{}, à savoir 1/72 de pouce.  Par exemple, si un fichier
@file{.eps} a la ligne @code{%%BoundingBox 10 20 40 80} alors sa taille
naturelle est 30/72 de pouce de large pour 60/72 de pouce de haut.

@table @code
@anchor{includegraphics bb}
@item bb
Spécifie la boîte englobante de la région affichée.  L'argument est
constitué de quatre dimensions séparées par des espaces, comme dans
@code{\includegraphics[.., bb= 0in 0in 1in 0.618in]@{...@}}.
D'ordinaire @code{\includegraphics} lit les ces nombre BoundingBox dans
le fichier EPS automatiquement, de sorte que cette option n'est utile que
si la définition de la boîte englobante est absente du fichier ou si
vous désirez la changer.

@anchor{includegraphics bbllx}
@anchor{includegraphics bblly}
@anchor{includegraphics bburx}
@anchor{includegraphics bbury}
@item bbllx, bblly, bburx, bbury
Règle la boîte englobante.  Ces quatre options là sont obsolètes,
mais existent encore pour maintenir la rétrocompatibilité avec des
paquetages anciens.

@anchor{includegraphics natwidth}
@anchor{includegraphics natheight}
@item natwidth, natheight
Une alternative à @code{bb}.  Régler

@example
\includegraphics[...,natwidth=1in,natheight=0.618in,...]@{...@}
@end example

@noindent
revient au même que régler @code{bb=0 0 1in 0.618in}.

@anchor{includegraphics hiresbb}
@item hiresbb
Si réglé à @code{true}, ou juste spécifié comme dans

@example
\includegraphics[...,hiresbb,...]@{...@}
@end example

@noindent
alors @LaTeX{} recherche la ligne @code{%%HiResBoundingBox} plutôt que
la ligne @code{%%BoundingBox}.  (La ligne @code{BoundingBox} n'utilise
que des nombres entiers naturels alors que la ligne
@code{HiResBoundingBox} utilise des décimaux ; les deux utilisent une
unité équivalente au big point de @TeX{}, 1/72 de pouce). Pour
l'emporter sur un réglage précédent à @code{true}, on peut la régler à
@code{false}.

@end table

Les options suivantes permettent à l'utilisateur de l'emporter sur la
méthode par laquelle @LaTeX{} choisit le type d'un graphique en fonction
de son extension de nom de fichier.  Par exemple avec
@code{\includegraphics[type=png,ext=.xxx,read=.xxx]@{lion@}} le fichier
@file{lion.xxx} est lu comme s'il s'agissait de @file{lion.png}. Pour
plus ample information, @pxref{\DeclareGraphicsRule}.

@table @code
@anchor{includegraphics type}
@item type
Spécifie le type de graphique.

@anchor{includegraphics ext}
@item ext
Spécifie l'extension du graphique. À n'utiliser qu'en conjonction avec
l'option @code{type}.

@anchor{includegraphics read}
@item read
Spécifie l'extension du fichier lu. À n'utiliser qu'en conjonction avec
l'option @code{type}.

@anchor{includegraphics command}
@item command
Spécifie une commande à appliquer à ce fichier. À n'utiliser qu'en
conjonction avec l'option @code{type}.  @xref{Command line options},
pour une discussion sur l'activation de la fonctionnalité @code{\write18}
pour exécuter des commandes externes.

@end table


@node \rotatebox
@subsection @code{\rotatebox}

@cindex rotation
@cindex rotation, appliquer à un graphique
@cindex rotation, appliquer à du texte
@findex \rotatebox

Synopsis si vous utilisez le paquetage @package{graphics} :

@example
\rotatebox@{@var{angle}@}@{@var{matière}@}
@end example

Synopsis si vous utilisez le paquetage @package{graphicx} :

@example
\rotatebox@{@var{angle}@}@{@var{matière}@}
\rotatebox[@var{liste-à-clefs-valeurs}]@{@var{angle}@}@{@var{matière}@}
@end example

Place @var{matière} dans une boîte et lui applique une rotation de
@var{angle} degrés dans le sens antihoraire.

L'exemple suivant applique une rotation de quarante-cinq degrés aux
en-têtes de colonnes.

@example
\begin@{tabular@}@{ll@}
  \rotatebox@{45@}@{Caractère@} &\rotatebox@{45@}@{alphabet marin@}   \\
  A                         &ALPHA  \\
  B                         &BRAVO
\end@{tabular@}
@end example

Le @var{matière} peut être quoi que ce soit qui aille dans une boîte, y
compris un graphique.

@example
  \rotatebox[origin=c]@{45@}@{\includegraphics[width=2.5cm]@{lion@}@}
@end example

Pour placer la matière auquel on désire appliquer une rotation, la
première étape est que @LaTeX{} met @var{matière} dans une boîte, avec
un point de référence sur la ligne de base à gauche.  La deuxième étape
est la rotation, par défaut autour du point de référence.  La troisième
étape est que @LaTeX{} calcule une boîte englobante de matière après
rotation.  Quatrièmement, @LaTeX{} déplace cette boîte horizontalement
de sorte que son bord de gauche coïncide avec le bord de gauche de la
boîte de la première étape (il n'est pas nécessaire qu'elles coïncident
verticalement).  Cette nouvelle boîte englobante, dans sa nouvelle
position, est celle que @LaTeX{} utilisera au moment de composer cette
matière.

Si vous utilisez le paquetage @package{graphics} alors la rotation est
autour du point de référence de la boîte.  Si vous utilisez le paquetage
@package{graphicx} alors voici les options qu'on peut mettre dans
@var{liste-à-clefs-valeurs}, mais notez qu'on peut obtenir le même effet
sans ce paquetage, excepté pour les options @code{x} et @code{y}.

@table @code
@item origin
Le point de la boîte du @var{matière} autour duquel la rotation se
produit.  Les valeurs possibles sont toute chaîne contenant un ou deux
caractères pris parmi : @code{l} pour gauche (left), @code{r} droite
(@identity{right}), @code{b} pour bas, @code{c} pour centre, @code{t}
pour haut (top), et @code{B} pour ligne de base (@identity{baseline}).
Ainsi, la première ligne ci-dessous :

@example
\rotatebox[origin=c]@{180@}@{LaLune@}
\rotatebox[origin=lB]@{180@}@{LeBateau@}
@end example

@noindent
retourne l'image haut en bas autour de son centre, alors que la seconde
la retourne autour de l'extrémité gauche de sa ligne de base.  (Le
caractère @code{c} donne le centre horizontal dans @code{bc} ou
@code{tc} mais donne le centre vertical dans @code{lc} ou @code{rc}, et
donne les deux dans @code{c}).  Le réglage par défaut est @code{lB}.

@item x, y
Spécifiez un point de rotation arbitraire avec
@code{\rotatebox[x=@var{dimension @TeX{}},y=@var{dimension
@TeX{}}]@{...@}} (@pxref{Units of length}).  Ces paramètres donnent le
décalage relatif au point de référence de la boîte.

@item units
Cette clef vous permet d'utiliser une autre unité que celle par défaut,
à savoir les degrés antihoraires. Régler @code{units=-360} change la
direction en degrés horaires, et régler @code{units=6.283185} change
l'unité en radians antihoraires.

@end table


@node \scalebox
@subsection @code{\scalebox}

@cindex graphiques, dilatation & contraction
@cindex graphiques, changer d'échelle
@cindex dilater
@cindex contracter
@cindex changer la taille
@cindex texte, dilater
@cindex texte, contracter
@cindex texte, changer la taille
@findex \scalebox
@findex \reflectbox

Synopsis :

@example
\scalebox@{@var{facteur horizontal}@}@{@var{matière}@}
\scalebox@{@var{facteur horizontal}@}[@var{facteur vertical}]@{@var{matière}@}
\reflectbox@{@var{matière}@}
@end example

Applique une homothétie au @var{matière}.

Dans l'exemple suivant on divise la taille par deux, à la fois
horizontalement et verticalement, du premier texte, et on double la
taille du second :

@example
\scalebox@{0.5@}@{BOIS MOI@} et \scalebox@{2.0@}@{Mange Moi@}
@end example

Si vous ne précisez pas le @var{facteur vertical} optionnel, alors par
défaut il prend la même valeur que le @var{facteur horizontal}.

Vous pouvez utiliser cette commande pour changer la taille d'un
graphique, comme dans :

@example
\scalebox@{0.5@}@{\includegraphics@{lion@}@}
@end example

@noindent
Si vous utilisez le paquetage @package{graphicx} alors vous pouvez
accomplir la même chose avec les arguments optionnels
d'@code{\includegraphics} (@pxref{\includegraphics}).

La commande @code{\reflectbox} abrège
@code{\scalebox@{-1@}[1]@{@var{matière}@}}.  Ainsi, @code{orizabus
\reflectbox@{orizabus@}} affiche le mot @samp{orizabus} immédiatement
suivi de son image par réflexion selon un axe vertical.


@node \resizebox
@subsection @code{\resizebox}

@cindex graphiques, dilater
@cindex graphiques, contracter
@cindex graphiques, homothétie
@cindex graphics, changer la taille
@cindex dilater
@cindex contracter
@cindex homothétie
@cindex changer la taille
@cindex texte, dilater
@cindex texte, contracter
@cindex texte, homothétie sur du
@cindex texte, changer la taille
@findex \resizebox

Synopsis :

@example
\resizebox@{@var{longueur horizontale}@}@{@var{longueur verticale}@}@{@var{matière}@}
\resizebox*@{@var{longueur horizontale}@}@{@var{longueur verticale}@}@{@var{matière}@}
@end example

Étant donnée une taille, telle que @code{3cm}, transforme le
@var{matière} pour qu'il prenne cette taille. Si soit @var{longueur
horizontale} soit @var{longueur verticale} est un point
d'exclamation @code{!} alors l'autre argument est utilisé pour
déterminer un facteur d'échelle appliqué aux deux directions.

Dans l'exemple suivant on rend le graphique 1,3@dmn{cm} de large et on
le dilate/contracte verticalement selon le même facteur pour ne pas
changer ses proportions.

@example
\resizebox@{1.3cm@}@{!@}@{\includegraphics@{lion@}@}
@end example

La forme non étoilée @code{\resizebox} considère @var{longueur
verticale} comme la hauteur de la boîte alors que la forme étoilée
@code{\resizebox*} la considère comme la somme hauteur + profondeur.
Par exemple, rendez le texte d'une hauteur+profondeur de 6@dmn{mm} avec
@code{\resizebox*@{!@}@{6mm@}@{\parbox@{9cm@}@{Cette boîte a à la fois
de la hauteur et de la profondeur.@}@}}.

Vous pouvez utiliser @code{\depth}, @code{\height}, @code{\totalheight},
et @code{\width} pour vous référer aux dimensions originales de la
boîte. Ainsi, rendez le texte d'une largeur de 5@dmn{cm} tout en lui
conservant sa hauteur originale avec
@code{\resizebox@{5cm@}@{\height@}@{Cinq centimètres@}}.


@node Special insertions
@chapter Insertions spéciales

@LaTeX{} fournit des commandes pour insérer les caractères qui ont une
signification spéciale mais ne correspondent à aucun caractère simple
que vous pouvez taper.

@menu
* Caractères réservés: Reserved characters.     Insérer @samp{# $ % & @{ @} _ ~ ^ \}
* Capitale et bas de casse: Upper and lower case. Changer la casse du texte.
* Symboles d'une police: Symbols by font position.    Insérer des symboles d'une police par leur numéro.
* Symboles dans du texte: Text symbols.            Insérer d'autres symboles non-lettre dans le texte.
* Accents::                 Insérer des accents.
* Lettres latines supplémentaires: Additional Latin letters.  Insérer d'autres caractères non-Américain.
* inputenc@comma{}, paquetage: inputenc package. Régler le codage de texte du fichier d'entrée.
* \rule::                   Insérer des lignes et des  rectangles.
* \today::                  Insérer la date du jour.
@end menu


@node Reserved characters
@section Caractères réservés
@cindex caractères réservés
@cindex réservés, caractères
@cindex caractères spéciaux
@cindex spéciaux, caractères

@LaTeX{} réserve les caractères suivant à un usage spécial (par exemple,
le signe pourcent @code{%} sert aux commentaires) c'est pourquoi on les
appelle @dfn{caractères réservés} ou @dfn{caractères spéciaux}. Ils sont
chacun l'objet d'une discussion ailleurs dans ce manuel.

@example
# $ % & @{ @} _ ~ ^ \
@end example

@findex \#
@findex \$
@findex \%
@findex \&
@findex \_
@findex \@{
@findex \@}
Si vous voulez qu'un caractère réservé soit imprimé comme lui-même, dans
la même police que le corps du texte, alors pour tous les caractères
hormis les trois derniers de cette liste il suffit de les faire précéder
d'une controblique @code{\}. Ainsi saisir @code{\$1.23}
produit @code{$1.23} en sortie.

@findex \~
@findex \^
@findex \textbackslash
Quant aux trois derniers caractères, pour faire un tilde dans la police
du corps du texte utilisez @code{\~@{@}} (sans les accolades cela
mettrait un accent tilde sur le caractère suivant). De même pour faire
un accent circonflexe dans la police du corps du texte utilisez
@code{\^@{@}}. Pour faire une controblique dans dans la police du corps
de texte, saisissez @code{\textbackslash@{@}}.

Pour produire les caractères réservés dans la police tapuscrite utilisez
@code{\verb!!} comme ci-dessous (la double controblique @code{\\} n'est
là que pour aller à la ligne en sortie) :

@example
\begin@{center@}
  \# \$ \% \& \@{ \@} \_ \~@{@} \^@{@} \textbackslash \\
  \verb!# $ % & @{ @} _ ~ ^ \!
\end@{center@}
@end example


@node Upper and lower case
@section Capitales et bas de casse

@cindex Capitales
@cindex Bas de casse
@cindex Casse de caractères
@cindex Changer la casse de caractères

Synopsis :

@example
\uppercase@{@var{texte}@}
\lowercase@{@var{texte}@}
\MakeUppercase@{@var{texte}@}
\MakeLowercase@{@var{texte}@}
@end example

Change la casse des caractères.  Les commandes primitives de @TeX{}
@code{\uppercase} et @code{\lowercase} ne fonctionnent que pour les
26 lettres sans diacritiques a-z et A-Z. Les commandes @LaTeX{}
@code{\MakeUppercase} et @code{\MakeLowercase} changent aussi les
caractères accessibles par des commandes telles que @code{\ae} ou
@code{\aa}.  Ces commandes @code{\MakeUppercase} et
@code{\MakeLowercase} sont robustes, mais elles ont des arguments
mouvants (@pxref{\protect}).

Ces commandes ne changent pas la casse des lettres utilisées dans le nom
d'une commande au sein de @var{texte}. Mais par contre elles changent la
casse de tout autre lettre latine au sein de l'argument @var{texte}.
Ainsi, @code{\MakeUppercase@{Soit $y=f(x)$}@} produit @samp{SOIT
Y=F(X)}.  Un autre exemple est que le nom de tout environnement est
changé, de sorte que @code{\MakeUppercase@{\begin@{tabular@}
... \end@{tabular@}@}} produit une erreur puisque la première moitié est
changée en @code{\begin@{TABULAR@}}.

@LaTeX{} utilise la même table pour changer la casse tout au long du
document. La table utilisée est conçue pour le codage T1 ; ceci
fonctionne bien avec les polices standardes de @TeX{} pour tous les
alphabets latins, mais cause des problèmes avec d'autres alphabets.

Pour changer la casse du texte qui résulte d'une macro au sein de
@var{texte} il est nécessaire de faire un développement.  Dans l'exemple
qui suit la macro @code{\Nomecole} produit @samp{UNIVERSITÉ DE MATHÉMATIQUES}.

@example
\newcommand@{\nomecole@}@{Universit\'e de math\'ematiques@}
\newcommand@{\Nomecole@}@{\expandafter\MakeUppercase\expandafter@{\nomecole@}@}
@end example

@PkgIndex{textcase}
Le paquetage @package{textcase} comble certaines des lacunes des commandes
standardes @code{\MakeUppercase} et @code{\MakeLowerCase} de @LaTeX{}.

@PkgIndex{mfirstuc}
Pour mettre en capitale seulement la première lettre d'un mot, on peut
utiliser le paquetage @package{mfirstuc}.

@PkgIndex{expl3}
@cindex Wright, Joseph

Gérer toutes les règles concernant la casse spécifiée par Unicode, par
ex. pour les scripts non latins, est une tâche bien plus conséquente que
ce qui avait été considéré dans les @TeX{} et @LaTeX{} d'origine.  Cela
a été implémenté dans le paquetage @package{expl3} à compter de
2020. L'article « @identity{Case changing: From @TeX{} primitives to the Unicode
algorithm} », (Joseph Wright, @cite{TUGboat} 41:1,
@url{https://tug.org/TUGboat/tb41-1/tb127wright-case.pdf}), donne un bon
aperçu du sujet, passé et présent.

@node Symbols by font position
@section Symboles appelés par leur position dans une police

@findex \symbol
@cindex accéder à un caractère quelconque d'une police
@cindex symboles d'une police, par leur numéro
@cindex police, symboles par leur numéro

Vous pouvez accéder à n'importe quel caractère de la police courante en
utilisant son numéro avec la commande @code{\symbol}. Par exemple, le
caractère espace visible utilisé dans la commande @code{\verb*} a le
code décimal 32 dans la police standarde tapuscrite Computer Modern,
ainsi on peut le taper avec @code{\symbol@{32@}}.

Vous pouvez également spécifier le numéro en octal (base 8) en utilisant
un préfixe @code{'}, ou en hexadécimal (base 16) avec un préfixe
@code{"}, ainsi l'espace visible de code 32 en décimal pourrait tout aussi bien être écrit
comme @code{\symbol@{'40@}} ou @code{\symbol@{"20@}}.


@node Text symbols
@section Symboles en texte

@cindex texte, symboles
@cindex symboles texte
@PkgIndex{textcomp}
@cindex TS1, codage
@LaTeX{} fournit des commandes pour générer divers symboles qui ne sont
pas des lettres dans le cours du texte.  Certaines d'entre elles, en
particulier les plus obscures, ne sont pas disponibles en OT1. Depuis la
parution de février 2020 de @LaTeX{} tous ces symboles sont disponibles
par défaut ; avant cela, il était nécessaire d'utiliser le paquetage
@package{textcomp} pour certains d'entre eux (techniquement, ce qui sont
dans le codage de police @code{TS1}).

@ftable @code

@item \copyright
@itemx \textcopyright
@cindex droit d'auteur, symbole
@cindex symbole droit d'auteur
Le symbole « droit d'auteur », @copyright{}.

@item \dag
@cindex obèle, dans le texte
Le symbole obèle (dans le texte).

@item \ddag
@cindex double obèle, dans le texte
Le symbole double obèle (dans le texte).

@item \LaTeX
@cindex @LaTeX{}, logo
@cindex logo @LaTeX{}
Le logo @LaTeX{}.

@item \LaTeXe
@cindex @LaTeX{}2e logo
@cindex logo @LaTeX{}2e
Le logo @LaTeX{}2e.

@item \guillemotleft @r{(@guillemotleft{})}
@itemx \guillemotright @r{(@guillemotright{})}
@itemx \guilsinglleft @r{(@guilsinglleft{})}
@itemx \guilsinglright @r{(@guilsinglright{})}
@cindex guillemets double
@cindex guillemets simple
@cindex chevron gauche, guillemets
@cindex chevron droit, guillemets
@cindex chevron double, guillemets
@cindex chevron simple, guillemets
@cindex guillemets français
@cindex français, guillemets
Guillemets à chevron double et simple, utilisés communément en français :
@guillemotleft{}, @guillemotright{}, @guilsinglleft{}, @guilsinglright{}.

@item \ldots
@itemx \dots
@itemx \textellipsis
@cindex points de suspension
@cindex suspension, points de
Des points de suspension (trois points sur la ligne de base) :
`@dots{}'.  @code{\ldots} et @code{\dots} peuvent également être
utilisés en mode mathématique.

@item \lq
@cindex gauche, guillemet-apostrophe simple de
@cindex ouvrant, , guillemet-apostrophe simple
guillemet-apostrophe simple de gauche (ouvrant) : `.

@item \P
@itemx \textparagraph
@cindex paragraphe, symbole
@cindex Pied-de-mouche
Signe paragraphe :  @BES{¶,\P} (pied-de-mouche).

@item \pounds
@itemx \textsterling
@cindex livre, symbole
@cindex sterling, symbole
Livre sterling anglais : @pounds{}.

@item \quotedblbase @r{(@quotedblbase{})}
@itemx \quotesinglbase @r{(@quotesinglbase{})}
@cindex guillemet-virgule inférieur double
@cindex guillemet-virgule inférieur simple
@cindex inférieur, guillemet-virgule simple
@cindex inférieur, guillemet-virgule double
@cindex guillemet-virgule inférieur, simple et double
Guillemet-virgule inférieur double et simple : @quotedblbase{} et
@quotesinglbase{}.

@item \rq
@cindex droite, guillemet-apostrophe simple
@cindex fermant, guillemet-apostrophe simple
@cindex droite, guillemet anglais simple
@cindex fermant, guillemet anglais simple
Guillemet-apostrophe simple de droite (fermant) : '.

@item \S
\itemx \textsection
@cindex section, symbole
Signe section : @BES{§,\S}.

@item \TeX
@cindex logo @TeX{}
@cindex @TeX{}, logo
Le logo @TeX{}.

@item \textasciicircum
@cindex circonflexe ASCII, dans le texte
@cindex ASCII, circonflexe dans le texte
circonflexe ASCII : ^.

@item \textasciitilde
@cindex tilde ASCII, dans le texte
@cindex ASCII, tilde dans le texte
tilde ASCII : ~.

@item \textasteriskcentered
@cindex astérisque centré, dans le texte
@cindex centré, astérisque, dans le texte
Astérisque centré : *.

@item \textbackslash
@cindex controblique, dans le texte
Controblique : \.

@item \textbar
@cindex verticale, barre dans le texte
@cindex barre verticale, dans le texte
Barre verticale : |.

@item \textbardbl
@cindex barre verticale double, dans le texte
@cindex barre, double verticale, dans le texte
@cindex double, barre verticale, dans le texte
Barre verticale double.

@item \textbigcircle
@cindex Grand rond, symbole, dans le texte
@cindex rond, grand symbole, dans le texte
Symbole grand rond.

@item \textbraceleft
@cindex accolade gauche, dans le texte
@cindex gauche, accolade, dans le texte
Accolade gauche : @{.

@item \textbraceright
@cindex accolade droite, dans le texte
@cindex droite, accolade, dans le texte
Accolade droite : @}.

@item \textbullet
@cindex puce, dans le texte
Puce : @bullet{}.

@item \textcircled@{@var{lettre}@}
@cindex encerclée, lettre, dans le texte
@var{lettre} dans un cercle, comme dans @registeredsymbol{}.

@item \textcompwordmark
@itemx \textcapitalcompwordmark
@itemx \textascendercompwordmark
@c @cindex composite word mark, dans le texte
@c @cindex cap height
@c @cindex ascender height
Marque de mot composé (invisible).  La forme @code{\textcapital...} à la
hauteur de capitale de la fonte, alors que la forme
@code{\textascender...} a la hauteur de hampe.

@item \textdagger
@cindex obèle, dans le texte
Obèle : @math{\dag}.

@item \textdaggerdbl
@cindex obèle  double, dans le texte
@cindex double, obèle, dans le texte
Double-obèle : @math{\ddag}.

@item \textdollar @r{(ou @code{\$})}
@cindex dollar, signe
@cindex monnaie, dollar
Signe Dollar : $.

@item \textemdash @r{(ou @code{---})}
@cindex cadratin
@raggedright
Cadratin : ---. Utilisé pour la ponctuation, d'ordinaire similaire à une virgules ou des parenthèses comme dans « @code{Les éliminatoires --- si vous assez de chance pour y arriver --- c'est comme si ça se passait d'un trait.} »
@end raggedright

@item \textendash @r{(ou @code{--})}
@cindex cadratin, demi
@cindex demi-cadratin
Demi cadratin : --. Utilisé pour les plages en anglais comme dans « @code{see pages 12--14} ».

@item \texteuro
@cindex euro, symbole
@cindex monnaie, euro
Le symbole monétaire Euro : @euro{}.
@PkgIndex{eurosym}
Pour un dessin alternatif du glyphe, essayez le paquetage
@package{eurosym} ; de plus, la plupart des polices de nos jour sont
fournies avec leur propre symbole Euro (Unicode U+20AC).

@item \textexclamdown @r{(ou @code{!`})}
@cindex point d'exclamation culbuté
Point d'exclamation culbuté : @exclamdown{}.

@item \textfiguredash
@cindex caractère tiret numérique
Tiret utilisé entre les nombres, Unicode U+2012. Défini dans la parution
juin-2021 de @LaTeX{}. Quand utilisé avec pdf@TeX{}, approximé par un
demi-cadratin ; avec un moteur Unicode, soit le glyphe est composé s'il
est disponible dans la fonte courante, ou sinon l'avertissement habituel
« @identity{Missing character} » est inscrit au journal de compilation.

@item \textgreater
@cindex supérieur à, symbole dans le texte
Supérieur à : >.

@item \texthorizontalbar
@cindex barre horizontale, caractère
Caractère barre horizontale, Unicode U+2015. Défini dans la parution
juin-2021 de @LaTeX{}. Comportement similaire à @code{\textfiguredash}
ci-dessus ; l'approximation de pdf@TeX{} est un cadratin.

@item \textless
@cindex inférieur à, symbole dans le texte
Inférieur à : <.

@item \textleftarrow
@cindex flèche gauche, left, dans le texte
@cindex gauche, flèche, dans le texte
Flèche gauche.

@item \textnonbreakinghyphen
@cindex trait d'union insécable, caractère
@cindex insécable, caractère trait d'union
Caractère trait d'union insécable, Unicode U+2011. Défini dans la
parution juin-2021 de @LaTeX{}. Comportement similaire à
@code{\textfiguredash} ci-dessus ; l'approximation de pdf@TeX{} est un
trait d'union ASCII ordinaire (avec saut de ligne non-autorisé juste
après).

@item \textordfeminine
@itemx \textordmasculine
@cindex féminin, symbole ordinal
@cindex masculin, symbole ordinal
@cindex Ordinaux, féminin et masculin
@cindex Ordinaux espagnols, féminin et masculin
Symboles ordinaux féminin et masculin : @ordf{}, @ordm{}.

@item \textperiodcentered
@cindex point centré, dans le texte
@cindex centré, point, dans le texte
Point centré : @BES{·,\cdot}.

@item \textquestiondown @r{(ou @code{?`})}
@cindex point d'interrogation culbuté
Point d'interrogation culbuté : @questiondown{}.

@item \textquotedblleft @r{(ou @code{``})}
@cindex guillemet-apostrophe double culbuté
@cindex double, guillemet-apostrophe culbuté
Guillemet-apostrophe double culbuté : ``.

@item \textquotedblright @r{(ou @code{''})}
@cindex guillemet-apostrophe de droite double
@cindex double, guillemet-apostrophe de droite
Guillemet-apostrophe de droite double : ''.

@item \textquoteleft @r{(ou @code{`})}
@cindex guillemet-apostrophe simple culbuté
@cindex simple, guillemet-apostrophe culbuté
Guillemet-apostrophe simple culbuté : `.

@item \textquoteright @r{(ou @code{'})}
@cindex guillemet-apostrophe simple
@cindex simple, guillemet-apostrophe
Guillemet-apostrophe simple : '.

@item \textquotesingle
@cindex guillemet-apostrophe simple droit
@cindex simple droit, guillemet-apostrophe
@cindex droit, guillemet-apostrophe simple
Guillemet-apostrophe simple droit.  (Du codage TS1.)

@item \textquotestraightbase
@itemx \textquotestraightdblbase
@cindex guillemet droit simple  sur la ligne de base
@cindex droit, guillemet simple sur la ligne de base
@cindex guillemet droit double  sur la ligne de base
@cindex droit, guillemet double sur la ligne de base
Guillemets droit simple et double sur la ligne de base.

@item \textregistered
@cindex marque déposée, symbole
@cindex symbole marque déposée
Symbole « marque déposée » : @registeredsymbol{}.

@item \textrightarrow
@cindex flèche droite, dans le texte
@cindex droite, flèche, dans le texte
Flèche droite.

@item \textthreequartersemdash
@cindex trois-quarts, cadratin
@cindex cadratin, trois-quarts
Cadratin « trois quarts ».

@item \texttrademark
@cindex marque de fabrique, symbole
@cindex symbole marque de fabrique
Symbole marque de commerce : @BES{™,^{\hbox{TM}}}.

@item \texttwelveudash
@cindex deux-tiers cadratin
@cindex cadratin, deux tiers
Deux-tiers cadratin.

@item \textunderscore
@cindex souligné, dans le texte
@cindex tiret bas, dans le texte
Tiret bas : _.

@item \textvisiblespace
@cindex visible, symbole espace, dans le texte
@cindex espace visible, symbole, dans le texte
Symbole espace visible.

@end ftable


@node Accents
@section Accents

@cindex accents
@cindex signes diacritiques
@cindex diacritiques, signes
@cindex accentuées, lettres
@cindex accentués, caractères

@LaTeX{} a une prise en charge très large de beaucoup des scripts et
langages du monde, à travers ce qu'offre le paquetage @package{babel}.
Cette section ne tente pas de couvrir la totalité de cette prise en
charge.  Elle liste simplement les commandes @LaTeX{} cœur pour
créer des caractères accentués, et plus généralement des caractères
portant un signe diacritique.

Les commandes @code{\capital...}  produisent des formes alternatives
pouvant être utilisées avec les lettres capitales.  Elles ne sont pas
disponible avec l'OT1.

@table @code
@item \"
@itemx \capitaldieresis
@findex \" @r{(accent tréma)}
@findex \capitaldieresis
@cindex accent tréma
@cindex diacritique tréma

Produit une tréma, comme dans @"{o}.

@item \'
@itemx \capitalacute
@findex \' @r{(accent aigu)}
@findex \capitalacute
@cindex accent aigu
@cindex aigu, accent
@cindex diacritique accent aigu
Produit un accent aigu, comme dans @'{o}.  Dans l'environnement
@code{tabbing}, pousse la colonne courante à droite de la colonne
précédente (@pxref{tabbing}).

@item \.
@findex \. @r{(dot-over accent)}
@cindex accent point
@cindex accent point suscrit
@cindex accent point en chef
@cindex diacritique point suscrit
@cindex point en chef, diacritique
@cindex point suscrit, diacritique
Produit un point suscrit à la lettre qui suit, comme dans
@dotaccent{o}.

@item \=
@itemx \capitalmacron
@findex \= @r{(macron accent)}
@findex \capitalmacron
@cindex macron, diacritique
@cindex barre, diacritique
@cindex barre  par-dessus, accent
Produit un macron (une barre) suscrit à la lettre qui suit, comme
dans @={o}.

@item \^
@itemx \capitalcircumflex
@findex \^ @r{(accent circonflexe)}
@findex \capitalcircumflex
@cindex accent circonflexe
@cindex diacritique circonflexe
@cindex circonflexe, accent
@cindex circonflexe, diacritique
@cindex chapeau, accent
Produit un accent circonflexe (un chapeau)  suscrit à la lettre qui suit, comme dans @^{o}.

@item \`
@itemx \capitalgrave
@findex \` @r{(accent grave)}
@findex \capitalgrave
@cindex grave accent
Produit un accent grave suscrit à la lettre qui suit, comme dans
@`{o}.  Au sein de l'environnement @code{tabbing}, déplace le texte qui
suit à la marge de droite (@pxref{tabbing}).

@item \~
@itemx \capitaltilde
@findex \~ @r{(accent tilde)}
@findex \capitaltilde
@cindex diacritique tilde
@cindex tilde, diacritique
Produit un diacritique tilde suscrit à la lettre qui suit, comme dans
@~{n}.

@item \b
@findex \b @r{(accent barre-souscrite)}
@cindex diacritique barre-souscrite
@cindex diacritique macron-souscrit
@cindex barre-souscrite, diacritique
@cindex macron-souscrit, diacritique
Produit un diacritique barre souscrite à la lettre qui suit, comme dans
@ubaraccent{o}. Voir aussi @code{\underbar} ci-après.

@item \c
@itemx \capitalcedilla
@findex \c @r{(cédille)}
@findex \capitalcedilla
@cindex cédille, diacritique
@cindex diacritique cédille
Produit une cédille souscrite à la lettre qui suit, comme dans @,{c}.

@item \d
@itemx \capitaldotaccent
@findex \d @r{(dot-under accent)}
@findex \capitaldotaccent
@cindex diacritique point-souscrit
Produit un point souscrit à la lettre qui suit, comme dans
@udotaccent{o}.

@item \H
@itemx \capitalhungarumlaut
@findex \H @r{(tréma hongrois)}
@findex \capitalhungarumlaut
@cindex accent tréma hongrois
@cindex tréma hongrois, accent
@cindex diacritique tréma hongrois
@cindex tréma hongrois, diacritique
Produit un long tréma hongrois suscrit à la lettre qui suit, comme dans @H{o}.

@item \i
@findex \i @r{(i sans point)}
@cindex  i sans point
Produit un i sans point, comme dans `@dotless{i}'.

@item \j
@findex \j @r{(j sans point)}
@cindex j sans point
Produit un j sans point, comme dans `@dotless{j}'.

@item \k
@itemx \capitalogonek
@findex \k @r{(ogonek)}
@findex \capitalogonek
@cindex ogonek, diacritique
@cindex diacritique ogonek
Produit un ogonek, comme dans `@ogonek{o}'.  Non disponible dans le
codage OT1.

@item \r
@itemx \capitalring
@findex \r @r{(ring accent)}
@findex \capitalring
@cindex accent rond en chef
@cindex diacritique rond en chef
@cindex rond en chef, diacritique
Produit un rond en chef, comme dans `@ringaccent{o}'.

@item \t
@itemx \capitaltie
@itemx \newtie
@itemx \capitalnewtie
@findex \t @r{(tie-after accent)}
@findex \capitaltie
@findex \newtie
@findex \capitalnewtie
@cindex diacritique tirant suscrit
@cindex diacritique double-brève-renversée
@cindex accent double-brève-renversée
@cindex double-brève-renversée, diacritique
@cindex tirant suscrit, diacritique
Produit un tirant suscrit, ou double brève
renversée@inlinefmt{tex,@comma{} comme dans @samp{@tieaccent{oo}}}
(utilisé pour la translittération du Cyrillique dans la romanisation
ALA-LC). La commande @code{\t} attend que l'argument consiste en deux
caractères. La forme @code{\newtie} est centrée dans sa boîte.

@item \u
@itemx \capitalbreve
@findex \u @r{(brève, accent)}
@findex \capitalbreve
@cindex brève, accent
@cindex brève, diacritique
@cindex diacritique brève
Produit un accent brève, comme dans `@u{o}'.

@item \underbar
@findex \underbar
@cindex barre souscrite
@cindex barre au-dessous
Ce n'est pas vraiment un diacritique. Produit une barre au-dessous de
l'argument texte.  L'argument est toujours traité en mode horizontal.
La barre est toujours à une position fixée sous la ligne de base, de la
sorte elle traverse les descentes.  Voir aussi @code{\underline} dans
@ref{Over- and Underlining}. Voir aussi @code{\b} ci-avant.

@item \v
@itemx \capitalcaron
@findex \v @r{(brève, accent)}
@findex \capitalcaron
@cindex accent h@'{a}@v{c}ek
@cindex diacritique h@'{a}@v{c}ek
@cindex accent caron
@cindex diacritique caron
@cindex caron, diacritique
Produit un  accent h@'a@v{c}ek (caron), comme dans `@v{o}'.

@end table


@node Additional Latin letters
@section Lettres latines supplémentaires
@anchor{Non-English characters}

@cindex caractères spéciaux
@cindex spéciaux, caractères
@cindex caractères latins non diacrités
@cindex lettres latines non diacritées

Voici les commandes de base de @LaTeX{} pour insérer des caractères
utilisés généralement utilisés dans des langages autres que l'anglais.

@table @code

@item \aa
@itemx \AA
@findex \aa (@aa{})
@findex \AA (@AA{})
@cindex a rond-en-chef
@aa{} et @AA{}.

@item \ae
@itemx \AE
@findex \ae (@ae{})
@findex \AE (@AE{})
@cindex a, e dans l'a
@cindex e dans l'a
@cindex a e liés
@ae{} et @AE{}.

@item \dh
@itemx \DH
@findex \dh (@dh{})
@findex \DH (@DH{})
@cindex @identity{eth} islandais
@cindex @identity{eth}, lettre islandaise
Lettre islandaise @identity{eth} : @dh{} et @DH{}.  Non disponible dans le codage
@sc{OT1}, il vous faut le paquetage @file{fontenc} pour sélectionner un
autre codage de police, tel que @sc{T1}.

@item \dj
@itemx \DJ
@findex \dj
@findex \DJ
d et D barre, lettre d capitale et bas-de-casse avec une barre
traversant la hampe.  Non disponible dans le codage @sc{OT1}, il vous
faut le paquetage @file{fontenc} pour sélectionner un autre codage de
police, tel que @sc{T1}.

@item \ij
@itemx \IJ
@findex \ij (ij)
@findex \IJ (IJ)
@cindex lettre @identity{ij}, hollandais
@identity{ij} et @identity{IJ} (à ceci près que les deux lettres apparaissent plus liées qu'ici).

@item \l
@itemx \L
@findex \l (@l{})
@findex \L (@L{})
@cindex l polonais
@l{} et @L{}.

@item \ng
@itemx \NG
@findex \ng
@findex \NG
Lettre lapone @identity{eng}, utilisée aussi en phonétique.  Non disponible dans le codage
@sc{OT1}, il vous faut le paquetage @file{fontenc} pour sélectionner un
autre codage de police, tel que @sc{T1}.

@item \o
@itemx \O
@findex \o (@o{})
@findex \O (@O{})
@cindex oslash
@o{} et @O{}.

@item \oe
@itemx \OE
@findex \oe (@oe{})
@findex \OE (@OE{})
@cindex o e liés
@cindex o, e dans l'o
@cindex e dans l'o
@oe{} et @OE{}.

@item \ss
@itemx \SS
@findex \ss (@ss{})
@findex \SS (@identity{SS})
@cindex eszett lettre allemande
@cindex s long
@ss{} et @identity{SS}.

@item \th
@itemx \TH
@findex \th (@th{})
@findex \TH (@TH{})
@cindex islandaise, @identity{thorn}, lettre 
@cindex @identity{thorn}, lettre islandaise
Lettre islandaise @identity{thorn} : @th{} et @TH{}. Non disponible dans le codage
@sc{OT1}, il vous faut le paquetage @file{fontenc} pour sélectionner un
autre codage de police, tel que @sc{T1}.

@end table


@node inputenc package
@section paquetage @code{inputenc}

@findex inputenc

Synopsis :

@example
\usepackage[@var{nom-codage}]@{inputenc@}
@end example

Déclare que le codage du texte du fichier d'entrée est
@var{nom-codage}. Par défaut, quand ce paquetage n'est pas chargé, c'est
UTF-8.  Techniquement, la spécification du nom du codage est optionnelle,
mais en pratique il n'est pas utile de l'omettre.

@cindex codage des fichiers d'entrée
@cindex caractère, codage de
@cindex Unicode
Dans un fichier informatique, les caractères sont stockés selon un
schéma appelé le @dfn{codage}.  Il y a de nombreux différents
codages. Le plus simple est l'ASCII, il prend en charge 95 caractères
imprimables, soit trop peu pour la plupart des langages du monde. Par
exemple, pour composer un e tréma @samp{ë} dans un fichier source
@LaTeX{} codé en ASCII, on utilise la séquence @code{\"e}. Ceci
rendrait les fichiers source pour quoi que ce soit d'autre que
l'anglais difficiles à lire ; et même pour l'anglais il est commode
d'avoir un codage plus étendu.

La norme moderne de codage, d'une certaine façon une réunion des autres,
est l'UTF-8, l'une des représentations de l'Unicode. C'est le codage par
défaut de @LaTeX{} depuis 2018.

Le paquetage @code{inputenc} permet à @LaTeX{} de savoir quel codage est
utilisé. Par exemple, la commande suivante dit explicitement que le
fichier d'entrée est en UTF-8 (notez l'absence de tiret).

@example
\usepackage[utf8]@{inputenc@}
@end example

Attention : n'utilisez @code{inputenc} qu'avec le moteur pdf@TeX{}
(@pxref{@TeX{} engines}).  (Les moteurs Xe@TeX{} et Lua@TeX{} supposent
que le fichier d'entrée est codé en UTF-8). Si vous invoquez @LaTeX{}
avec soit la commande @command{xelatex} soit la commande
@command{lualatex}, et essayez de déclarer un codage distinct d'UTF-8
avec @code{inputenc}, comme par ex.@: @code{latin1}, alors vous
obtiendrez l'erreur @code{inputenc is not designed for xetex or luatex}.

Une erreur du paquetage @code{inputenc} telle que @code{Invalid UTF-8
byte "96} signifie que le fichier d'entrée contient de la matière qui ne
suit pas le schéma de codage. Souvent ces erreurs proviennent de la copie
de matière issue d'un document utilisant un codage différent de celui du
fichier d'entrée ; l'erreur donnée en exemple provient d'un guillemet
anglais simple copié d'une page web utilisant @code{latin1} vers un
fichier d'entrée @LaTeX{} utilisant UTF-8.  La solution la plus simple
consiste à remplacer tout caractère non-UTF-8 avec leur équivalent UTF-8,
ou d'utiliser une commande ou un caractère équivalent en @LaTeX{}.

@findex \inputencoding
@anchor{\inputencoding}
Dans certains documents, tel que des collections d'articles de revue
écrits pas différents auteurs, changer le codage en milieu de document
peut s'avérer nécessaire. Utiliser la commande
@code{\inputencoding@{@var{nom-codage}@}}.  Les valeurs les plus usuelles
pour @var{nom-codage} sont : @code{ascii}, @code{latin1}, @code{latin2},
@code{latin3}, @code{latin4}, @code{latin5}, @code{latin9},
@code{latin10}, et @code{utf8}.


@node \rule
@section @code{\rule}
@findex \rule

Synopsis :

@example
\rule[@var{élévation}]@{@var{largeur}@}@{@var{épaisseur}@}
@end example

la commande @code{\rule} produit un @dfn{filet}, c.-à-d.@: une ligne ou
un rectangle.  Les arguments sont :

@table @var
@item élévation
De combien élever le filet (optionnel).

@item largeur
La longueur du filet (obligatoire).

@item épaisseur
L'épaisseur du filet (obligatoire).
@end table


@node \today
@section @code{\today}
@findex \today
@cindex date d'aujourd'hui

La commande @code{\today} produit la date d'aujourd'hui, par défaut dans
le format @samp{@var{mois} @var{jj}, @var{aaaa}} ; par exemple, @samp{July 4,
1976}.  Elle utilise les compteurs prédéfinis @code{\day},
@code{\month}, et @code{\year} (@pxref{\day & \month & \year}) pour faire
cela.  Elle n'est pas mise à jour durant l'exécution de la compilation.

Les extensions multilingues comme entre autres le paquetage @package{babel}
ou la classe @file{lettre} localisent @code{\today}. Par exemple le code
suivant produit @samp{4 juillet 1976} :

@example
\year=1976 \month=7 \day=4
\documentclass@{minimal@}
\usepackage[french]@{babel@}
\begin@{document@}
\today
\end@{document@}
@end example


@PkgIndex{datetime}
Le paquetage @package{datetime}, entre autres, produit un large choix
d'autres formats de date.


@node Splitting the input
@chapter Partitionner le fichier d'entrée
@cindex partitionner le fichier d'entrée
@cindex fichier d'entrée

@LaTeX{} vous permet de partitionner un document de grande taille en
plusieurs plus petits. Ceci peut simplifier son édition et permette à
plusieurs auteurs d'y travailler. Cela peut aussi accélérer le
traitement.

Indépendamment du nombre de fichiers distincts que vous
utilisez, il y a toujours un seul
@cindex racine, fichier
@cindex fichier racine
@dfn{fichier racine} sur lequel la compilation @LaTeX{}
démarre. L'exemple ci-dessous illustre un tel fichier avec cinq fichiers
inclus.

@example
\documentclass@{book@}
\includeonly@{
  % mettre en commentaire les lignes ci-dessous pour ne pas compiler le fichier
  pref,
  chap1,
  chap2,
  append,
  bib
  @}
\begin@{document@}
\frontmatter
\include@{pref@}
\mainmatter
\include@{chap1@}
\include@{chap2@}
\appendix
\include@{append@}
\backmatter
\include@{bib@}
\end@{document@}
@end example

@noindent
Dans cet exemple on prend la matière de @file{pref.tex},
@file{chap1.tex}, @file{chap2.tex}, @file{append.tex}, et
@file{bib.tex}.  Si vous compilez ce fichier, et ensuite mettez en
commentaire toutes les lignes au sein de @code{\includeonly@{...@}}
hormis @code{chap1}, et compilez de nouveau, alors @LaTeX{} traite
seulement la matière du premier chapitre.  Ainsi, la sortie apparaît
plus rapidement et est plus courte à imprimer.  Cependant, l'avantage de
la commande @code{\includeonly} est que @LaTeX{} retient les numéros de
page et toute l'information de renvoi des autres parties du document de
sorte qu'elles apparaissent correctement en sortie.

@xref{Larger book template}, pour un autre exemple de @code{\includeonly}.

@c xxx Pourquoi avoir supprimer cette ref.
@c @xref{filecontents}, pour un environnement qui permet de grouper un
@c fichier externe à créer avec le document racine.

@menu
* \endinput::                 Ne plus inclure la matière d'un fichier.
* \include & \includeonly::   Inclure conditionnellement des fichiers.
* \input::                    Inclure inconditionnellement un fichier.
@end menu


@node \endinput
@section @code{\endinput}

@findex \endinput

Synopsis :

@example
\endinput
@end example

Quand vous écrivez @code{\include@{nomfichier@}}, alors au sein de
@file{nomfichier.tex} la matière qui vient après @code{\endinput} n'est
pas incluse.  Cette commande est optionnelle ; si @file{nomfichier.tex}
ne comprend pas de @code{\endinput} alors @LaTeX{} lit tout le fichier.

Par exemple, supposons que le fichier racine d'un document a un
@code{\input@{chap1@}} que ce le contenu de @file{chap1.tex} est ce qui
suit :

@example
\chapter@{One@} Cette matière apparaît dans le document.  \endinput Ceci
n'apparaît pas.
@end example

Ceci peut être utile pour placer de la documentation ou des commentaires
à la fin d'un fichier, ou pour éviter des caractères indésirables qui
pourraient s'ajouter si le fichier est transmis dans le corps d'un
courriel.  C'est également utile pour déboguer : une stratégie pour
localiser des erreurs est de placer un @code{\endinput} à mi-chemin en
cours des fichiers inclus et de voir si l'erreur disparaît. Ensuite,
sachant quelle moitié contient l'erreur, en déplaçant le
@code{\endinput} à mi-chemin de cette zone circonscrit de plus près
l'endroit où elle se trouve. Ainsi on trouve rapidement la ligne
fautive.

Après avoir lu @code{\endinput}, @LaTeX{} continue à lire jusqu'à la fin
de la ligne, ainsi il est possible de faire suivre cette ligne par
quelque chose qui sera tout de même lu.  Ceci vous permet entre autre de
fermer un @code{\if...} par un @code{\fi}.

@node \include & \includeonly
@section @code{\include} & @code{\includeonly}

@anchor{\include}
@anchor{\includeonly}
@findex \include
@findex \includeonly

Synopsis :

@example
\includeonly@{  % dans le préambule du document
  ...
  @var{nomfichier},
  ...
  @}
  ...
\include@{@var{nomfichier}@}  % dans le corps du document
@end example

Apporte de la matière d'un fichier externe @file{@var{nomfichier}.tex}
dans un document @LaTeX{}.

La commande @code{\include} fait trois choses : elle exécute
@code{\clearpage} (@pxref{\clearpage & \cleardoublepage}), puis elle
insère la matière à partir du fichier @file{@var{nomfichier}.tex} dans
le document, ensuite fait encore un @code{\clearpage}. Cette commande ne
peut apparaître que dans le corps du document.

La commande @code{\includeonly} contrôle quels fichiers seront lus par
@LaTeX{} lors des commandes @code{\include} suivantes. Sa liste de noms
de fichier est séparée par des virgules, et la commande ne peut
apparaître que dans le préambule, ou même plus tôt, par ex. dans la
ligne de commande : elle ne peut pas apparaître dans le corps du
document.

Dans le document racine en exemple ci-dessous, @file{constitution.tex}, on
inclut trois fichiers, @file{preambule.tex}, @file{articles.tex}, et
@file{amendements.tex}.

@example
\documentclass@{book@}
\includeonly@{
  preambule,
  articles,
  amendements
  @}
\begin@{document@}
\include@{preambule@}
\include@{articles@}
\include@{amendements@}
\end@{document@}
@end example

@noindent
Le fichier @file{preambule.tex} ne contient aucun code spécial ; vous
avez juste extrait ce chapitre de @file{consitution.tex} pour le mettre
dans un fichier séparé pour rendre son édition plus commode.

@example
\chapter@{Préambule@}
Le peuple français proclame solennellement son attachement aux Droits de
l’Homme et aux principes de la souveraineté nationale tels qu’ils ont
été définis par la Déclaration de 1789, ...
@end example

@noindent
Exécuter @LaTeX{} sur @file{constitution.tex} fait apparaître la
matière issue de ces trois fichiers dans le document mais génère
également les fichiers auxiliaires @file{preambule.aux},
@file{articles.aux}, et @file{amendements.aux}. Ceux-ci contiennent de
l'information telle que les numéros de page et les renvois (@pxref{Cross
references}).  Si maintenant vous mettez en commentaire les lignes de
@code{\includeonly} contenant @code{preambule} et @code{amendements} et
exécutez @LaTeX{} de nouveau alors le document résultant ne contiendra
que la matière issue de @file{articles.tex}, mais pas celui de
@file{preamblue.tex} ni de @file{amendements.tex}.  Néanmoins, la
totalité de l'information auxiliaire issue des fichiers omis est
toujours là, y compris le numéro de la page où commence le chapitre.

S'il n'y a pas de @code{\includeonly} dans le préambule du document,
alors @LaTeX{} inclut tous les fichiers demandés par des commandes
@code{\include}.

La commande @code{\include} fabrique une nouvelle page.  Pour éviter
cela, voir @ref{\input} (ce qui, cependant, ne retient pas l'information
auxiliaire).

@xref{Larger book template}, pour un autre exemple utilisant
@code{\include} et @code{\includeonly}.  Cet exemple utilise également
@code{\input} pour certaine matière qui ne débute pas nécessairement sur
une nouvelle page.

Les noms de fichiers peuvent impliquer un chemin.

@example
\documentclass@{book@}
\includeonly@{
  chapitres/chap1,
  @}
\begin@{document@}
\include@{chapitres/chap1@}
\end@{document@}
@end example

Pour rendre votre document portable vis à vis des diverses distributions
et plateformes vous devriez éviter les espaces dans les noms de
fichier. Traditionnellement on utilise des tirets de 6 ou de 8 à la
place.  Néanmoins, pour le nom @samp{amo amas amat}, ce qui suit
fonctionne sous @value{TeXLive} sur @value{GNULinux}:

@example
\documentclass@{book@}
\includeonly@{
  "amo\space amas\space amat"
  @}
\begin@{document@}
\include@{"amo\space amas\space amat"@}
\end@{document@}
@end example

et ceci fonctionne sous @value{MiKTeX} sur @value{MSWindows}:

@example
\documentclass@{book@}
\includeonly@{
  @{"amo amas amat"@}
  @}
\begin@{document@}
\include@{@{"amo amas amat"@}@}
\end@{document@}
@end example

@cindex @code{\include} imbriqués non autorisés
@cindex imbrication de @code{\include} non autorisée
Vous ne pouvez pas utiliser @code{\include} au sein d'un fichier qui
lui-même est inclus via @code{\include}, sans quoi vous obtenez l'erreur
@samp{LaTeX Error: \include cannot be nested}.  La commande
@code{\include} ne peut pas apparaître dans le préambule ; sans quoi
vous obtenez l'erreur @samp{LaTeX Error: Missing \begin@{document@}}.

Si un fichier que vous incluez par @code{\include} n'existe pas, par
exemple si vous tapez la commande @code{\include@{athiesme@}} par erreur
à la place de @code{\include@{atheisme@}}, alors @LaTeX{} ne produit pas
une erreur mais un avertissement @samp{No file athiesme.tex.}  (Il crée
également le fichier @file{athiesme.aux}).

Si vous faites un @code{\include} du fichier racine dans lui-même alors
vous obtenez tout d'abord @samp{LaTeX Error: Can be used only in
preamble}.  Les exécutions suivantes donnent @samp{TeX capacity
exceeded, sorry [text input levels=15]}.  Pour réparer cela, vous devez
enlever l'inclusion @code{\include@{@var{racine}@}} mais aussi détruire
le fichier @file{@var{racine}.aux} et exécuter de nouveau @LaTeX{}.


@c xxx \includeonly omis = mettre plus haut dans le nœeud, pour la
@c xxx progressivité de l'exposé.


@node \input
@section \input
@findex \input

Synopsis :

@example
\input@{@var{nomfichier}@}
@end example

La commande @code{\input} a pour effet que le @var{nomfichier} spécifié
soit lu et traité comme si son contenu était inséré dans le fichier
courant à cet endroit.

Si @var{nomfichier} ne se termine pas en @samp{.tex} (par ex.,
@samp{toto} ou @samp{toto.tata}), on essaie en premier en ajoutant cette
extension (@samp{toto.tex} ou @samp{toto.tata.tex}).  Si aucun fichier
n'est trouvé avec ce nom, alors on essaie le @var{nomfichier} original
(c.-à-d.@: @samp{toto} ou @samp{toto.tata}).

@node Front/back matter
@chapter Parties pré/postliminaires

@menu
* Table des matières etc.: Table of contents etc.. Table des matières, liste des figures, liste des tableaux.
* Glossaires: Glossaries. Génère un glossaire.
* Index:Indexes. Génère un indexe.
@end menu


@node Table of contents etc.
@section Table des matières etc.

@cindex table des matières, création

@findex \tableofcontents
@findex .toc, @r{fichier}
@findex \listoffigures
@findex \listoftables
@findex .lof @r{fichier}
@findex .lot @r{fichier}

Synopsis, l'un parmi ceux qui suivent :

@example
\tableofcontents
\listoffigures
\listoftables
@end example

Produit une table des matières, ou une liste des figures, ou une liste
des tableaux. Placez la commande à l'endroit même où vous voulez que la
table ou liste apparaisse. Vous n'avez pas à la renseigner ; par
exemple, typiquement les entrées de la table des matières sont
automatiquement générées à partir des commandes de rubricage
@code{\chapter}, etc.

L'exemple ci-dessous illustre la première commande,
@code{\tableofcontents}.  @LaTeX{} produit une table des matières sur la
première page du livre.

@example
\documentclass@{book@}
% \setcounter@{tocdepth@}@{1@}
\begin@{document@}
\tableofcontents\newpage
  ...
\chapter@{...@}
  ...
\section@{...@}
  ...
\subsection@{...@}
  ...
\end@{document@}
@end example

@noindent
En décommentant la deuxième ligne on peut limiter la table à ne lister
que les rubriques issues de @code{\chapter} et @code{\section}, mais pas
celle issue de @code{\subsection}, parce que la commande @code{\section}
a pour niveau 1.  @xref{Sectioning}, pour les numéros de niveaux des
rubriques.  Pour plus ample information sur @code{tocdepth}
@pxref{Sectioning/tocdepth}.

Un autre exemple de l'utilisation de @code{\tableofcontents} est dans
@ref{Larger book template}.

Si vous désirez un saut de page après la table des matières, insérez une commande
@code{\newpage} après la commande @code{\tableofcontents}, comme ci-dessus.

Pour fabriquer la table des matières, @LaTeX{} stocke l'information dans
un fichier auxiliaire nommé @file{@var{fichier-racine}.toc}
(@pxref{Splitting the input}).  Par exemple, le fichier
@LaTeX{} @file{test.tex} ci-dessous :

@example
\documentclass@{article@}
\begin@{document@}
\tableofcontents\newpage
\section@{Premièrement@}
\subsection@{Deuxièmement@}
  ...
@end example

@noindent
écrit la ligne suivante dans @file{test.toc} :

@example
\contentsline @{section@}@{\numberline @{1@}Premièrement@}@{2@}
\contentsline @{subsection@}@{\numberline @{1.1@}Deuxièmement@}@{2@}
@end example

@noindent
L'indication @code{section} ou @code{subsection} donne le type de
rubrique.  Le crochet @code{\numberline} vous permet de changer la façon
dont l'information apparaît au sein de la table des matières.  Son
unique argument, @code{1} ou @code{1.1}, est le numéro de la rubrique
alors que le reste du deuxième argument de @code{\contentsline},
@code{Premièrement} ou @code{Deuxièmement}, est le titre.  Finalement,
le troisième argument, @code{2}, est le numéro de la page à laquelle les
rubriques débutent.

Une conséquence de cette stratégie de stockage de fichier auxiliaire est
que pour obtenir correctement la page de table des matières vous devez
exécuter @LaTeX{} deux fois, une fois pour stocker l'information et une
fois pour l'obtenir.
@c xxx Et avec les .lot et .lof c'est aussi 2 fois, mais parce que le
@c .aux est relu avant le .lot/.lof
En particulier, la première fois que vous exécutez @LaTeX{} sur un
nouveau document, la page de table des matières est vide hormis le titre
@samp{Table des matières}.  Il suffit de l'exécuter de nouveau.

@c xxx ajouter que les fichiers .lot et .lof sont renseignés par la commande \caption
Les commandes @code{\listoffigures} et @code{\listoftables} produisent
une liste des figures et une liste des tables.  Elles fonctionnent de la
même façon que les commandes pour la table des matières ; notamment
elles fonctionnent avec l'information stockée dans des fichiers
@file{.lof} et @file{.lot}.

Pour modifier le titre de la page de table des matières, inspirez vous
la la première ligne de l'exemple suivant :

@example
\renewcommand@{\contentsname@}@{Table des matières@}
\renewcommand@{\listfigurename@}@{Tracé de courbes@}
\renewcommand@{\listtablename@}@{Tableaux@}
@end example

@noindent
@PkgIndex{babel}
@PkgIndex{polyglossia}
De même, les deux autres lignes s'occupent des deux autres. Des
paquetages d'internationalisation tels que @package{babel} ou
@package{polyglossia} modifient les titres en fonction de la langue de base
sélectionnée.

@PkgIndex{tocloft}
@PkgIndex{tocbibbind}
Le CTAN a beaucoup de paquetages traitant de la table des matières et
des listes de figures et de tableaux.  L'un d'eux bien commode pour
ajuster certains aspects du traitement par défaut, tels que
l'espacement, est @package{tocloft}.  Et @package{tocbibbind} permet d'ajouter
automatiquement la bibliographie, les indexes, etc. à la table des
matières.

@menu
* \@@dottedtocline::    Formate une entrée dans la table des matières etc.
* \addcontentsline::    Ajouter une entrée dans la table des matières etc.
* \addtocontents::      Ajouter du texte directement au fichier table des matières etc.
* \contentsline::       Règle une ligne de table des matières, etc.
* \nofiles::            Empêche l'écriture dans les fichiers auxiliaires.
* \numberline::         Place le numéro en argument fer a gauche dans une boîte.
@end menu


@node \@@dottedtocline
@subsection @code{\@@dottedtocline}

@findex \@@dottedtocline
@cindex table des matières, crée une ligne pointillée

Synopsis :

@example
\@@dottedtocline@{@var{numnivrubrique}@}@{@var{renfoncement}@}@{@var{largeurnum}@}@{@var{texte}@}@{@var{numpage}@}
@end example

Utilisée en interne par @LaTeX{} pour formater une ligne d'article dans
la table des matières, table des figures ou table des tableaux. Les
auteurs ne saisissent pas directement des commandes
@code{\@@dottedtocline}.

Cette commande est typiquement utilisée par @code{\l@@section},
@code{\l@@subsection}, etc., pour formater le contenu de ces tables.
Par exemple, le fichier @file{article.cls} contient ces définitions :

@example
\newcommand*\l@@section@{\@@dottedtocline@{1@}@{1.5em@}@{2.3em@}@}
\newcommand*\l@@subsection@{\@@dottedtocline@{2@}@{3.8em@}@{3.2em@}@}
\newcommand*\l@@subsubsection@{\@@dottedtocline@{3@}@{7.0em@}@{4.1em@}@}
@end example

@noindent
Dans cet exemple, on dirait @code{\@@dottedcline} ne prend que trois
argument. Mais en remontant le code on s'aperçoit qu'elle prend
également les deux arguments finaux @var{texte} et @var{numéro-page} du
synopsis d'appel de @code{\contentsline} (@pxref{\contentsline}).

@cindex points de suite, pointillés dans la table des matières
Entre la boîte du texte de titre de rubrique et la marge de droite, ces
commandes @code{\@@dottedtocline} insèrent des @dfn{points de suite},
c.-à-d.@: une ligne en pointillés uniformément espacés. L'espace
inter-point est donné par la commande @code{\@@dotsep}.  Par défaut
c'est 4.5 (exprimé en unités de longueur mathématique, ou @code{mu},
soit @code{1/18}@dmn{em}.  On peut le modifier avec
@code{\renewcommand}, comme dans
@code{\renewcommand@{\@@dotsep@}@{3.5@}}.

Dans la classe standarde @file{book}, @LaTeX{} n'utilise pas de points
de suite pour articles de la table correspondant aux rubriques de niveau
@code{\part} ou @code{\chapter}, et dans la classe @file{article}, il
n'en utilise pas pour les articles de niveau @code{\section}.


@node \addcontentsline
@subsection @code{\addcontentsline}
@findex \addcontentsline@{@var{ext}@}@{@var{unit}@}@{@var{texte}@}
@cindex table des matières, ajouter manuellement un article

Synopsis :

@example
\addcontentsline@{@var{ext}@}@{@var{unit}@}@{@var{texte}@}
@end example

@findex \contentsline
Ajoute un article dans le fichier auxiliaire dont l'extension de nom est
@var{ext}.

L'exemple suivant a pour effet d'ajouter une ligne @samp{Appendices} à
la table des matières :

@example
\addcontentsline@{toc@}@{section@}@{\protect\textbf@{Appendices@}@}
@end example

@noindent
elle apparaîtra au même niveau de renfoncement que les rubriques, sera en
caractères gras, et recevra le numéro de page correspondant au point où
la commande apparaît dans le fichier d'entrée.

La commande @code{\addcontentsline} écrit de l'information dans le
fichier @file{@var{nom-racine}.@var{ext}}, où @var{nom-racine} est le
nom du fichier racine (@pxref{Splitting the input}). Il écrit cette
information comme le texte de la commande
@code{\contentsline@{@var{unit}@}@{@var{texte}@}@{@var{numéro}@}}, où
@code{@var{numéro}} est la valeur courante du compteur @code{@var{unit}}
(@pxref{\contentsline}). Le cas le plus fréquent est la table des
matières et dans ce cas @var{numéro} est la valeur du compteur
@var{unit} dans la première page produite où la commande
@code{\addcontentsline} correspondante fut utilisée.

Cette commande est invoquées par les commandes de rubricage
@code{\chapter}, etc. (@pxref{Sectioning}), et aussi par @code{\caption}
au sein d'un environnement flottant (@pxref{Floats}). Mais elle est
aussi directement utilisées par des auteurs. Par exemple, un auteur
écrivant un livre dont le style est d'avoir une préface non numérotée
pourrait utiliser @code{\chapter*}. Mais cette commande ne produit pas
d'article dans la table des matières, on peut alors l'entrer manuellement
ainsi :

@example
\chapter*@{Preface@}
\addcontentsline@{toc@}@{chapter@}@{\protect\numberline@{@}Préface@}
@end example

@noindent
Dans le fichier @file{@var{nom-racine}.toc} @LaTeX{} insère alors la
ligne @code{\contentsline @{chapter@}@{\numberline @{@}Préface@}@{3@}} ;
notez que le numéro de page @samp{3} est généré automatiquement par le
système, et non saisi manuellement.

Tous les arguments de @code{\addcontentsline} sont obligatoires.


@table @var
@item ext
Typiquement c'est l'une des trois chaînes suivantes : @code{toc} pour la
table des matières (« table of contents » en langue anglaise), @code{lof}
pour la liste des figures (« list of figures »), ou @code{lot} pour la
liste des tableaux (« list of tables »).  L'extension de nom de fichier
du fichier dans lequel l'information doit être écrite.

@item unit
Une chaîne dépendant de la valeur de l'argument @var{ext}, typiquement
l'une des suivantes :

@table @code
@item toc
Pour la table des matières, c'est le nom d'une unité sectionnelle : @code{part}, @code{chapter},
@code{section}, @code{subsection}, @code{subsubsection}, etc.
@item lof
Pour la liste des figures : @code{figure}.
@item lot
Pour la liste des tableaux : @code{table}.
@end table

@item texte
Le texte de l'entrée. On doit précéder de @code{\protect} toute commande
fragile (@pxref{\protect}) y figurant.
@end table

La commande @code{\addcontentsline} a une interaction avec
@code{\include} (@pxref{\include & \includeonly}). Si vous les utilisez
au même niveau comme dans
@code{\addcontentsline@{...@}@{...@}@{...@}\include@{...@}}, alors les
lignes dans la table des matières risquent de sortir dans un ordre
erroné. La solution est de déplacer @code{\addcontentsline} dans le
fichier qu'on inclut.

Si vous utiliser une @var{unit} que @LaTeX{} ne reconnaît pas, comme
la coquille dans l'exemple suivant

@example
\addcontentsline@{toc@}@{setcion@}@{\protect\textbf@{Appendices@}@}
@end example

@noindent
alors vous n'obtiendrez pas une erreur mais le formatage de la table des
matières sera incohérent.


@node \addtocontents
@subsection @code{\addtocontents}
@findex \addtocontents@{@var{ext}@}@{@var{texte}@}

Synopsis :

@example
\addtocontents@{@var{ext}@}@{@var{texte}@}
@end example

Ajoute @var{texte}, qui peut être du texte ou des commandes de formatage,
directement au fichier auxiliaire dont le nom a l'extension
@file{.@var{ext}}. Cela est utilisé d'ordinaire pour la table des
matières, mais aussi pour la liste des figures ou celle des tableaux.

L'exemple suivant place un peu d'espace vertical dans la table des
matières après l'en-tête @samp{Table des matières} :

@example
\tableofcontents\newpage
\addtocontents@{toc@}@{\protect\vspace*@{3ex@}@}
@end example

@noindent
L'exemple suivant place le mot @samp{page}, en caractères gras, au
dessus de la colonne des numéros de page après l'en-tête.

@example
\tableofcontents
\addtocontents@{toc@}@{~\hfill\textbf@{page@}\par@}
\chapter@{...@}
@end example

@noindent
L'exemple ci-dessous ajoute une ligne annonçant l'œuvre d'un nouvel
auteur :

@example
\addtocontents@{toc@}@{%
  \protect\vspace@{2ex@}
  \textbf@{Chapitres de N. Autre Auteur@}\par@}
@end example

La différence entre @code{\addtocontents} et @code{\addcontentsline} est
que cette dernière commande est strictement réservée aux lignes, comme
le cas d'une ligne donnant le numéro de page pour le début d'un nouveau
sous-ensemble des chapitres.  Comme les exemples ci-dessus le démontrent,
@code{\addtocontents} permet de la matière telle que de l'espacement.

La commande @code{\addtocontents} a deux arguments, tous deux
obligatoires.

@table @var
@item ext
Typiquement l'un parmi : @file{toc} pour la table des matières,
@file{lof} por la liste des figures, ou @file{lot} pour la liste des
tableaux. L'extension de nom de fichier du fichier dans lequel
l'information est à écrire.

@item texte
Le texte, et possiblement les commandes, à écrire.
@end table

Les commandes de rubricage telles que @code{\chapter} utilisent la
commande @code{\addcontentsline} pour stocker l'information.  Cette
commande crée des lignes dans le fichier auxiliaire en @file{.toc} qui
contient les commandes @code{\contentsline} (@pxref{\addcontentsline}).
Contrairement à elle, la commande @code{\addtocontents} place
directement la matière dans ce fichier.

La commande @code{\addtocontents} interagit avec @code{\include}
(@pxref{\include & \includeonly}). Si vous les utilisez au même niveau,
comme dans @code{\addtocontents@{...@}@{...@}\include@{...@}} alors les
lignes de la table des matières risquent de sortir dans le mauvais
ordre.  La solution est de déplacer @code{\addtocontents} pour la mettre
dans le fichier à inclure.


@node \contentsline
@subsection @code{\contentsline}

@cindex table des matières
@findex \contentsline
@findex \tableofcontents
@findex .toc, @r{fichier}
@findex \listoffigures
@findex \listoftables
@findex .lof, @r{fichier}
@findex .lot, @r{fichier}
@findex \l@@chapter
@findex \l@@section
@findex \l@@subsection

Synopsis :

@c attention référence au synoposis dans nœud \@dottedtocline
@example
\contentsline@{@var{unit}@}@{@var{texte}@}@{@var{numéro-page}@}
@end example

Utilisé en interne par @LaTeX{} pour composer un article dans une table
des matières, table des figures, ou table des tableaux (@pxref{Table of
contents etc.}). Les auteurs ne saisissent pas directement les commandes
@code{\contentsline}.

En général l'ajout de matière à ces tables est fait automatiquement par
les commandes @code{\chapter}, @code{\section}, etc. pour la table des
matières, ou par la commande @code{\caption} au sein d'un environnement
@code{\figure} ou @code{\table} (@pxref{figure} et @pxref{table}).
Ainsi, en supposant que le fichier racine est @file{these.tex}, et
qu'il contient la déclaration @code{\tableofcontents}, la commande
@code{\chapter@{Chapitre premier@}} produit quelque chose de ce genre
dans le fichier @file{these.toc} :

@example
\contentsline @{chapter@}@{\numberline @{1@}Chapitre premier@}@{3@}
@end example

Si le fichier contient la déclaration @code{\listoffigures} alors un
environnement figure comprenant @code{\caption@{Essai@}} produira quelque chose de ce genre dans @file{these.lof}.

@example
\contentsline @{figure@}@{\numberline @{1.1@}@{\ignorespaces Essai@}@}@{6@}
@end example
x
Pour ajouter manuellement de la matière, utilisez
@code{\addcontentsline@{@var{typefic}@}@{@var{unit}@}@{\@var{texte}@}},
où @var{typefic} est @code{toc}, @code{lof}, ou @code{lot}
(@pxref{\addcontentsline}).

@PkgIndex{tocloft}
Pour manipuler la façon dont la matière de la commande
@code{\contentline} est composé, voir le paquetage @package{tocloft}.

@PkgIndex{hyperref}

Notez que le paquetage @package{hyperref} change la définition de
@code{\contentsline} (et de @code{\addcontentsline}) pour ajouter plus
d'arguments, fabriquer des hyperliens.  C'est la source de l'erreur
@code{Argument of \contentsline has an extra @}} quand on
ajoute/supprime l'utilisation d'@package{hyperref} et qu'une compilation a
déjà été faite.  Pour réparer cette erreur, détruisez les fichiers
@file{.toc}, @file{.lof} ou @file{.lot}, et exécutez de nouveau
@LaTeX{}.


@node \nofiles
@subsection @code{\nofiles}

@findex \nofiles

Synopsis :

@example
\nofiles
@end example

Empêche @LaTeX{} d'écrire quelque fichier auxiliaire que ce soit.  Les
seules sorties seront les fichiers @file{.log} et @file{.pdf} (ou
@file{.dvi}).  Cette commande ne peut être placée que dans le préambule.

À cause de la commande @code{\nofiles} dans cet exemple aucun fichier
@file{.toc} n'est produit.

@example
\documentclass@{book@}
\nofiles
\begin@{document@}
\tableofcontents\newpage
\chapter@{...@}
  ...
@end example

@noindent
@LaTeX{} n'efface pas les fichiers auxiliaires existants, de sorte que
si vous insérer la commande @code{\nofiles} après avoir compilé le
fichier et obtenu un fichier @file{.toc} alors la page de table des
matières contiendra l'ancienne information.


@node \numberline
@subsection @code{\numberline}

@findex \numberline

Synopsis :

@example
\numberline@{\@var{numéro}@}
@end example

Compose son argument fer à gauche dans une boîte. Cela est utilisé au
sein d'une commande @code{\contentsline} pour composer les numéros de
rubrique (@pxref{\contentsline}).

Par exemple, cette ligne dans un fichier @file{.toc} a pour effet que le
@code{1.1} est composé fer à gauche :

@example
\contentsline @{subsection@}@{\numberline @{1.1@}Motivation@}@{2@}
@end example

Par défaut, @LaTeX{} compose tout numéro de rubrique au sein d'une boîte
de longueur @code{\@@tempdima}.  Cette longueur est réglée par les
commandes @code{\l@@section}, @code{\l@@subsection}, etc.  Pour Mettre
les numéros de rubrique dans des boîtes de longueur naturelle utiliser le
code @code{\renewcommand@{\numberline@}[1]@{#1~@}} avant
@code{\tableofcontents}.

Cette commande est fragile, aussi vous pourriez avoir besoin de la
précéder d'un @code{\protect} (@pxref{\protect}).  Un exemple
est l'utilisation de @code{\protect} dans la commande suivante :

@example
@code{\addcontentsline@{toc@}@{section@}@{\protect\numberline @{@}Sommaire@}}
@end example

@noindent
de sorte à obtenir le @code{\numberline} dans la commande
@code{\contentsline} dans le fichier @file{.toc} ainsi :
@code{\contentsline @{section@}@{\numberline @{@}Sommaire@}@{6@}} (le
numéro de page @samp{6} est ajouté automatiquement par @LaTeX{} ;
@pxref{\addcontentsline}).


@node Glossaries
@section Glossaires
@cindex glossaires

@findex \makeglossary
La commande @code{\makeglossary} active la création des glossaires.

@findex \glossary
@cindex @file{.glo}, fichier
La commande @code{\glossary@{@var{texte}@}} écrit un article de
glossaire pour @var{texte} dans un fichier auxiliaire nommé avec
l'extension @file{.glo}.

@findex \glossaryentry
Plus précisément, ce qui est écrit est la commande
@code{\glossaryentry@{@var{texte}@}@{@var{numpage}@}}, où @var{numpage}
est la valeur courante de @code{\thepage}.

Le paquetage @code{glossary} disponible sur le CTAN fournit une prise en
charge de glossaires plus élaborée.


@node Indexes
@c Revoir la trad.
@section Index
@cindex index

@findex \makeindex
@findex \index
@cindex @file{.idx}, fichier

Si vous dites à @LaTeX{} les termes que vous voulez voir apparaître dans
un index, alors il peut produire cet index, classé alphabétiquement et
en maintenant automatiquement les numéros de page.  Ce qui suit illustre
les bases.

@example
\documentclass@{article@}
\usepackage@{makeidx@}    % Fournit les commandes d'indexation
  \makeindex
% \usepackage@{showidx@}  % Affiche les notes en marge des articles
                        % de l'index
  ...
\begin@{document@}
  ...
Le théorème de Wilson\index@{Théorème de Wilson@} dit qu'un nombre $n>1$
est premier si et seulement si la factorielle de $n-1$ est congurente à
$-1$ modulo~$n$.\index@{congruence!et théorème de Wilson@}
  ...
\printindex
\end@{document@}
@end example

@noindent
Comme illustré ci-dessus, on déclare des articles d'index avec la
commande @code{\index} (@pxref{\index}). Quand vous exécutez @LaTeX{},
le @code{\index} inscrit son information, telle que @samp{Théorème de
Wilson}, et le numéro de page, dans un fichier auxiliaire dont le nom
finit en @file{.idx}. Ensuite, pour classer par ordre alphabétique, et
pour d'autre manipulations, on exécute un program externe, typiquement
@command{makeindex} (@pxref{makeindex}), ce qui écrit un fichier dont le
nom finit en @file{.ind}.  Finalement, @code{\printindex} ramène cette
information manipulée dans la sortie (@pxref{\printindex}).

Ainsi, si le code de l'exemple plus haut est dans le fichier
@file{numth.tex} alors exécuter @samp{pdflatex numth} sauvegarde
l'information de l'article d'index et son numéro de page dans
@file{numth.idx}. Et ensuite exécuter @samp{makeindex numth} classe par
ordre alphabétique et sauvegarde les résultats dans
@file{numth.ind}. Finalement, exécuter de nouveau @samp{pdflatex numth}
affiche l'index désiré, à l'endroit où la commande @code{\printindex}
est dans le code source.

Il, y a beaucoup d'options pour contrôler la sortie.  Un exemple est que
le point d'exclamation dans @code{\index@{congruence!et théorème de
Wilson@}} produit un article principal pour @samp{congruence} avec un
sous-article pour @samp{et théorème de Wilson}.  Pour plus
d'information, @pxref{makeindex}.

Les commandes @code{\makeindex} et @code{\printindex} sont
indépendantes.  Ne pas mettre le @code{\makeindex} arrête que @LaTeX{}
sauvegarde les articles d'index dans le fichier auxiliaire. Ne pas
mettre le @code{\printindex} a pour effet que @LaTeX{} n'affiche pas
l'index dans la sortie.

@PkgIndex{showidx}
@PkgIndex{multind}
@cindex indexes multiples
@cindex multiples, indexes
Nombre de paquetages existent concernant l'indexation. Le paquetage
@package{showidx} a pour effet que chaque article d'index est affiché dans
la marge sur la page où le @code{\index} apparaît. Ceci peut être utile
pour préparer l'index.  Le paquetage @package{multind}, avec d'autres,
prend en charge les indexes multiples. Voir aussi l'article de la FAQ
@TeX{} sur ce sujet,
@url{https://www.texfaq.org/FAQ-multind}, et le sujet CTAN,
@url{https://ctan.org/topic/index-multi}.

@menu
* Produce the index manually::   Classez les articles vous-même.
* \index::        Déclare un article d'index.
* makeindex::     Classe les articles d'index automatiquement.
* \printindex::   Met l'index à cet endroit.
@end menu


@node Produce the index manually
@subsection Produire l'index manuellement

@cindex index, production manuelle
@findex theindex

Les documents qui sont brefs et statiques peuvent avoir un index produit
manuellement. L'exemple ci-dessous produit une page séparée intitulée
@samp{Index}, en format à deux-colonnes.

@EnvIndex{theindex}
@example
\begin@{theindex@}
\item acorn squash, 1
\subitem maple baked, 2
\indexspace
\item bacon, 3
\subitem maple baked, 4
\end@{theindex@}
@end example

Notez que l'auteur doit saisir les numéros de page, ce qui est rébarbatif
et résulte en des numéros inexacts si le document change. C'est pourquoi
dans la plupart des cas des méthodes automatisées telles que
@command{makeindex} sont préférables.  @xref{Indexes}.

@findex \item
@findex \subitem
@findex \subsubitem
@findex \indexspace
Toutefois nous couvrons ces commandes pour être exhaustif, et parce que
les méthodes automatisées sont basées sur elles. Comme l'exemple
l'illustre, un article principal utilise @code{\item}, un sous-article
@code{\subitem}, et le niveau le plus bas utilise @code{\subsubitem}.
Les lignes à blanc entre les articles sont sans effet. L'exemple
ci-dessus inclut @code{\indexspace} pour produire un espace vertical dans
la sortie que certains styles utilisent avant le premier article
commençant avec une nouvelle lettre.


@node \index
@subsection @code{\index}

@findex \index
@cindex @file{.idx}, fichier

Synopsis :

@example
\index@{@var{chaîne-article-index}@}
@end example

Déclare un article dans l'index.  Cette commande est fragile
(@pxref{\protect}).

Par exemple, comme décrit dans @ref{Indexes}, une façon d'obtenir un
index du code ci-dessous est de compiler le document avec @code{pdflatex
test}, puis de traiter les articles de l'index avec @code{makeindex
test}, et ensuite de compiler de nouveau avec @code{pdflatex test}.

@example
% fichier test.tex
  ...
W~Ackermann (1896--1962).\index@{Ackermann@}
  ...
fonction d'Ackermann\index@{Ackermann!fonction@}
  ...
taux de croissance\index@{Ackermann!fonction!taux de croissance@}
@end example

@cindex index, articles, sous-articles
@noindent
Les trois articles obtiendront un numéro de page, comme dans
@samp{Ackermann, 22}.  @LaTeX{} formate le deuxième comme un
sous-article du premier, sur la ligne du dessous et renfoncé, et le
troisième comme un sous-article du deuxième. On ne peut pas imbriquer
les articles au delà du troisième niveau de sous-articles.  (Si vous
ajoutez @code{\index@{Ackermann!fonction!taux de
croissance!comparaison@}} alors @command{makeindex} dit @samp{Scanning
input file test.idx....done (4 entries accepted, 1 rejected)} et le
quatrième niveau est silencieusement absent de l'index).

Si vous saisissez un deuxième @code{\index} avec la même
@var{chaîne-article-index} alors vous obtiendrez un unique article
d'index avec deux numéros de page (à moins qu'il se trouve que les deux
soient sur la même page). Ainsi, ajouter @code{comme pour
Ackermann.\index@{Ackermann@}} plus loin dans le même document que
ci-dessus donnera un article d'index du genre de @samp{Ackermann, 22,
151}.  Notez aussi que vous pouvez saisir les articles d'index dans un
ordre quelconque, ainsi par exemple @code{\index@{Ackermann!fonction@}}
peut arriver avant @code{\index@{Ackermann@}}.

@cindex index, plage de pages
Obtenez une plage de page en sortie, du genre de @samp{Hilbert, 23--27},
comme avec le code ci-dessous :

@example
W~Ackermann (1896--1962).\index@{Ackermann@}
  ...
D~Hilbert (1862--1943)\index@{Ackermann!Hilbert|(@}
  ...
désapprouvait son mariage.\index@{Ackermann!Hilbert|)@}
@end example

@noindent
Si le début et la fin de la plage de pages sont égaux alors le système
ne donne qu'un seul numéro de page, et non une plage.

Si vous indexez des sous-articles mais sans article principal, comme
dans @code{\index@{Jones!programme@}} et
@code{\index@{Jones!résultats@}}, alors la sortie est l'article
@samp{Jones} sans virgule ni numéro de page, suivi de deux
sous-articles, du genre de @samp{programme, 50} et @samp{résultats, 51}.

@cindex voir et voir aussi, articles d'index
@cindex index, articles, « voir » et « voir aussi »
@findex \seename
@findex \alsoname
@PkgIndex{babel} @PkgIndex{polyglossia}

On génère un article d'index qui dit @samp{Voir} en utilisant un
caractère barre verticale :
@code{\index@{Ackermann!function|see@{fonction de P\'eter@}@}}.  On peut
également obtenir @samp{voir aussi} avec @code{seealso}.  (Le texte
@samp{voir} est défini par @code{\seename}, et @samp{voir ausi} par
@code{\alsoname} lorsqu'on charge un paquetage d'internationalisation
tel que @package{babel} or @package{polyglossia}, et que la langue
sélectionnée est le français, sinon par défaut c'est @samp{see} et
@samp{see also}, on peut aussi les redéfinir directement avec
quelque chose du genre de @code{\renewcommand@{\seename@}@{cf.@}
\renewcommand@{\alsoname@}@{ibid.@}}).

La production du mot @samp{voir} fait partie d'une fonctionnalité plus
générale. Après la barre verticale vous pouvez mettre le nom @var{cmd}
d'une commande @code{\@var{cmd}} à un argument, comme dans
@code{\index@{group|textit@}} (notez l'absence de controblique sur la
commande @code{\textit}) et le système appliquera cette commande au
numéro de page dans l'article d'index, donnant ici quelque chose du
genre de @code{\textit@{7@}}.  Vous pouvez aussi définir vos propres
commandes comme dans
@code{\newcommand@{\pagecours@}[1]@{@{\color@{blue@}#1@}@}} et ensuite
@code{\index@{Ackermann!function|pagecours@}} donnera un numéro de page
en bleu (@pxref{Color}).  Voici in autre exemple, moins pratique :

@c credit Ian Thompson https://tex.stackexchange.com/a/272572/121234
@example
\newcommand\pageindex[1]@{#1, \thepage@}
  ... Epimenides.\index@{self-reference|pageindex@}
@end example

@noindent
qui crée une article citant le numéro de page dans le listing de l'index.

Les deux fonctions décrites plus haut peuvent être combinées, comme dans :

@example
\index@{Ackermann!fonction|(pagecours@}
  ...
\index@{Ackermann!fonction|)@}
@end example

@noindent
ce qui en sortie produit un article d'index du genre de @samp{fonction,
23--27} où la plage de numéros de page est en bleu.

Considérez un article d'index tel que @samp{@BES{β,\beta}-testeur}. Le
saisir telle que @code{$\beta$-testeur} aura pour effet qu'il sera
classé selon le signe dollar. Vous pouvez le saisir en utilisant une
arobe, comme dans @code{\index@{bêta-testeur@@$\beta$-testeur@}}.
Lorsque vous spécifiez un article avec une arobe qui sépare deux chaînes,
@code{@var{pos}@@@var{texte}}, alors @var{pos} donne la position
alphabétique de l'article alors que @var{texte} produit le texte de
l'article. Un autre exemple est que @code{\index@{Saint Michael's
College@@SMC@}} produit un article d'index @samp{SMC} classé dans un
autre endroit que son épellation donnerait naturellement.

Pour mettre le caractère @code{!}, @code{@@}, @code{|} ou @code{"} dans
un article d'index, échappez le en le précédant d'un guillemet anglais
double, @code{"}.  (Le guillemet double est ignoré pour le classement
alphabétique).

@PkgIndex{index}
Nombre de paquetages sur le CTAN apportent des fonctionnalités
supplémentaires allant au-delà de celles fournies par @package{makeidx}.
L'un deux est @package{index} qui permet d'avoir des index multiples et
contient une commande @code{\index*@{@var{index-entry-string}@}} qui
imprime la @var{chaîne-article-index} en plus de l'indexer.

@findex \indexentry
@cindex @identity{idx}, fichier
La commande @code{\index} écrit l'information d'indexation dans le
fichier @file{@var{nom-racine}.idx}.  Plus spécifiquement, elle écrit le
texte de la commande
@code{\indexentry@{@var{chaîne-article-index}@}@{@var{num-page}@}}, où
@var{num-page} est la valeur du compteur @code{\thepage}.  Il peut
arriver, lorsque la commande @code{\printindex} perd les pédales, que
vous ayez à détruire ce fichier pour repartir de bases saines.

Si vous oubliez l'accolade fermante sur une commande @code{\index} alors
vous obtiendrez un message du genre de :

@example
Runaway argument?  @{Ackermann!function
!  Paragraph ended before \@@wrindex was complete.
@end example


@node makeindex
@subsection @command{makeindex}

@findex index, traitement
@cindex makeindex, @r{programme}
@cindex @file{.ind}, fichier
@cindex @file{.idx}, fichier

Synopsis, l'un parmi :

@example
makeindex @var{nomfic}
makeindex -s @var{fichier-style} @var{nomfic}
makeindex @var{options} @var{nomfic0} ...
@end example

Trie l'information d'index dans le fichier auxiliaire, et fait d'autres
traitements dessus. C'est un programme en ligne de commande. Il prend en
entrée un ou plusieurs fichiers bruts d'index, les fichiers
@file{@var{nomfic}.idx}, et produit en sortie le ficher d'index fini, le
fichier @file{@var{nomfic}.ind} qui est l'entrée de @code{\printindex}
(@pxref{\printindex}).

@cindex @file{.isty}, fichier
@findex index, fichier de style
@findex makeindex, fichier de style
La première forme de la commande suffit pour beaucoup d'usages. La
deuxième permet de formater l'index en utilisant un @dfn{fichier de
style d'index}, un fichier @file{.isty}.  La troisième forme est la plus
générale ; voir la documentation complète sur le CTAN.

Ci-dessous on donne un exemple d'un fichier @file{.isty} simple :

@example
% book.isty 
%   $ makeindex -s book.isty -p odd book.idx
% creates the index as book.ind, starting on an odd page. 
preamble
"\\pagestyle@{empty@}
\\small
\\begin@{theindex@}
\\thispagestyle@{empty@}"

postamble
"\n
\\end@{theindex@}"
@end example

La présente description ne couvre que certaines des possibilités du
@var{fichier-style}. Pour une liste complète voir la documentation sur
le CTAN.

Un fichier de style consiste en une liste de couples :
@var{spécificateur} et @var{attribut}. Ils peuvent apparaître dans le
fichier dans un ordre quelconque. Tous les @var{attribut}s sont des
chaînes, sauf mention du contraire. Les chaînes sont entourées de
guillemets anglais doubles, @code{"}, et la longueur maximale d'une
chaîne est de 144 caractères.  Le @code{\n} représente un saut de ligne
et le @code{\t} une tabulation. Les controbliques sont échappées avec
une autre controblique, comme cela : @code{\\}.  Si une ligne commence
avec un signe pourcent, @code{%}, alors c'est un commentaire.

@ftable @code
@anchor{makeindex preamble}
@item preamble
Préambule du fichier d'index de sortie. Définit le contexte dans lequel
l'index est formaté. Vaut par défaut : @code{"\\begin@{theindex@}\n"}.

@anchor{makeindex postamble}
@item postamble
Postambule du fichier d'index de sortie. Vaut par défaut :
@code{"\n\n\\end@{theindex@}\n"}.

@anchor{makeindex group skip}
@item group_skip
@findex \indexspace
Traditionnellement les articles d'index sont répartis en groupes,
typiquement un groupe pour les articles commençant pas la lettre
@samp{a}, etc.  Ce spécificateur donne ce qui est inséré quand un
nouveau groupe commence.  Vaut par défaut : @code{"\n\n \\indexspace\n"}
(@code{\indexspace} est une commande qui insère une longueur élastique,
par défaut @code{10pt plus5pt minus3pt}).

@anchor{makeindex letheadflag}
@item lethead_flag
Un entier. Il commande ce qui est inséré pour un nouveau groupe ou une
nouvelle lettre. Lorsqu'il vaut 0 (ce qui est le réglage par défaut)
alors rien d'autre que @code{group_skip} n'est inséré avant le
groupe. S'il est positif, alors pour une nouvelle lettre les attributs
@code{lethead_prefix} et @code{lethead_suffix} sont insérés, avec cette
lettre en capitale entre eux. S'il est négatif, alors ce qui est inséré
est la lettre en bas de casse. Vaut par défaut 0.

@anchor{makeindex lethead prefix}
@item lethead_prefix
Si un nouveau groupe commence avec une lettre différente alors c'est le
préfixe inséré devant l'en-tête présentant la nouvelle lettre. Vaut par
défaut : @code{""}

@anchor{makeindex lethead suffix}
@item lethead_suffix
Si un nouveau groupe commence avec une lettre différente alors c'est le
suffixe inséré après l'en-tête présentant la nouvelle lettre. Vaut par
défaut : @code{""}

@anchor{makeindex item 0}
@item item_0 
C'est ce qui est mis entre deux articles de niveau 0. Vaut par défaut :
@code{"\n \\item "}.

@anchor{makeindex item 1}
@item item_1
Mis entre deux articles de niveau 1. Vaut par défaut : @code{"\n
\\subitem "}.

@anchor{makeindex item 2}
@item item_2
Mis entre deux articles de niveau 2. Vaut par défaut : @code{"\n
\\subsubitem "}.

@anchor{makeindex item 01}
@item item_01
C'est ce qui est mis entre un article de niveau 0 et un article de
niveau 1. Vaut par défaut : @code{"\n \\subitem "}.

@anchor{makeindex item x1}
@item item_x1
C'est ce qui est mis entre un article de niveau 0 et un article de
niveau 1 dans le cas où l'article de niveau 0 n'a pas de numéro de page
(comme dans @code{\index@{aaa|see@{bbb@}@}}). Vaut par défaut :
@code{"\n \\subitem "}.

@anchor{makeindex item 12}
@item item_12
C'est ce qui est mis entre un article de niveau 1 et un article de
niveau 2.  Vaut par défaut : @code{"\n \\subsubitem "}.

@anchor{makeindex item x2}
@item item_x2
C'est ce qui est mis entre un article de niveau 1 et un article de
niveau 2 si l'article de niveau 1 n'a pas de numéro de page. Vaut par
défaut : @code{"\n \\subsubitem "}.

@anchor{makeindex delim 0}
@item delim_0
Délimiteur mis entre une clef de niveau 0 et son premier numéro de
page. Vaut par défaut : une virgule suivie d'un blanc, @code{", "}.

@anchor{makeindex delim 1}
@item delim_1
Délimiteur mis entre une clef de niveau 1 et son premier numéro de
page.  Vaut par défaut : une virgule suivie d'un blanc, @code{", "}.

@anchor{makeindex delim 2}
@item delim_2
Délimiteur mis entre une clef de niveau 2 et son premier numéro de
page.  Vaut par défaut : une virgule suivie d'un blanc, @code{", "}.

@anchor{makeindex delim n}
@item delim_n
Délimiteur mis entre deux numéros de page de la même clef (quel que soit
le niveau) .  Vaut par défaut : une virgule suivie d'un blanc, @code{",
"}.

@anchor{makeindex delim r}
@item delim_r
Délimiteur mis entre le numéro de début et le numéro de fin d'une plage
de numéros de page deux numéros de page. Vaut par défaut : @code{"--"}.

@anchor{makeindex line max}
@item line_max
Un entier. Longueur maximale d'une ligne d'article d'index dans la
sortie au delà de quoi la ligne est repliée. Vaut par défaut :
@code{72}.

@anchor{makeindex indent space}
@item indent_space
Ce qui est inséré au début d'une ligne repliée. Vaut par défaut :
@code{"\t\t"}.

@anchor{makeindex indent length}
@item indent_length
Un nombre. La longueur d'un renfoncement de ligne repliée. La valeur par
défaut d'@code{indent_space} est de deux tabulations, et chaque
tabulation compte pour huit espaces de sorte que la valeur par défaut
est @code{16}.

@anchor{makeindex page precedence}
@item page_precedence
Un document peut avoir différents types de numérotations des pages. Par
exemple, un livre peut avoir des matières préliminaires dont les pages
sont numérotées en chiffres romains bas de casse alors que les pages de
la matière principale sont en chiffres arabes. Cette chaîne spécifie
l'ordre dans lequel ils apparaissent dans l'index. La commande
@command{makeindex} prend en charge cinq types différents de
numérotation : romain bas de casse @code{r}, numérique ou arabe
@code{n}, alphabétique bas de casse @code{a}, romain capital @code{R},
et alphabétique capital @code{A}.  Vaut par défaut : @code{"rnaRA"}.

@end ftable

@cindex xindy, @r{programme}
Il y a plusieurs autres programmes faisant le même travail que
@command{makeindex}. L'un d'eux est @command{xindy}
(@uref{https://ctan.org/pkg/xindy}), qui fait de l'internationalisation
et peut traiter des documents balisés en utilisant @LaTeX{} et plusieurs
autres langages. Il est écrit en Lisp, hautement configurable, à la fois
en termes de balise et en termes d'ordre d'assemblage du texte, comme
décrit dans sa documentation.

@findex xindex, @r{programme}
Un programme d'indexation plus récent prenant en charge l'Unicode est
@code{xindex}, écrit en Lua (@url{https://ctan.org/pkg/xindex}).

@node \printindex
@subsection @command{\printindex}

@cindex index, impression
@findex \printindex

Synopsis :

@example
\printindex
@end example

Place l'index dans la sortie.

@PkgIndex{makeidx}
Pour obtenir un index vous devez en premier inclure
@code{\usepackage@{makeidx@}} dans le préambule du document et compiler
le document, et ensuite exécuter la commande système
@command{makeindex}, puis de nouveau compiler le
document. @xref{Indexes}, pour plus de détails et un exemple d'usage de
@code{\printindex}.

@node Letters
@chapter Des lettres
@cindex lettres, écrire des
@cindex écrire des lettres

Synopsis :

@example
\documentclass@{letter@}
\address@{@var{adresse expéditeur}@}
\signature@{@var{nom de l'expéditeur}@}
\begin@{document@}
\begin@{letter@}@{@var{adresse destinataire}@}
\opening@{@var{apostrophe}@}
  @var{corps-de-la-lettre}
\closing@{@var{texte de salutation}@}
\end@{letter@}
  ...  encore des lettres ...
\end@{document@}
@end example

Produit une ou plusieurs lettres.

Chaque lettre est dans un environnement séparé @code{letter}, dont
l'argument @var{adresse desinataire} contient souvent plusieurs lignes
séparées par une double controblique (@code{\\}).  Par exemple, vous
pourriez avoir :

@example
 \begin@{letter@}@{Ninon de l'Enclos \\
      l'hôtel Sagonne@}
   ...
 \end@{letter@}
@end example

Le début de l'environnement @code{letter} réinitialise le numéro de page
à 1, et le numéro de note en bas de page à 1 aussi.

Les @var{adresse expéditeur} et @var{nom de l'expéditeur} sont
communs à toutes les lettres, qu'il y en ait une ou plus, ainsi il est
préférable de mettre ces déclarations dans le préambule. Comme avec
l'adresse du destinataire, souvent @var{adresse expéditeur} contient plusieurs
lignes séparées par une double controblique @code{\\}. @LaTeX{} place
le @var{nom de l'expéditeur} sous la salutation, après un espace
vertical pour la signature manuscrite traditionnelle ; il peut aussi
contenir plusieurs lignes.

Le corps de chaque environnement @code{letter} commence par une commande
@code{\opening} obligatoire telle que @code{\opening@{Madame,
Monsieur,@}}. Le texte @var{corps-de-la-lettre} est du code @LaTeX{}
ordinaire et peut donc tout contenir de la liste énumérée à des formules
mathématique en hors texte, à ceci près que la commandes de rubricage
telles que @code{\chapter} qui n'ont pas lieu d'être au sein d'une
lettre sont indisponibles. Chaque environnement @code{letter} se termine
typiquement par une commande @code{\closing} telle que dans
@code{\closing@{Je vous prie, Madame, Monsieur, d'agréer l'expression de
mes sentiments les meilleurs.@}}.

@findex \\ @r{(pour les lettres)}
de la matière supplémentaire peut venir après le @code{\closing}. Vous
pouvez préciser qui est en copie de la lettre avec une commande comme
@code{\cc@{Le Patron\\Le Patron du Patron@}}. Il y a une commande
@code{\encl}  similaire pour spécifier une liste de pièces jointes. Et,
vous pouvez ajouter un postscriptum avec @code{\ps}.

Par défaut @LaTeX{} renfonce la signature et la salutation
@code{\closing} la précédant d'une longueur valant
@code{\longindentation}. Celle-ci vaut par défaut
@code{0.5\textwidth}. Pour les aligner à gauche, il suffit de spécifier
@code{\setlength@{\longindentation@}@{0em@}} dans votre préambule.

Pour fixer la date utilisez quelque chose comme
@code{\renewcommand@{\today@}@{2015-10-12@}}. En plaçant ce code dans
votre préambule, il s'appliquera à toutes les lettres du document.

Cet exemple est avec un seul environnement @code{letter}.  Les trois
lignes marquées en commentaire comme optionnelles sont typiquement
omises.

@example
\documentclass@{letter@}
\usepackage[T1]@{fontenc@}
\usepackage@{french@}
\address@{Rue de l'expéditeur \\ Ville de l'expéditeur@}
\signature@{Nom de l'expéditeur\\ Titre de l'expéditeur@}
% optionnel : \location@{Boîte Postale 13@}
% optionnel : \telephone@{(102) 555-0101@}
\begin@{document@}
\begin@{letter@}@{Nom du destinataire \\ Adresse du destinataire@}
\opening@{Monsieur,@}
% optionnel : \thispagestyle@{firstpage@}
I ne suis pas intéressé à faire affaire avec vous.
\closing@{Je vous prie, Monsieur, de recevoir mes salutations distinguées.@}
\end@{letter@}
\end@{document@}
@end example

Ces commandes sont utilisées avec la classe @code{letter}.

@menu
* \address::            Adresse de l'expéditeur.
* \cc::                 Liste des personnes en copie.
* \closing::            Dire au revoir.
* \encl::               Liste des pièces jointes.
* \location::           L'adresse de votre organisation.
* \makelabels::         Fabriquer des étiquettes d'adresse.
* \name::               Votre nom, pour l'adresse de l'expéditeur.
* \opening::            Dire bonjour.
* \ps::                 Ajouter un postscriptum.
* \signature::          Votre signature.
@c * \startbreaks::        Autorisez les sauts de page.
@c * \stopbreaks::         Interdire les sauts de page.
* \telephone::          Votre numéro de téléphone.
@end menu


@node \address
@section @code{\address}
@findex \address

Synopsis :

@example
\address@{@var{adresse-expéditeurs}@}
@end example

Spécifie l'adresse de retour telle qu'elle apparaît sur la lettre et sur
l'enveloppe. Séparez des lignes multiples au sein de
@var{adresse-expéditeurs} avec une double controblique @code{\\}.

Parce qu'elle peut s'appliquer à des lettres multiples cette déclaration
est souvent placée dans le préambule. Toutefois elle peut être faite
n'importe où, y compris au sein d'un environnement @code{letter}
individuel.

Cette commande est optionnelle : sans la déclaration @code{\address} la
lettre est formatée avec un espace à blanc en haut de sorte à pouvoir
être imprimée sur du papier à en-tête pré-imprimé. (@xref{Overview},
pour les détails concernant votre implémentation locale). Avec la
déclaration @code{\address}, elle est formatée comme une lettre
personnelle.

En voici un exemple :

@example
\address@{Stephen Maturin \\
         The Grapes of the Savoy@}
@end example

@node \cc
@section @code{\cc}

@findex \cc
@cindex copie, liste des personnes en, dans une lettre
@cindex liste des personnes en copie, dans une lettre

Synopsis :

@example
\cc@{@var{premier nom}\\...@}
@end example

Produit une liste de noms de personnes mis en copie de la lettre. Cette
commande est optionnelle. Si elle est présente, alors elle vient
typiquement après le @code{\closing}. En cas de ligne multiple, séparez
les avec une double controblique @code{\\}, comme dans :

@example
\cc@{Président \\
    Vice-président@}
@end example


@node \closing
@section @code{\closing}

@findex \closing
@cindex lettres, salutation
@cindex fin d'une lettre

Synopsis :

@example
\closing@{@var{texte}@}
@end example

@c XXXX TODO en français la signature est au dessus du nom, pas en
@c dessous!

D'ordinaire à la fin d'une lettre, au dessus de la signature manuscrite,
il y a un @code{\closing} (bien que cette commande soit
optionnelle). Par exemple :

@example
\closing@{Je vous prie, Madame, Monsieur, d'agréer l'expression de ma
   confiance.@}
@end example


@node \encl
@section @code{\encl}

@findex \encl
@cindex pièces jointes, liste

Synopsis :

@example
\encl@{@var{ligne1}\\@var{ligne2}@}
@end example

Déclare une liste d'une ou plus de pièces jointes.


@node \location
@section @code{\location}
@findex \location

Synopsis :

@example
\location@{@var{texte}@}
@end example

Le @var{texte} apparaît centré au bas de chaque page. Il apparaît
seulement si le style de la page est @code{firstpage}.


@node \makelabels
@section @code{\makelabels}
@findex \makelabels

Synopsis :

@example
\makelabels
@end example

Crée une feuille d'étiquettes d'adresses à partir des adresses des
destinataires, une pour chaque lettre. Cette feuille sera sortie avant
les lettres, avec dans l'idée de la copier sur une feuille vierge de
vignettes autocollantes. Cette commande est à mettre dans le préambule.

Vous pouvez personnaliser les étiquettes en redéfinissant les trois
commandes @code{\startlabels}, @code{\mlabel} et @code{\returnaddress}
dans le préambule.  Ces commandes ne sont pas à appeler directement par
l'utilisateur, c'est la classe @code{letter} qui les appelle.  La
commande @code{\startlabels} compose la page sur laquelle les étiquettes
sont imprimées en termes de largeur, de hauteur, et de nombre de
colonnes, etc.  La commande @code{\mlabel@{@var{adresse
expéditeur}@}@{@var{adresse destinataire}@}} est appelée pour chaque
lettre du document avec deux arguments :

@itemize
@item
Le premier, @var{adresse expéditeur}, est le contenu courant de la macro
@code{\returnaddress}
@item
Le second, @var{adresse destinataire}, est l'adresse du destinataire
telle que passée en argument à l'environnement @code{letter}.
@end itemize

La définition par défaut de @code{\mlabel} ignore le premier argument,
c'est à dire que si vous placez seulement un @code{\makelabels} dans le
préambule, la feuille d'étiquettes ne contiendra des étiquettes que pour
les destinataires.

Si vous désirez imprimer une étiquette d'adresse expéditeur et d'adresse
destinataire pour chaque lettre, vous devez faire deux choses :
@enumerate
@item
La première est de redéfinir @code{\mlabel} pour fabriquer deux
étiquettes au lieu d'une, vous pouvez pour cela mettre ce qui suit dans le préambule :

@example
\newcommand*\originalMlabel@{@}
\let\originalMlabel\mlabel
\def\mlabel#1#2@{\originalMlabel@{@}@{#1@}\originalMlabel@{@}@{#2@}@}
@end example

Ceci ne suffit toutefois pas, parce que la première des deux étiquettes
est vide, vu que la définition par défaut de @code{\returnaddress} l'est.
@item
La seconde est de redéfinir @code{\returnaddress} pour contenir
l'adresse de l'expéditeur, vous pouvez faire cela en plaçant dans le
préambule :

@example
\renewcommand*\returnaddress@{\protect\fromname\\\protect\fromaddress@}
@end example

@end enumerate

@node \name
@section @code{\name}
@findex \name

@code{\name@{June Davenport@}}

Le nom de l'expéditeur, à imprimer sur l'enveloppe avec l'adresse de
retour.


@node \opening
@section @code{\opening@{@var{texte}@}}
@findex \opening
@cindex lettres, commencer

Synopsis :

@example
\opening@{@var{texte}@}
@end example

Cette commande est obligatoire. Elle commence la lettre, en suivant le
@code{\begin@{letter@}@{...@}}. L'argument obligatoire @var{texte} est le
@cindex appel
texte d'@dfn{appel} de votre lettre. Par exemple :

@example
\opening@{Dear John,@}
@end example


@node \ps
@section @code{\ps}
@findex \ps
@cindex postscriptum, dans une lettre

Synopsis :

@example
\ps@{@var{texte}@}
@end example


Utilisez la commande @code{\ps} pour commencer un postscriptum dans une lettre, après
@code{\closing}.


@node \signature
@section @code{\signature@{@var{texte}@}}
@findex \signature

Synopsis :

@example
\signature@{@var{première ligne} \\
            ... @}
@end example

@findex \signature

Le nom de l'expéditeur. Cette commande est optionnelle, quoique son
inclusion soit habituelle.

Le texte de l'argument apparaît à la fin de la lettre, après la clôture
et après une espace verticale pour la signature manuscrite
traditionnelle. Séparez des lignes multiples avec une double
controblique @code{\\}.  Par exemple :

@example
\signature@{J Fred Muggs \\
           White House@}
@end example

La valeur par défaut de @LaTeX{} pour l'espace verticale space du texte
de @code{\closing} au texte de @code{\signature} est
@code{6\medskipamount}, ce qui vaut six fois 0,7@dmn{em}.

Cette commande est d'ordinaire dans le préambule, de sorte à s'appliquer
à toutes les lettres du document.  Pour qu'elle ne s'applique qu'à une
seule lettre, placez la au sein d'un environnement @code{letter} et
avant le @code{\closing}.

Vous pouvez inclure un graphique dans la signature, par exemple avec
@code{\signature@{\vspace@{-6\medskipamount@}\includegraphics@{sig.png@}\\
My name@}} (ceci nécessite d'écrire @code{\usepackage@{graphicx@}} dans
le préambule).

@c Jim a écrit: I think this is not a user-level command; it is used to keep from breaking
@c the page between the closing and the signature
@c @node \startbreaks
@c @section @code{\startbreaks}
@c @findex \startbreaks
@c
@c @code{\startbreaks}
@c
@c Used after une commande @code{\stopbreaks} to allow page breaks again.
@c
@c
@c
@c @node \stopbreaks
@c @section @code{\stopbreaks}
@c @findex \stopbreaks
@c
@c @code{\stopbreaks}
@c
@c Inhibit page breaks until une commande @code{\startbreaks} occurs.
@c


@node \telephone
@section @code{\telephone}
@findex \telephone

Synopsis :

@code{\telephone@{@var{numéro}@}}

C'est le numéro de téléphone de l'expéditeur. Déclaré typiquement dans
le préambule, où il s'applique à toutes les lettres. Ceci apparaît
seulement si le style de
@c vincentb1: vérifier ce que pagestyle veut dire.
page (@code{pagestyle}) @code{firstpage} est sélectionné. Dans ce cas,
il apparaît en bas à droite de la page.


@node Terminal input/output
@chapter Entrée/sortie console
@cindex entrée/sortie console

@menu
* \openin & \openout::  Ouvrir un fichier.
* \read::               Lire du texte à partir d'un fichier.
* \typein::             Lire du texte à partir de la console.
* \typeout::            Écrire du texte vers la console.
* \write::              Écrire du texte dans un fichier ou le terminal.
@end menu

@node \openin & \openout
@section @code{\openin} & @code{\openout}

@anchor{\openin}
@anchor{\openout}
@anchor{\closein}
@anchor{\closeout}
@findex \openin
@findex \openout
@findex \closein
@findex \closeout
@cindex fichier, ouverture
@cindex fichier, fermeture
@cindex ouvrir un fichier

Synopsis :

@example
\openin @var{numéro}=@var{nomfichier}
@end example

ou :

@example
\openout @var{numéro}=@var{nomfichier}
@end example

Ouvre un fichier pour y lire, ou pour y écrire.  Pour la plupart des
moteurs, le @var{numéro} doit être entre 0 et 15, comme dans
@code{\openin3}, dans Lua@LaTeX{} @var{numéro} peut être entre 0 et
127.

Ici @TeX{} ouvre le fichier le fichier @file{presidents.tex} en lecture.

@example
\newread\fichierpresidents
\openin\fichierpresidents=presidents
\typeout@{fichierpresidents vaut \the\fichierpresidents@}
\read\fichierpresidents to\presidentligne
\typeout@{\presidentligne@}
@end example

@noindent
La commande @code{\newread} alloue des numéros de flux d'entrée de 0
à 15 (il y a aussi une commande @code{\newwrite}).  La variable
@code{\fichierpresidents} est plus facile à mémoriser mais sous le capot
ce n'est rien de plus qu'un numéro ; le premier @code{\typeout} donne
quelque chose du genre de @samp{fichierpresidents vaut 1}.  De plus,
@code{\newread} garde la trace de l'allocation de sorte que si vous en
utilisez trop alors vous obtiendrez une erreur du genre de @samp{! No
room for a new \read}.  Le second @code{\typeout} produit la première
ligne du fichier, quelque chose du genre de @samp{1 Bonaparte,
Louis-Napoléon}.

D'ordinaire @TeX{} n'essaie pas d'ouvrir le fichier jusqu'à la prochaine
éjection de page. Pour changer cela, utilisez
@code{\immediate\openin @var{numéro}=@var{nomfichier}} ou
@code{\immediate\openout @var{numéro}=@var{nomfichier}}.

Fermez les fichiers avec @code{\closein @var{numéro}} et
@code{\closeout @var{numéro}}.

La façon dont @LaTeX{} manipule les noms de fichiers varie selon les
distributions, et peut même varier d'une version à l'autre d'une même
distribution.  Si le nom de fichier n'a pas d'extension alors @TeX{} y
ajoute un @file{.tex}. L'exemple suivant crée @file{presidents.tex}, y
écrit une ligne, et le ferme.

@example
\newwrite\fichierpresidents
\openout\fichierpresidents=presidents
\write\fichierpresidents@{1 Bonaparte, Louis-Napoléon@}
\closeout\fichierpresidents
@end example

@noindent
Mais les noms de fichier avec un point peuvent causer des problèmes : si
@TeX{} tombe sur un @var{nomfichier} comme @file{presidents.dat} il se
peut qu'il cherche d'abord @file{presidents.dat.tex} et ensuite
@file{presidents.dat}, ou bien le contraire.  La documentation de votre
distribution devrait en dire plus, et si cela fonctionne pour vous tant
mieux, mais pour assurer une portabilité complète le mieux et d'utiliser
des noms de fichier ne contenant que les vingt-six lettres ASCII
(insensible à la casse) et les dix chiffres, ainsi que
les tirets de 8 @samp{_} et de 6 @samp{-}, et en particulier sans point
ni espace.

Pour @code{\openin}, si @TeX{} ne peut pas trouver le fichier alors il
ne produit pas une erreur.  Il ne fait que considérer que ce flux n'est
pas ouvert (ce qu'on peut vérifier avec @code{\ifeof} ; on peut
également recourir à la commande @code{\InputIfFileExists}, @pxref{Class
and package commands}).  Si vous essayer d'utiliser le même numéro deux
fois, @LaTeX{} ne produit pas d'erreur.  Si vous essayer d'utiliser un
mauvais numéro, alors vous obtiendrez un message d'erreur du genre de
@samp{!  Bad number (16).  <to be read again> = l.30 \openin16=test.jh}.

@node \read
@section @code{\read}

@findex \read
@cindex fichier, lecture d'un
@cindex lire un fichier
@cindex lecture d'un fichier

Synopsis :

@example
\read @var{numéro} to@var{macro}
@end example

Fait que la commande @var{macro} contienne la ligne suivante d'entrée du
flux de texte @var{numéro}, comme dans @code{\read5 to\data}.

L'exemple suivant ouvre le fichier @file{mel.tex} en lecture, me le
contenu de la première ligne dans la commande @code{\courriel}, et
ensuite ferme le fichier.

@example
\newread\fichierreception
\openin\fichierreception=mel
\read\fichierreception to\courriel
\typeout@{Adresse mél : \courriel@}
\closein\fichierreception
@end example

Si @var{numéro} est hors de l'intervalle de 0 à 15 ou si aucun fichier
avec ce numéro n'est ouvert, ou si le fichier est à sa fin, alors
@code{\read} prend son entrée à partir du terminal.  Notez, cependant,
que la méthode naturelle en @LaTeX{} de prendre en entrée à partir du
terminal est @code{\typein} (@pxref{\typein}).

Pour lire un fichier entier en une fois utilisez @code{\input}
(@pxref{\input}) ou @code{\include} (@pxref{\include & \includeonly}).

@PkgIndex{datatool}

Une raison usuelle de vouloir lire d'un fichier de données est de faire
du publipostage.  CTAN a plusieurs paquetage pour cela ; parmi lesquels
@package{datatool}.

@node \typein
@section @code{\typein[@var{cmd}]@{@var{msg}@}}
@findex \typein

@c xxx Realigner sur l'anglais
Synopsis :

@example
\typein[@var{\cmd}]@{@var{msg}@}
@end example

@code{\typein} tape @var{msg} sur la console et fait que @LaTeX{}
s'arrête et attend que vous saisissiez une ligne d'entrée, en la
terminant par un retour chariot.  Si l'argument optionnel @var{\cmd} est
omis, l'entrée tapée est traitée comme si elle avec été incluse dans le
fichier d'entrée à la place de la commande @code{\typein}.  Si
l'argument @var{\cmd} est présent, cela doit être un nom de commande.
Ce nom de commande est alors défini, ou redéfini, pour se développer en
le texte en entrée qui a été tapé.


@node \typeout
@section @code{\typeout@{@var{msg}@}}
@findex \typeout

Synopsis :

@example
\typeout@{@var{msg}@}
@end example

Tape @code{msg} sur le terminal et dans le journal (fichier
@code{log}). Les commandes dans @code{msg} qui sont définies avec
@code{\newcommand} ou @code{\renewcommand} (entre autres) sont
remplacées par leurs définitions avant d'être tapées.

Les règles usuelles de @LaTeX{} pour le traitement de plusieurs espaces
comme un seul espace et pour ignorer les espaces après un nom de
commande s'appliquent à @code{msg}. Une commande @code{\space} dans
@code{msg} provoque un unique espace tapé, indépendant des espaces qui
l'entourent. Un @code{^^J} dans @code{msg} tape un saut à la ligne.

@node \write
@section @code{\write}

@findex \write

Synopsis :

@example
\write @var{numéro}@{@var{chaîne}@}
@end example

Écrit @var{chaîne} vers le fichier journal (@file{.log}), vers le
terminal, ou vers un fichier ouvert par @code{\openout}.  Par exemple,
@code{\write6} écrit vers le flux textuel numéro 6

Si le code suivant apparaît dans le fichier @file{@var{fichierbase}.tex}
alors cela ouvre le fichier @file{@var{fichierbase}.jh}, y écrit
@samp{Bonjour tout le monde !} et un saut le ligne, et ferme ce fichier.

@example
\newwrite\monfichier
\immediate\openout\monfichier=\jobname.jh % \jobname est le nom
                                       % de base du fichier racine
...
\immediate\write\monfichier@{Bonjour tout le monde !@}
  ...
\immediate\closeout\monfichier
@end example

@findex \newwrite
@noindent
Le @code{\newwrite} alloue un numéro de flux, en lui donnant un nom
symbolique pour se faciliter la vie, de sorte que @code{flux
\newwrite\monfichier\the\monfichier} produit quelque chose du genre de
@samp{flux 3}.  Ensuite @code{\openout} associe le numéro de flux avec
le nom de fichier fourni.  Et puis à la fin @TeX{} exécute
@code{\write3} ce qui place la chaîne dans le fichier.

@cindex journal, écrire vers le fichier
@cindex terminal, écrire vers le
@cindex @math{-1}, écrire dans le flux numéro
Typiquement @var{numéro} est compris entre 0 et 15, parce que typiquement
les auteurs @LaTeX{} suivent l'exemple précédent et le numéro est alloué
par le système.  Si @var{numéro} est hors de l'intervalle de 0 à 15 ou
si il n'est pas associé à un fichier ouvert alors @LaTeX{} écrit
@var{chaîne} vers le fichier journal.  Si @var{numéro} est positif alors
en plus @LaTeX{} écrit @var{chaîne} vers le terminal. Ainsi, @code{test
\write-1@{Bonjour tout le monde !@}} place @samp{Bonjour tout le
monde !} suivi d'un saut de ligne dans le fichier journal (c'est ce que
la commande @code{\wlog} fait ; @pxref{\wlog}).  Et
@code{\write100@{Bonjour tout le monde !@}} met la même chose dans le
fichier journal mais aussi met @samp{Bonjour tout le monde !} suivi d'un
saut de ligne dans la sortie terminal.  (Mais 16, 17, et 18 sont des
valeurs spéciales de @var{numéro} ; voir ci-dessous.)

@cindex Lua@TeX{}, 256 flux de sortie dans
Dans Lua@TeX{}, au lieu de 16 flux de sortie il y en a 256
(@pxref{@TeX{} engines}).

@findex \@@auxout
@findex \@@mainaux
Utilisez @code{\write\@@auxout@{@var{chaîne}@}} pour écrire vers le
fichier @file{.aux} courant qui est associé soit au fichier racine soit
au fichier inclus courant ; et utilisez
@code{\write\@@mainaux@{@var{chaîne}@}} pour écrire le fichier
@file{.aux} principal. Ces noms symboliques sont définis par @LaTeX{}.

@c credit: David Carlisle https://tex.stackexchange.com/a/115933/121234
Par défaut @LaTeX{} n'écrit pas @var{chaîne} vers le fichier
immédiatement.  C'est ainsi parce que, par exemple, vous pourriez avoir
besoin de @code{\write} pour sauvegarder le numéro de page courant, mais
au moment où @TeX{} rencontre une commande @code{\write} typiquement il
ne connaît pas quel est le numéro de page, puisque il n'a pas encore
découpé la sortie en pages.  Ainsi, vous utilisez @code{\write} dans
l'un des trois contextes suivants :

@example
\immediate\write\@@auxout@{@var{chaîne}@}     %1
\write\@@auxout@{@var{chaîne}@}              %2
\protected@@write\@@auxout@{@}@{@var{chaîne}@}   %3
@end example

@enumerate
@item
@cindex @code{\write} immédiat
@findex \immediate\write
Avec le premier, @LaTeX{} écrit @var{chaîne} vers le fichier
immédiatement.  Toutes les macros dans @var{chaîne} sont développées à
fond (exactement comme dans @code{\edef} de sorte que pour empêcher le
développement vous devez utiliser @code{\noexpand}, un @code{toks}, etc.
mais avec la différence que vous devez utiliser @code{#} au lieu de
@code{##}).

@item
@cindex @code{\write} retardé
@cindex élément extraordinaire
@findex \shipout @r{et développement}
Avec le deuxième, @var{chaîne} est stockée dans la liste courante des
choses (comme un élément « extraordinaire » de @TeX{}) et conservé
jusqu'à ce que la page soit éjectée et de la même manière les macros ne
sont pas développées jusqu'à l'éjection (@code{\shipout}). Au moment du
@code{\shipout}, @var{chaîne} est développée à fond.

@item
@findex \protected@@write
Le troisième, @code{\protected@@write}, est semblable au deuxième sauf
que vous pouvez utiliser @code{\protect} pour éviter le
développement. Le premier argument qui est en plus vous permet d'insérer
localement des définitions supplémentaires pour que plus de macros
soient protégées ou pour avoir d'autres définitions spéciales pendant
l'écriture.
@end enumerate


Voici un exemple simple de développement avec @code{\write} dans lequel
@var{chaîne} contient une séquence de contrôle @code{\triplex} que l'on
a définie comme le texte @samp{XYZ} :

@example
\newwrite\fichierjh
\openout\fichierjh=test.jh
\newcommand@{\triplex@}@{XYZ@}
\write\fichierjh@{test \triplex test@}
@end example

@noindent
Ceci résulte en ce que le fichier @file{test.jh} contienne le texte
@samp{test XYZtest} suivi d'un saut de ligne.

@cindex @code{\write}, flux 16, 17, 18
Les cas où @var{numéro} vaut 16, 17, ou 18 sont spéciaux.  À cause du
comportement de @code{\write} quand @var{numéro} est hors de
l'intervalle de 0 à 15 qu'on a déjà décrit plus haut, dans Plain @TeX{}
@code{\write16} et @code{\write17} étaient parfois utilisés pour écrire
dans le fichier journal et le terminal ; toutefois, dans @LaTeX{}, la
façon naturelle de faire ceci est d'utiliser @code{\typeout}
(@pxref{\typeout}).  La commande @code{\write18} est encore plus
spéciale ; les systèmes @TeX{} modernes l'utilisent pour passer des
commandes au système d'exploitation (@pxref{\write18}).

@cindex saut de ligne, dans @code{\write}
@cindex @code{^^J}, dans @code{\write}
D'ordinaire @code{\write} produit en sortie une unique ligne. On peut y
insérer un saut de ligne avec @code{^^J}.  Ainsi, l'exemple suivant
produit deux lignes dans le fichier journal :

@example
\wlog@{Les lignes parallèles ont beaucoup en commun.^^JMais elles ne se
rencontrent jamais.@}
@end example

@PkgIndex{answers}
Un cas usuel dans lequel des auteurs tentent d'écrire dans leur propre
fichier est pour les réponses à des exercices, ou dans quelque autre
situation où vous désirez écrire en sortie verbatim, sans développer les
macros.  CTAN a plusieurs paquetages pour cela ; parmi lesquels
@package{answers}.

@menu
* \write et la sécurité: \write and security. Sécurité.
* \message::          Écrit du texte vers le fichier journal et le terminal.
* \wlog::             Écrit du texte vers le fichier journal.
* \write18::          Exécute une commande du système d'exploitation.
@end menu

@node \write and security
@subsection @code{\write} et la sécurité

@cindex sécurité et @code{\write}
@cindex @code{\write} et sécurité

La possibilité d'écrire dans des fichiers soulève des problèmes de
sécurité. Si vous compilez un fichier @LaTeX{} téléchargé et qu'il
écrase votre fichier de mots de passe alors vous serez à juste titre
embêté.

Ainsi par défaut les systèmes @TeX{} ne vous autorisent à ouvrir en
écriture que les fichiers qui sont dans le répertoire courant ou dans un
sous-répertoire. L'exemple suivant

@example
\newwrite\fichierjh
\openout\fichierjh=../test.jh
@end example

@noindent
produit une erreur du genre de :
@example
Not writing to ../test.jh (openout_any = p).
! I can't write on file `../test.jh'
@end example

@cindex répertoires parents, impossible d'écrire vers
Il est possible d'avoir une telle erreur lorsqu'on essaie d'utiliser une
commande telle que @code{\include@{../nomfichier@}} puisque @LaTeX{} va
essayer d'ouvrir @file{../nomfichier.aux}.  La solution la plus simple est
de placer les fichiers inclus dans le même répertoire que le fichier
racine, ou dans des sous-répertoires.

@node \message
@subsection @code{\message}

@findex \message

Synopsis :

@example
\message@{@var{chaîne}@}
@end example

Écrit @var{chaîne} vers le fichier journal en @file{.log} et le
terminal.

Typiquement, les auteurs @LaTeX{} utilisent @code{\typeout}
(@pxref{\typeout}) qui permet d'utiliser @code{\protect} sur toute
commande fragile au sein de @var{chaîne} (@pxref{\protect}).  Mais la
commande @code{\typeout} insère un saut de ligne à la fin de
@var{chaîne} contrairement à @code{\message}, aussi cette dernière peut
être utile.

Dans l'exemple ci-dessous dans le corps du document

@example
avant\message@{Un Deux@}\message@{Trois@}\message@{Quatre^^JLes@}
\message@{pouces vont se battre.@}Après
@end example

@noindent
dans certaines circonstances (voir ci-dessous) @LaTeX{} écrit ce qui suit
à la fois vers le terminal et le fichier journal.

@example
Un Deux Trois Quatre
Les pouces vont se battre.
@end example

@noindent
Un @code{^^J} produit un saut de ligne.  Aussi, dans le document
en sortie, on a entre @samp{avant} et @samp{Après} un seul espace (issu
de la fin de ligne suivant @samp{Les@}}).

Alors que @code{\message} vous permet de mieux contrôler le formatage,
un truc à piger c'est que @LaTeX{} peut très bien bousiller ce formatage
là en insérant des sauts de ligne selon ce qu'il a déjà sorti. Comparez
ce corps de document, où le @samp{Deux} a été déplacé, à celui donné en
exemple plus haut.

@example
avant\message@{Un@}\message@{Deux Trois@}\message@{Quatre^^JLes@}
\message@{pouces vont se battre.@}Après
@end example

La chose suivante peut se produire : lorsque @LaTeX{} produit les
messages en sortie vers le terminal, le message avec @samp{Un} désormais
plus court tient à la fin de la ligne de terminal, et du coup @LaTeX{}
saute de ligne juste après lui et avant le @samp{Deux Trois}.  Ce saut
de ligne apparaît également dans le fichier journal.  Cette insertion de
saut de ligne peut déprendre de, par exemple, la longueur des noms
complet des fichiers inclus. C'est pourquoi il est difficile de produire
des lignes formatées précisément et d'une façon qui soit portable, et de
même de demander que votre message commence au début d'une ligne.


@node \wlog
@subsection @code{\wlog}

@findex \wlog

Synopsis :

@example
\wlog@{@var{chaîne}@}
@end example

Écrit @var{chaîne} vers le fichier journal @file{.log}.

@example
\wlog@{Pour tout n différent de 0, et tout x, (sin x)/n vaut six.@}
\wlog@{Ben oui, il suffit de simplifier par n.@}
@end example

D'ordinaire @var{chaîne} apparaît sur une seule ligne séparée.  Utilisez
@code{^^J} pour insérer un saut de ligne.

@example
\wlog@{C'est Helvetica qui téléphone à Times Roman :@}
\wlog@{Change de ligne !^^JJe t'entends très mal.@}
@end example


@node \write18
@subsection @code{\write18}
@findex \write18
@cindex externes, commandes
@cindex commandes exécutées depuis @LaTeX{}
@cindex système, commandes exécutées depuis @LaTeX{}
@cindex interpréteur de commandes du système d'exploitation, accès à
@c Derived from: Joseph Wright: https://tex.stackexchange.com/a/20446/121234

Synopsis :

@example
\write18@{@var{commande_shell}@}
@end example

Émet une commande vers l'interpréteur du système d'exploitation. Le
système d'exploitation exécute la commande et l'exécution de @LaTeX{}
est bloquée jusqu'à ce que cela soit fini.

@PkgIndex{Asymptote}
La séquence suivante (sur Unix)

@example
\usepackage@{graphicx@}  % dans le préambule
  ...
\newcommand@{\numerofig@}@{1@}
\immediate\write18@{cd pix && asy figure\numerofig@}
\includegraphics@{pix/figure\numerofig.pdf@}
@end example

@noindent
exécute Asymptote (le programme @code{asy}) sur le fichier
@file{pix/figure1.asy}, de sorte que le document peut par la suite lire
le graphique en résultant (@pxref{\includegraphics}).  Comme pour tout
@code{\write}, ici @LaTeX{} développe les macros contenues dans
@var{commande_shell} de sorte que @code{\numerofig} est remplacé par
@samp{1}.

Un autre exemple est que vous pouvez exécuter automatiquement Bib@TeX{}
au début de chaque exécution de @LaTeX{} (@pxref{Using BibTeX}) en
incluant @code{\immediate\write18@{bibtex8 \jobname@}} comme première
ligne du fichier.  Notez que @code{\jobname} se développe par défaut en
le nom de base du fichier racine, ou bien l'argument de l'option
@code{--jobname} si celle-ci est passée sur la ligne de commande.

Il peut arriver que vous ayez besoin de plusieurs étapes pour obtenir
l'information désirée.  L'exemple suivant insère en entrée une liste de
tous les fichiers PDF du répertoire courant (voir aussi
@package{texosquery} plus bas) :

@example
\immediate\write18@{ls *.pdf > tmp.dat@}
\input@{tmp.dat@}
@end example

Le comportement standard de tout @code{\write} est d'attendre jusqu'à la
prochaine éjection de page avant de développer les macros ou d'écrire
dans le flux (@pxref{\write}). Mais il se peut que vous désiriez que
cela soit immédiat.  Pour cela, utilisez
@code{\immediate\write18@{@var{commande_shell}@}}.

Autoriser l'usage de commandes système au sein d'un fichier @LaTeX{}
pose des problèmes de sécurité évidents.  Si vous télécharger un fichier
depuis la Toile et qu'il contient des commandes pour détruire tous vos
fichiers, cela vous rendrait bien malheureux. Le réglage standard dans
les distributions modernes est d'interdire l'accès complet à
l'interpréteur de commande du système d'exploitation. Vous pouvez
l'autoriser, si vous êtes sûr qu'il n'y a pas de danger, en compilant
avec @code{latex --enable-write18 @var{nomfichier}} (@pxref{Command line
options}).  (L'option @code{--shell-escape} est un synonyme dans @TeX{}
Live.)

@cindex restreint, accès shell
@cindex restreint, accès interpréteur de commande du système d'exploitation
Au lieu de l'accès complet, les distributions modernes par défaut
utilisent une version restreinte qui permet à certaines commandes de
fonctionner, telles que celles qui font tourner Metafont pour générer
les polices manquantes, même si vous n'utilisez pas l'option
@code{enable-write18}. Par défaut cette liste de commandes autorisées
est courte et ne fait figurer que les commandes qui sont sous contrôle
des mainteneurs de la distribution (@pxref{Command line options}).

Certains paquetages ont besoin d'exécuter des commandes système
externes. Par exemple @file{sagetex} vous permet de faire faire des
calculs ou tracer des graphiques au logiciel de mathématiques @i{Sage},
puis d'incorporer ces sorties dans votre document. Pour cela vous devez
exécuter @LaTeX{} avec la fonction @code{\write18} pleinement débridée.

@findex /bin/sh@r{, utilisé par @code{\write18}}
@findex sh@r{, utilisé par @code{\write18}}
@findex cmd.exe@r{, utilisé par @code{\write18}}
@findex SHELL@r{, environnement, variables de}
@findex SHELL@r{, variables d'environnement}
Le texte @var{commande_shell} est toujours passé à @file{/bin/sh} sur
les systèmes d'exploitation unixiens, et à l'interpréteur de commande DOS
@file{cmd.exe} sur @value{MSWindows}. @LaTeX{} ignore tout réglage d'un autre
interpréteur de commande par l'utilisateur, ainsi que la variable
d'environnement @code{SHELL}.

@PkgIndex{texosquery}
@cindex système, information
@cindex exploitation, information système de
@cindex locale, information, du système
@cindex répertoire, listage, du système
Si votre besoin c'est d'avoir de l'information sur le système, comme le
nom du système d'exploitation, celui de la locale, ou le contenu d'un
répertoire, alors jeter un coup d'œil au paquetage @package{texosquery} qui
fournit une interface commode et sûre pour cela, contrairement aux
exemples donnés plus haut utilisant @code{\write18} à l'état brut :
@url{https://ctan.org/pkg/texosquery}.

@node Command line interface
@chapter Interface ligne de commande
@anchor{Command line}@c ancien nom
@cindex ligne de commande, interface
@cindex interface ligne de commande
@cindex CLI

Synopsis (depuis la ligne de commande d'un terminal) :

@example
pdflatex @var{options} @var{argument}
@end example

Exécute @LaTeX{} sur @var{argument}. À la place de @command{pdflatex}
vous pouvez aussi utiliser (pour une sortie PDF) @command{xelatex}, ou
@command{lualatex}, ou (pour une sortie DVI) @command{latex} ou
@code{dvilualatex}, entre autres (@pxref{@TeX{} engines}).

L'exemple suivant exécute @LaTeX{} sur le fichier @file{these.tex}
produisant en sortie @file{these.pdf}.

@example
pdflatex these
@end example

@noindent
@findex .tex, @r{extension par défaut}
Notez que @file{.tex} est l'extension par défaut des noms de fichier.

pdf@TeX{} est une évolution du programme original @TeX{}, comme le sont
Xe@TeX{} et Lua@TeX{} (@pxref{@TeX{} engines}).  Ils sont complètement
rétrocompatibles. Mais le programme original avait son propre format de
sortie, DVI, alors que les plus récents peuvent produire directement un
PDF en sortie.  Ceci leur permet de profiter des fonctions
supplémentaires des PDF tels que les hyperliens, la prise en charge de
formats modernes d'images tels que JPG et PNG, et les programmes de
visionnage que l'on trouve de partout.  En bref, si vous exécutez
@command{pdflatex} ou @command{xelatex} ou @command{lualatex} alors par
défaut vous obtenez un PDF et avez accès à toutes ses fonctions
modernes.  Si vous exécutez @command{latex}, ou @command{dvilualatex},
alors vous obtenez un DVI.  La description faite ici suppose
@command{pdflatex}.

@xref{Command line options}, pour une sélection des options de ligne de
commande les plus utiles. Quant à @var{argument}, le cas habituel est
qu'il ne commence pas par une controblique, dans ce cas le système le
prend pour un nom de fichier, et compile ce fichier. Si @var{argument}
commence avec une controblique, alors le système l'interprète comme une
ligne d'entrée à @LaTeX{}, ce qui peut être utilisé pour obtenir
certains effets spéciaux (@pxref{Command line input}).

Si vous ne donnez aucun arguments ni options alors @command{pdflatex}
invite à saisir à partir du terminal. Vous pouvez vous échapper de cela
en entrant @kbd{CTRL-D}.

Si @LaTeX{} trouve une erreur dans votre document alors par défaut il
s'arrête et vous interroge à ce propos.  @xref{Recovering from errors},
pour un aperçu de quoi faire.

@menu
* Command line options::     Options usuelles de ligne de commande.
* Command line input::       Spécifier du code LaTeX sur la ligne de commande.
* Nom d'ouvrage: Jobname.     Comment @TeX{} définit le nom de l'ouvrage courant.
* Recovering from errors::   Quand quelque chose se passe mal.
@end menu


@node Command line options
@section Options passées à la ligne de commande

@cindex options passée à la ligne de commande

On décrit ici les options de ligne de commande qui sont pertinentes pour
rédaction ordinaire de documents. Pour une liste complète, essayez
d'exécuter @samp{latex --help} depuis la ligne de commande.

Avec nombre d'implémentations on peut spécifier les options de ligne de
commande avec un préfixe @samp{-} ou @samp{--}.  C'est le cas à la fois
pour @value{TeXLive} (y compris Mac@TeX{}) et @value{MiKTeX}. Ici on utilise les
deux conventions indistinctement. Si une option prend une valeur,
celle-ci peut être spécifiée soit comme un argument séparé
(@samp{--truc bidule}), ou comme un argument unique avec un signe
@code{=} (@samp{--truc=bidule}), à condition qu'il n'y ait aucun espace
autour du @code{=}. On utilisera en général la syntaxe en @code{=}.



@table @code
@findex --version @r{ligne de commande, option}
@item -version
Affiche la version courante, comme @samp{pdfTeX 3.14159265-2.6-1.40.16
(@value{TeXLive} 2015/Debian)} ainsi qu'une petite quantité d'information
supplémentaire, et se termine.

@findex --help @r{ligne de commande, option}
@item -help
Produit un message bref d'utilisation servant d'aide-mémoire et se
termine.

@anchor{interaction modes}
@findex --interaction @r{ligne de commande, option}
@item -interaction=@var{mode}
@cindex @identity{batchmode}
@cindex @identity{scrollmode}
@cindex @identity{errorstopmode}
@cindex @identity{nonstopmode}
z@TeX{} compile un document en l'un parmi quatre modes possibles
d'interaction : @code{batchmode}, @code{nonstopmode}, @code{scrollmode},
@code{errorstopmode}. Dans le mode @dfn{@identity{errorstopmode}} (le
mode par défaut), @TeX{} s'arrête à chaque erreur et demande une
intervention de l'utilisateur. Dans le mode @dfn{@identity{batchmode}}
il n'imprime rien sur le terminal, on défile sur les erreurs comme si
l'utilisateur appuyait @kbd{RETURN} à chaque erreur, et les fichiers
manquants entraînent la terminaison de la tâche. Dans le mode
@dfn{@identity{nonstopmode}}, les messages de diagnostic apparaissent
sur le terminal mais comme dans le mode @code{batchmode} il n'y a pas
d'interaction avec l'utilisateur. Dans le mode
@dfn{@identity{scrollmode}}, @TeX{} s'arrête en cas de fichiers
manquants ou d'entrée clavier, mais pour nulle autre raison.

Par exemple, en démarrant @LaTeX{} avec cette ligne de commande :

@example
pdflatex -interaction=batchmode @var{nomfichier}
@end example

@noindent
on élimine la plupart des sorties terminal.

@cindex jobname
@cindex nom de fichier de la tâche courante
@findex --jobname @r{ligne de commande, option}
@item -jobname=@var{chaîne}
Règle la valeur du @dfn{nom d'ouvrage} de @TeX{} à la chaîne de
caractères @var{chaîne}.  Le fichier journal et le fichier de sortie
s'appelleront @file{@var{chaîne}.log} et
@file{@var{chaîne}.pdf}. @pxref{Jobname}.

@anchor{output directory}
@cindex répertoire de sortie pour tous les fichiers externes
@cindex sortie, pour tous les fichiers externes, répertoire de
@findex --output-directory @r{ligne de commande, option}
@item -output-directory=@var{répertoire}
Écrit les fichiers dans le répertoire @var{répertoire}.  Il doit déjà
exister.  Ceci s'applique à tous les fichiers externes créés par @TeX{}
ou @LaTeX{}, tels que le fichier @file{.log} de l'exécution, les
fichiers @file{.aux}, @file{.toc}, etc., créés par @LaTeX{}, de même que
le fichier de sortie principal @file{.pdf} ou @file{.dvi} lui-même.

Lorsqu'il est spécifié, le répertoire de sortie @var{répertoire} est
aussi vérifié en premier automatiquement pour tout fichier lu en entrée,
de sorte que les fichiers externes peuvent être relus en entrée, si
désiré. Le vrai répertoire courant (dans lequel @LaTeX{} été lancé)
demeure inchangé, et est également vérifié pour trouver les fichiers en
entrée.

@cindex shell escape
@cindex @code{\write18}, activation
@findex --enable-write18 @r{ligne de commande, option}
@findex --disable-write18 @r{ligne de commande, option}
@findex --shell-escape @r{ligne de commande, option}
@findex --no-shell-escape @r{ligne de commande, option}
@item --enable-write18
@itemx --disable-write18
@itemx --shell-escape
@itemx --no-shell-escape
Activation et désactivation @code{\write18@{@var{commande_shell}@}}
(@pxref{\write18}).  Les deux premières options sont prises en charge à
la fois par @value{TeXLive} et @value{MiKTeX}, alors que les deux suivantes sont
des synonymes pris en charge par @value{TeXLive}.

Activer cette fonction a des implications lourdes de sécurité, puisque
cela permet à un fichier @LaTeX{} d'exécuter n'importe quelle commande.
Ainsi, par défaut, le @code{\write18} non restreint n'est pas autorisé.
(Le réglage par défaut de @value{TeXLive}, Mac@TeX{}, et @value{MiKTeX}
est d'autoriser l'exécution d'un nombre limité de programmes en relation
avec @TeX{}, et qu'elles distribuent).

Pa exemple, si vous invoquez @LaTeX{} avec l'option
@code{no-shell-escape}, et que dans votre document vous appelez
@code{\write18@{ls -l@}}, alors vous n'obtenez pas d'erreur mais votre
fichier journal dit @samp{runsystem(ls -l)...disabled}.

@findex --halt-on-error @r{ligne de commande, option}
@item -halt-on-error
Arrête le traitement sur la première erreur.

@findex --file-line-error @r{ligne de commande, option}
@findex --no-file-line-error @r{ligne de commande, option}
@item -file-line-error
@item -no-file-line-error
Active ou désactive le style
@code{@var{nomfichier}:@var{numéroligne}:@var{erreur}} des messages
d'erreur.  Ces options ne sont disponibles qu'avec @value{TeXLive} ou
Mac@TeX{}.
@end table


@node Command line input
@section Spécifier du code LaTeX sur la ligne de commande

@cindex code entré sur la ligne de commande
@cindex entré, code sur la ligne de commande

Au sein de l'invocation de ligne de commande

@example
pdflatex @var{options} @var{argument}
@end example

@noindent
vous pouvez spécifier du code @LaTeX{} arbitraire en entrée en
commençant @var{argument} par une controblique (ce qui est pris en
charge par tous les moteurs). Ceci permet de faire certains effets
spéciaux.

@PkgIndex{hyperref}
@c
Par exemple, ce fichier (qui utilise le paquetage @package{hyperref} pour
les hyperliens) peut produire deux types de sortie, l'un pour une
consultation sur document papier et l'autre pour une consultation sur
écran.

@example
\ifdefined\paperversion        % dans le préambule
\newcommand@{\urlcolor@}@{black@}
\else
\newcommand@{\urlcolor@}@{blue@}
\fi
\usepackage[colorlinks=true,urlcolor=\urlcolor]@{hyperref@}
  ...
\href@{https://www.ctan.org@}@{CTAN@}  % dans le corps
  ...
@end example

@noindent
Lorsqu'on compile ce document @file{book.tex} avec la ligne de commande
@code{pdflatex book} le lien @samp{CTAN} sera en bleu.  Mais si on le
compile avec

@example
pdflatex "\def\paperversion@{@}\input book.tex"
@end example

@noindent
alors le lien sera en noir.  On utilise des guillemets anglais double
pour empêcher l'interprétation des symboles par l'interpréteur de ligne
de commande (désigné également par @dfn{shell}). (Ceci fonctionne
généralement à la fois sur les systèmes Unix et @value{MSWindows}, mais il y a
nombre de particularités dans l'usage des guillemets par les shells,
lisez donc la documentation de votre système si besoin est).

De même, à partir d'un seul fichier @file{principal.tex} vous pouvez
compiler deux versions distinctes.

@c credit Paul Gaborit: https://tex.stackexchange.com/a/220101/121234
@example
pdflatex -jobname=etudiants "\def\etudiants@{@}\input@{principal@}"
pdflatex -jobname=professeurs "\def\profs@{@}\input@{principal@}"
@end example

@noindent
L'option @code{jobname} est là parce que sinon les deux fichiers en
sortie s'appelleraient @file{principal.pdf} et le second écraserait le
premier. (@pxref{Jobname}).

Dans cet exemple on passe l'option @code{draft} au paquetage
@package{graphicx} :

@example
pdflatex "\PassOptionsToPackage@{draft@}@{graphicx@}\input@{aa.tex@}"
@end example

@noindent
de sorte que les fichiers graphiques ne sont lus que pour l'information
de dimension de boîte englobante, mais remplacés dans le PDF par une
boîte de même taille ne contenant que le nom de fichier, ce qui accélère
le temps de compilation, et économise l'encre d'imprimante.

Un autre exemple classique est de cribler certains chapitres à la
compilation en les passant à @code{\includeonly} dans la ligne de
commande. Ainsi, supposons qu'on a un fichier racine @file{livre.tex}
ainsi formé :

@example
\documentclass@{book@}
\begin@{document@}
\frontmatter
\include@{pref@}
\mainmatter
\include@{chap1@}
\include@{chap2@}
\appendix
\include@{append@}
\backmatter
\include@{bib@}
\end@{document@}
@end example

En compilant @file{livre.tex} avec la ligne de commande suivante :

@example
pdflatex '\includeonly@{chap1@}\input@{livre@}
@end example

@noindent
seul le chapitre contenu dans @file{chap1.tex} sera produit en
sortie. @xref{Splitting the input}.

Dans ce dernier exemple, on force la date au 14 juillet 1789 :

@example
pdflatex '\day=14 \month=7 \year=1789 \input revolution'
@end example

Ainsi, si le fichier @file{revolution.tex} contient ceci :

@example
\documentclass[french]@{minimal@}
\usepackage@{babel@}
\begin@{document@}
\today\ c'est la révolution !
\end@{document@}
@end example

@noindent
alors vous aurez en sortie un truc du genre :

@example
14 juillet 1789 c’est la révolution !
@end example

@node Jobname
@section Nom d'ouvrage de @TeX{}
@cindex nom d'ouvrage (jobname)
@cindex jobname, nom d'ouvrage
@cindex document, nom racine
@cindex racine du nom du document
@cindex fichier racine
@cindex racine, fichier
@c xx TODO TikZ externalize not working with -jobname option

Exécuter @LaTeX{} crée plusieurs fichiers, dont la sortie principale en
PDF (ou DVI) et bien d'autres. Ces fichiers sont nommés selon ce qu'on
appelle le @dfn{nom d'ouvrage}. Le cas le plus fréquent est aussi le
plus simple : la commande @code{pdflatex these} crée @code{these.pdf} et
aussi @code{these.log} et @code{these.aux}. Ici le nom d'ouvrage est
@code{these}.

En général, @LaTeX{} est invoqué comme @code{@var{moteur-latex}
@var{options} @var{arguments}}, où @var{moteur-latex} est
@code{pdflatex}, @code{lualatex}, etc.@: (@pxref{@TeX{} engines}).  Si
@var{arguments} ne commence pas par une controblique, comme c'est le
cas ci-dessus avec @code{these}, alors @TeX{} insère un argument
@code{\input} en tête de la liste d'arguments @var{arguments} et
considère le texte formé en joignant les éléments de cette liste séparés
par des blancs comme un code source pris en entrée. Ainsi la ligne de
commande @code{pdflatex these} conduit @LaTeX{} à compiler le code
source suivant :

@example
\input these
@end example

@noindent
Ceci permet de faire une indirection vers le fichier @file{these.tex}
qui est censé contenir l'entièreté du code source à compiler, et qu'on
appelle à ce titre @dfn{fichier racine} (@pxref{Splitting the input}).

On appelle @dfn{nom racine} le nom du fichier racine, sans l'extension
@file{.tex} s'il en a une. @xref{\input}, pour la gestion de l'extension
@file{.tex}.

Notez bien, que si on a toujours un nom d'ouvrage, on n'a pas
systématiquement de nom racine. En effet, dès lors qu'on a du code
@LaTeX{} passé sur la ligne de commande (@pxref{Command line input}),
l'entièreté du code compilé n'est pas issu d'un seul fichier. En
supposant ici et ci-après que le shell est @file{bash}, et donc que les
guillemets anglais simples ou doubles sont interprétés par le shell (voir
@uref{https://www.gnu.org/software/bash/manual/html_node/Quoting.html#Quoting,
,(info "(bash) Quoting")}), considérez par exemple ligne de commande
suivante :

@example
pdflatex '\documentclass@{article@}\input' corps
@end example

@noindent
Dans l'exemple précédent, on ne peut pas considérer @file{corps.tex}
comme un fichier racine, puisqu'il ne peut pas être compilé de façon
autonome vu qu'il ne contient pas la commande @code{\documentclass}. Par
abus de langage on continue toutefois de parler de fichier racine si le
code @LaTeX{} passé en ligne de commande ne sert qu'à configurer la
façon dont le fichier est compilé, comme dans :

@example
pdflatex '\PassOptionsToClass@{printout@}@{beamer@}\input' mapresentation
@end example

@noindent
où @file{mapresenation.tex} contient une présentation @package{beamer}, et
on veut juste la compiler de façon adéquate pour une impression plutôt
que pour une projection.

Voici par contre un exemple extrême où on n'a pas de fichier racine,
considérez la ligne de commande :

@example
pdflatex fic "Bonjour tout le monde~!" '\end@{document@}'
@end example

@noindent
ce qui conduit @file{pdflatex} à compiler le code source suivant :

@example
\input fic Bonjour tout le monde~! \end@{document@}
@end example

@noindent
À supposer que @file{fic.tex} soit un fichier contenant
@code{\documentclass@{minimal@}\begin@{document@}} le résultat sera un
document PDF nommé @file{fic.pdf} et contenant le texte @samp{Bonjour
tout le monde !}.

Dans la mesure où on n'a pas systématiquement de fichier racine, la
règle que @TeX{} utilise pour déterminer implicitement le nom d'ouvrage,
c.-à-d.@: lorsqu'il n'est pas spécifié explicitement par l'option
@code{-jobname} (@pxref{Command line options}), est que le nom d'ouvrage
soit le nom du fichier correspondant à l'argument passé au premier
@code{\input} rencontré durant la compilation, débarrassé de l'extension
@file{.tex} s'il en a une. Dans l'exemple précédent, le nom d'ouvrage
est donc bien @file{fic}. Voir aussi plus bas la primitive
@code{\jobname} pour une dérogation à cette règle.

Ce qui précède vaut également si @TeX{} est en mode interactif, la seule
différence est alors que @var{arguments} n'est pas passé entièrement sur
la ligne de commande, mais saisi interactivement par l'utilisateur. Par
exemple si dans le shell vous tapez la ligne de commande
@code{pdflatex}, puis qu'à l'invite de @TeX{} vous tapez @code{these},
vous aurez le même résultat que dans le premier exemple donné, à savoir
si vous aviez tapé directement @code{pdflatex these} depuis le shell.

Dans la même veine, la seule différence si @var{arguments} commence avec
une controblique est que le @code{\input} n'est pas inséré, et donc
@code{pdflatex "\input" these} est sensiblement équivalent à
@code{pdflatex these}.

Il y a deux autres possibilités pour le nom d'ouvrage. Pour ce qui est de
la première, il peut être directement spécifié avec l'option
@code{-jobname}, comme dans @code{pdflatex -jobname=monnom}
(@pxref{Command line input} pour un véritable exemple).

@findex texput@r{, nom d'ouvrage par défaut}
@cindex repli, nom d'ouvrage
La seconde possibilité est @file{texput}, c'est la valeur par défaut de
repli si aucun autre nom n'est disponible pour @TeX{}. Par exemple si
aucune option @code{-jobname} n'a été spécifiée et que la compilation
s'arrête avant qu'une commande @code{\input} ne soit trouvée, alors le
fichier journal s'appelle @file{texput.log}.


@findex \jobname
Au sein du document, la primitive @code{\jobname} se comporte comme une
macro qui se développe en le nom d'ouvrage. Quand le nom d'ouvrage
contient au moins un blanc, un guillemet anglais est ajouté et début et
fin de la chaîne renvoyée par @code{\jobname} et tout blanc est remplacé
par un espace, c.-à-d.@: qu'un caractère tabulation est remplacé par un
espace. De plus, au cours du développement, tous les caractères sont de
catcode 12 (other), y compris les lettres qui normalement sont de
catcode 11, mais à l'exception des espaces auquel un catcode 10 est
attribué.

@findex \IfBeginWith*@r{ macro from @package{xstring}}
@PkgIndex{xstring}

À cause de cette situation des catcodes, utiliser le nom d'ouvrage dans
une expression conditionnelle peut devenir compliqué. Une solution est
d'utiliser la macro @code{\IfBeginWith} du paquetage @file{xtring} dans
sa forme étoilée pour être insensible au catcode. Dans le texte suivant
par exemple, la note en bas de page « dont la @identity{Respublica
Bananensis Francorum}. » n'est présente que si le nom d'ouvrage commence
par @file{moi-meme}.

@example
Si une démocratie est juste un régime où les citoyens votent alors
toutes les républiques bananières\IfBeginWith*@{\jobname@}@{moi-meme@}%
@{\footnote@{dont la Respublica Bananensis Francorum.@}@}@{@} sont des
démocraties.
@end example

Redéfinir @code{\jobname} dans le code source avec un
@code{\renewcommand} peut s'avérer vain et risqué. Tout d'abord, si
c'était ce qui vous cherchiez, cela ne changera pas le nom d'ouvrage au
sens où les fichiers créés directement par le moteur continuent à
utiliser le nom d'ouvrage original : il s'agit notamment du fichier de
sortie principale @file{.pdf} ou @file{.dvi}, du journal de compilation
@file{.log} et du fichier de liste fichiers @file{.fls} si l'option
@code{-recorder} a été utilisée. Par contre les fichiers auxiliaires
@file{.aux}, @file{.bib}, etc.@: pourront être renommés car leur nom est
produit par le noyau @LaTeX{} en développant @code{\jobname} et non
directement par le moteur, mais à condition bien sûr que la redéfinition
soit faite avant l'ouverture des fichiers en question. Le paquetage
@file{multibib} utilise ce truc pour gérer plusieurs fichiers de
référence bibliographique.

La séquence de contrôle @code{\jobname} se comporte comme une macro, au
sens où on peut faire dessus toutes les opérations qu'on ferait sur une
macro, et notamment la développer, mais ce n'est pas une macro, c'est
une primitive @TeX{}. Ainsi, une seconde règle de détermination du nom
d'ouvrage est que le premier développement de @code{\jobname} fige le
nom d'ouvrage. Dans l'exemple suivant de ligne de commande :

@example
pdflatex '\typeout@{\jobname@}\input' these
@end example

@noindent
le nom d'ouvrage sera la valeur par défaut @file{texput}, et non
@file{these}. En effet le code @LaTeX{} @code{\typeout@{\jobname@}} a
pour effet que @code{\jobname} est développé avant que le premier
@code{\input} ne soit rencontré, et donc on déroge à la première règle
énoncée plus haut, c.-à-d.@: que dans ce cas le nom d'ouvrage n'est pas
donné par le premier @code{\input}.

@findex \documentclass@r{, et nom d'ouvrage @code{texput}}
@findex \RequirePackage@r{, et nom d'ouvrage @code{texput}}
Cette seconde règle a pour autre conséquence que dans l'exemple suivant
de ligne de commande :

@example
pdflatex '\documentclass@{article@}\input' corps
@end example

@noindent
le nom d'ouvrage sera également @file{texput}, en effet en sous-main les
commandes @code{\documentclass} et @code{\RequirePackage} développent
@code{\jobname}, et donc la seconde règle déroge à la première règle,
celle du premier @code{\input} rencontré.

Il est à noter que ce qui précède n'était pas vrai avec de vieilles
versions de @LaTeX{} (approximativement) antérieures à 2020. Avec ces
vieilles versions @code{\documentclass} et @code{\RequirePackage}
faisaient un @code{\input} sans développement préalable de
@code{\jobname} et donc dans l'exemple précédent le nom d'ouvrage aurait
été @file{article}, ce qui était déroutant.

Par ailleurs, l'équivalence entre @code{pdflatex "\input" these} et
@code{pdflatex these} peut être mise en défaut lorsque le nom du fichier
comprend un blanc. Comparer par exemple les deux lignes de commande
suivantes :

@example
pdflatex '\input' 'to\space\space to'
pdflatex 'to\space\space to'
@end example

@noindent
En remplaçant les espaces par des espaces visibles
@code{@visiblespace{}} pour la clarté de l'exposé, la première ligne de
commande qui a un @code{\input} explicite cherche un fichier
@file{to.tex}, ou à défaut @file{to}, et ajoute à la suite de
l'@code{\input} de ce fichier, le code source
@code{\space@visiblespace{}to}, en effet le premier des deux
@code{\space} est consommé par l'@code{\input}. Elle aura donc pour nom
d'ouvrage @file{to}. La seconde, qui a un @code{\input} implicite, a par
contre un comportement qui dépend de la distribution. Avec @value{MiKTeX} elle
est équivalente à la première. Mais avec @value{TeXLive}, elle cherche un
fichier @file{to@visiblespace{}@visiblespace{}to.tex}, ou à défaut
@file{to@visiblespace{}@visiblespace{}to}, et n'ajoute rien à la suite
de l'@code{\input} de ce fichier. Elle aura donc pour nom d'ouvrage
@file{"to@visiblespace{}@visiblespace{}to"}.


@node Recovering from errors
@section Quand quelque chose se passe mal

Si @LaTeX{} trouve une erreur dans votre document alors il vous produit
un message d'erreur et vous invite à la saisie par un point
d'interrogation, @code{?}.  Par exemple, exécuter @LaTeX{} sur ce fichier

@example
\newcommand@{\NP@}@{\ensuremath@{\textbf@{NP@}@}@}
Le problème \PN@{@} est mis à prix à un million de dollars.
@end example

@noindent
a pour effet qu'il affiche ceci, et attende une saisie :

@example
! Undefined control sequence.
l.5 Le problème \PN
           @{@} est mis à prix à un million de dollars.
?
@end example

@noindent
Le plus simple est de saisir @kbd{x} et @kbd{RETURN} et de corriger la
coquille.  Alternativement vous pourriez saisir @kbd{?} et @kbd{RETURN}
pour voir les autres options.

@cindex @samp{*}, invite
@cindex invite @samp{*}
@findex \stop
Il y a deux autres scénarios.  Le premier est que vous ayez omis le
@code{\end@{document@}} ou fait une faute de frappe dessus.  Dans ce cas
@LaTeX{} produit en invite @samp{*}.  Vous pouvez revenir à la ligne de
commande en tapant @kbd{\stop} et @kbd{RETURN}.

Le dernier scénario est que vous ayez fait une faute de frappe sur le
nom de fichier.  Par exemple, au lieu de @code{pdflatex test} vous
auriez tapé @code{pdflatex tste}.

@example
! I can't find file `tste'.
<*> tste

(Press Enter to retry, or Control-D to exit)
Please type another input file name:
@end example

@noindent
Le plus simple est de saisir @kbd{CTRL D} (en appuyant sur les touches
Contrôle et d simultanément), et d'ensuite retaper la ligne de commande
correcte.


@node Document templates
@appendix Patrons de documents
@cindex patron de document
@cindex modèle de document

Bien qu'ils soient illustratifs, ces patrons de document vous seront
peut-être utiles.  Davantage de ressources de patrons sont listées à
@url{https://tug.org/interest.html#latextemplates}.

@menu
* patron @package{beamer}: beamer template.
* patron @code{article}: article template.
* patron @code{book}: book template.
* patron @code{book} plus élaboré: Larger book template.
@end menu


@node beamer template
@section Un patron @package{beamer}

@cindex @package{beamer} patron et classe
@cindex patron, @package{beamer}
@PkgIndex{beamer}

La classe @package{beamer} crée des présentations en diapositives. Elle a
de très nombreuses possibilités, mais voici un patron de base :

@verbatim
\documentclass{beamer}
\usepackage[latin1]{inputenc}

\title{Patron pour la classe Beamer}
\author{Alex L'Auteur}
\date{31 juillet 2020}

\begin{document}

\maketitle

% sans [fragile], n'importe quel code {verbatim} se prend des erreurs mystérieuses.
\begin{frame}[fragile]
 \frametitle{Première diapositive}

\begin{verbatim}
  C'est \verbatim!
\end{verbatim}

\end{frame}

\end{document}
@end verbatim

Le paquetage Beamer sur le CTAN :
@url{https://ctan.org/pkg/beamer}.

@node article template
@section Patron @code{article}

@cindex patron (simple), @code{article}

Un patron simple pour un article.

@verbatim
\documentclass{article}
\title{Patron de la classe article}
\author{Alex Author}

\begin{document}
\maketitle

\section{Première section}
Du texte.

\subsection{Première section, première sous-section}
Encore du texte.

\section{Deuxième section}
Et du texte.

\end{document}
@end verbatim

@node book template
@section Un patron @code{book}

@cindex patron, @code{book}

Voici un patron simple pour un livre. @xref{Larger book template}, pour
un patron plus élaboré.

@example
\documentclass@{book@}
\title@{Le Patron de la classe book@}
\author@{Alex L'Auteur@}

\begin@{document@}
\maketitle

\chapter@{Premier@}
Du texte.

\chapter@{Second@}
Et du texte.

\section@{Un sujet secondaire@}
La fin.

\end@{document@}
@end example


@node Larger book template
@section Un patron @code{book} plus élaboré

@cindex patron @code{book}

Voici un patron quelque peu élaboré pour un livre. @xref{book template},
pour un patron plus simple.

Ce patron utilise un @code{\frontmatter}, @code{\mainmatter}, et
@code{\backmatter} pour contrôler la typographie des trois zones
principales d'un livre (@pxref{\frontmatter & \mainmatter &
\backmatter}).  Le livre a une bibliographie et un index.

Il est également à noter qu'il utilise @code{\include} et
@code{\includeonly} (@pxref{Splitting the input}).  Lorsque vous
travaillez sur un chapitre vous pouvez ne pas compiler tous les autres
chapitres en mettant en commentaire les entrées correspondantes dans les
arguments de @code{\includeonly}.  Ceci accélère la compilation sans
perdre aucune information telle que les renvois.  (La matière qu'il
n'est pas nécessaire de mettre sur une nouvelle page est inclus avec
@code{\input} au lieu de @code{\include} ; mais ceci au dépens du
bénéfice de maintenir les valeurs de renvois).

@example
\documentclass[titlepage]@{book@}
\usepackage@{makeidx@}\makeindex

\title@{Book Class Template@}
\author@{Alex Author@}

\includeonly@{%
%  frontcover,
  preface,
  chap1,
% appenA,
  @}

\begin@{document@}
\frontmatter
\include@{frontcover@}
  % maybe comment out while drafting:
\maketitle \input@{dedication@} \input@{copyright@}
\tableofcontents
\include@{preface@}

\mainmatter
\include@{chap1@}
...
\appendix
\include@{appenA@}
...

\backmatter
\bibliographystyle@{apalike@}
\addcontentsline@{toc@}@{chapter@}@{Bibliography@}
\bibliography
\addcontentsline@{toc@}@{chapter@}@{Index@}
\printindex
\include@{backcover@}
\end@{document@}
@end example


@node License translation, Concept Index, Document templates, Top
@comment  node-name,  next,  previous,  up
@appendix Traduction de la licence

La traduction qui suit est donnée uniquement à titre informatif, et ne
remplace pas le texte en anglais donné au début de ce document.

Permission vous est donnée de distribuer des copies conformes de ce
manuel à condition que les mentions du droit d'auteur et de permission
soient préservées sur toutes les copies.

@ignore
Il est permis de traiter ce fichier par @TeX{} et d'imprimer le
résultat, à condition que le document imprimé porte une mention de
permission de copier identique à celle-ci à l'exception de la
suppression de ce paragraphe (ce paragraphe n'étant pas pertinent pour
le manuel imprimé).
@end ignore

Permission vous est donnée de copier et distribuer des versions
modifiées de ce manuel dans les conditions d'une copie conforme, à
condition que l'ensemble de l'ouvrage dérivé résultant soit distribué
sous les termes d'une mention de permission identique à celle-ci.

Permission vous est donnée de copier et distribuer des traductions de ce
manuel dans une autre langue, dans les conditions ci-dessus pour les
versions modifiées.

@node Concept Index
@unnumbered Index des concepts

@printindex cp


@c The name of the `Commande Index' node must NOT be altered for ltx-help.el.
@node Command Index
@unnumbered Index des commandes

@printindex fn

@bye

\def\DeclareTextCommand{\foo}{T1}
%    then |\foo| is defined to be |\T1-cmd \foo \T1\foo|,
%    %    where |\T1\foo| is \emph{one} control sequence, not two!
\newcommand

\def\ProvideTextCommand % same with \providecommand
\@onlypreamble\DeclareTextCommand
\@onlypreamble\DeclareTextSymbol
\gdef\TextSymbolUnavailable#1{%
\@onlypreamble\def\DeclareTextCommandDefault#1{%
\def\ProvideTextCommandDefault#1{%
\def\DeclareTextAccent#1#2#3{%
\def\DeclareTextCompositeCommand#1#2#3#4{%
\@onlypreamble\def\DeclareTextComposite#1#2#3#4{%
\def\UseTextAccent#1#2#3{%
\def\UseTextSymbol#1#2{%
\@onlypreamble\DeclareTextSymbolDefault@item
\@onlypreamble\DeclareTextAccentDefault@item
\def\UndeclareTextCommand#1#2{%

@c Local Variables:
@c ispell-dictionary: "francais"
@c coding: utf-8-unix
@c input-method-history: ("french-postfix")
@c TeX-open-quote: "« "
@c TeX-close-quote: " »"
@c End:
